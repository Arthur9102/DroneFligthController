
UAV_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800d770  0800d770  0000e770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd0  0800dcd0  0000f1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcd0  0800dcd0  0000ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcd8  0800dcd8  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dcdc  0800dcdc  0000ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800dce0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f50  200001e8  0800dec4  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005138  0800dec4  00010138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f62e  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab7  00000000  00000000  0002e842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001549  00000000  00000000  00034ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdac  00000000  00000000  000363f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e80d  00000000  00000000  0005319d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab877  00000000  00000000  000719aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000858c  00000000  00000000  0011d264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001257f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d754 	.word	0x0800d754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d754 	.word	0x0800d754

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ibus_check_CS>:

 FS_IA10B_ibus ibus;
 
 unsigned char ibus_check_CS(unsigned char* data, unsigned char len)
 
 {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
     unsigned short CS = 0xffff;
 8000f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f58:	81fb      	strh	r3, [r7, #14]
 
     for (int i = 0; i < len-2; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	e00a      	b.n	8000f76 <ibus_check_CS+0x2e>
     {
         CS = CS - data[i];
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	81fb      	strh	r3, [r7, #14]
     for (int i = 0; i < len-2; i++)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbef      	blt.n	8000f60 <ibus_check_CS+0x18>
     }
 
     return ((CS&0x00ff) == data[30]) && ((CS>>8) == data[31]);
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	321e      	adds	r2, #30
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d109      	bne.n	8000fa2 <ibus_check_CS+0x5a>
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	321f      	adds	r2, #31
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <ibus_check_CS+0x5a>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <ibus_check_CS+0x5c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 }
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <ibus_message>:
 
 void ibus_message(unsigned char* data, FS_IA10B_ibus* ibus)
 {
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
     ibus -> right_horizontal = (data[2] | data[3] << 8) & 0x0fff;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3303      	adds	r3, #3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	801a      	strh	r2, [r3, #0]
     ibus -> right_vertical = (data[4] | data[5] << 8) & 0x0fff;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3305      	adds	r3, #5
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	805a      	strh	r2, [r3, #2]
     ibus -> left_horizontal = (data[6] | data[7] << 8) & 0x0fff;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3306      	adds	r3, #6
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b21a      	sxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3307      	adds	r3, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101c:	b29a      	uxth	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	809a      	strh	r2, [r3, #4]
     ibus -> left_vertical = (data[8] | data[9] << 8) & 0x0fff;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3308      	adds	r3, #8
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3309      	adds	r3, #9
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21b      	sxth	r3, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103e:	b29a      	uxth	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	80da      	strh	r2, [r3, #6]
 
     ibus -> swa = (data[10] | data[11] << 8) & 0x0fff;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	330a      	adds	r3, #10
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b21a      	sxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	330b      	adds	r3, #11
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	811a      	strh	r2, [r3, #8]
     ibus -> swc = (data[12] | data[13] << 8) & 0x0fff;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	330c      	adds	r3, #12
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	330d      	adds	r3, #13
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001082:	b29a      	uxth	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	819a      	strh	r2, [r3, #12]
     ibus -> swd = (data[14] | data[15] << 8) & 0x0fff;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	330e      	adds	r3, #14
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	330f      	adds	r3, #15
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	81da      	strh	r2, [r3, #14]
 
     ibus -> failsafe = ibus -> swd == 1500;							//so sánh giá trị tại switch D có bằng 1500 hay không
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	89db      	ldrh	r3, [r3, #14]
 80010ae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010b2:	4293      	cmp	r3, r2
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	751a      	strb	r2, [r3, #20]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <ibus_active_failsafe>:
 
unsigned char ibus_active_failsafe(FS_IA10B_ibus* ibus)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
     return ibus -> failsafe != 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7d1b      	ldrb	r3, [r3, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <map_ibus_to_altitude>:
 
 float map_ibus_to_altitude(unsigned short ibus_value) {
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]

    float min_in = 1000.0f;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <map_ibus_to_altitude+0xb0>)
 80010fc:	617b      	str	r3, [r7, #20]
    float max_in = 2000.0f;
 80010fe:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <map_ibus_to_altitude+0xb4>)
 8001100:	613b      	str	r3, [r7, #16]
    float min_out = 0.0f;
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
    float max_out = 100.0f; //cm
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <map_ibus_to_altitude+0xb8>)
 800110a:	60bb      	str	r3, [r7, #8]

    if (ibus_value < min_in) ibus_value = min_in;
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	ed97 7a05 	vldr	s14, [r7, #20]
 800111a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	dd06      	ble.n	8001132 <map_ibus_to_altitude+0x42>
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	80fb      	strh	r3, [r7, #6]
    if (ibus_value > max_in) ibus_value = max_in;
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d506      	bpl.n	8001158 <map_ibus_to_altitude+0x68>
 800114a:	edd7 7a04 	vldr	s15, [r7, #16]
 800114e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001152:	ee17 3a90 	vmov	r3, s15
 8001156:	80fb      	strh	r3, [r7, #6]

    return ((float)(ibus_value - min_in)) * (max_out - min_out) / (max_in - min_in) + min_out; //cm
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	edd7 7a05 	vldr	s15, [r7, #20]
 8001166:	ee37 7a67 	vsub.f32	s14, s14, s15
 800116a:	edd7 6a02 	vldr	s13, [r7, #8]
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001176:	ee67 6a27 	vmul.f32	s13, s14, s15
 800117a:	ed97 7a04 	vldr	s14, [r7, #16]
 800117e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800118a:	edd7 7a03 	vldr	s15, [r7, #12]
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 }
 8001192:	eeb0 0a67 	vmov.f32	s0, s15
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	447a0000 	.word	0x447a0000
 80011a4:	44fa0000 	.word	0x44fa0000
 80011a8:	42c80000 	.word	0x42c80000

080011ac <do_motor1>:
      gyro_x_bias = (float)(gyro_x_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f; // Chuyển LSB sang rad/s
      gyro_y_bias = (float)(gyro_y_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f;
      gyro_z_bias = (float)(gyro_z_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f;
}

void do_motor1(int16_t t) { TIM2->CCR1 = 1000 + CONSTRAIN(t, 0, 1000); }
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0a      	blt.n	80011d4 <do_motor1+0x28>
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c6:	bfa8      	it	ge
 80011c8:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011d2:	e001      	b.n	80011d8 <do_motor1+0x2c>
 80011d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <do_motor2>:
void do_motor2(int16_t t) { TIM2->CCR2 = 1000 + CONSTRAIN(t, 0, 1000); }
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <do_motor2+0x28>
 80011fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001200:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001204:	bfa8      	it	ge
 8001206:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 800120a:	b21b      	sxth	r3, r3
 800120c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001210:	e001      	b.n	8001216 <do_motor2+0x2c>
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800121a:	6393      	str	r3, [r2, #56]	@ 0x38
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <do_motor3>:
void do_motor3(int16_t t) { TIM2->CCR3 = 1000 + CONSTRAIN(t, 0, 1000); }
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0a      	blt.n	8001250 <do_motor3+0x28>
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001242:	bfa8      	it	ge
 8001244:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 8001248:	b21b      	sxth	r3, r3
 800124a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800124e:	e001      	b.n	8001254 <do_motor3+0x2c>
 8001250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <do_motor4>:
void do_motor4(int16_t t) { TIM2->CCR4 = 1000 + CONSTRAIN(t, 0, 1000); }
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <do_motor4+0x28>
 8001278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001280:	bfa8      	it	ge
 8001282:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 8001286:	b21b      	sxth	r3, r3
 8001288:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800128c:	e001      	b.n	8001292 <do_motor4+0x2c>
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	0000      	movs	r0, r0
	...

080012a8 <estimate_yaw_complementary>:

/* Function to estimate yaw using complementary filter */
float estimate_yaw_complementary(float gyro_yaw_rate, float mag_yaw, float dt, float *yaw_state) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80012b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80012b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80012ba:	6038      	str	r0, [r7, #0]
    // 1. Integrate gyro rate to get change in angle
    float gyro_delta = gyro_yaw_rate * dt;
 80012bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a05 	vstr	s15, [r7, #20]
    
    // 2. Apply complementary filter
    if (!MAG_AVAILABLE) {
        // No magnetometer data available - only use gyro
        *yaw_state += gyro_delta;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	edc3 7a00 	vstr	s15, [r3]
        *yaw_state = YAW_CF_ALPHA * (*yaw_state + gyro_delta) + 
                     (1.0f - YAW_CF_ALPHA) * mag_yaw;
    }
    
    // 3. Normalize yaw to range [-π, π]
    while (*yaw_state > M_PI) *yaw_state -= 2.0f * M_PI;
 80012e0:	e012      	b.n	8001308 <estimate_yaw_complementary+0x60>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f936 	bl	8000558 <__aeabi_f2d>
 80012ec:	a322      	add	r3, pc, #136	@ (adr r3, 8001378 <estimate_yaw_complementary+0xd0>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7fe ffd1 	bl	8000298 <__aeabi_dsub>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc5b 	bl	8000bb8 <__aeabi_d2f>
 8001302:	4602      	mov	r2, r0
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f923 	bl	8000558 <__aeabi_f2d>
 8001312:	a31b      	add	r3, pc, #108	@ (adr r3, 8001380 <estimate_yaw_complementary+0xd8>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fc06 	bl	8000b28 <__aeabi_dcmpgt>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1df      	bne.n	80012e2 <estimate_yaw_complementary+0x3a>
    while (*yaw_state < -M_PI) *yaw_state += 2.0f * M_PI;
 8001322:	e012      	b.n	800134a <estimate_yaw_complementary+0xa2>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f915 	bl	8000558 <__aeabi_f2d>
 800132e:	a312      	add	r3, pc, #72	@ (adr r3, 8001378 <estimate_yaw_complementary+0xd0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7fe ffb2 	bl	800029c <__adddf3>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc3a 	bl	8000bb8 <__aeabi_d2f>
 8001344:	4602      	mov	r2, r0
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f902 	bl	8000558 <__aeabi_f2d>
 8001354:	a30c      	add	r3, pc, #48	@ (adr r3, 8001388 <estimate_yaw_complementary+0xe0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fbc7 	bl	8000aec <__aeabi_dcmplt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1df      	bne.n	8001324 <estimate_yaw_complementary+0x7c>
    
    return *yaw_state;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	54442d18 	.word	0x54442d18
 800137c:	401921fb 	.word	0x401921fb
 8001380:	54442d18 	.word	0x54442d18
 8001384:	400921fb 	.word	0x400921fb
 8001388:	54442d18 	.word	0x54442d18
 800138c:	c00921fb 	.word	0xc00921fb

08001390 <Kalman_Init>:
 /**
  * @brief Initialize a Kalman filter structure with default parameters
  * 
  * @param kalman Pointer to Kalman filter structure
  */
 void Kalman_Init(Kalman_t *kalman) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
     /* Set process and measurement noise parameters */
     kalman->Q_angle = 0.001f;    // Process noise variance for angle
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <Kalman_Init+0x58>)
 800139c:	601a      	str	r2, [r3, #0]
     kalman->Q_bias = 0.003f;     // Process noise variance for bias
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <Kalman_Init+0x5c>)
 80013a2:	605a      	str	r2, [r3, #4]
     kalman->R_measure = 0.03f;   // Measurement noise variance
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <Kalman_Init+0x60>)
 80013a8:	609a      	str	r2, [r3, #8]
     
     /* Initialize state variables */
     kalman->angle = 0.0f;        // Initial angle estimate
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
     kalman->bias = 0.0f;         // Initial bias estimate
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
     
     /* Initialize error covariance matrix */
     kalman->P[0][0] = 1.0f;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013c0:	615a      	str	r2, [r3, #20]
     kalman->P[0][1] = 0.0f;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
     kalman->P[1][0] = 0.0f;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
     kalman->P[1][1] = 1.0f;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013d8:	621a      	str	r2, [r3, #32]
 }
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	3a83126f 	.word	0x3a83126f
 80013ec:	3b449ba6 	.word	0x3b449ba6
 80013f0:	3cf5c28f 	.word	0x3cf5c28f

080013f4 <Kalman_Update>:
  * @param newAngle Angle measured from accelerometer (degrees)
  * @param newRate Angular rate from gyroscope (degrees/second)
  * @param dt Time step (seconds)
  * @return float Updated angle estimate (degrees)
  */
 float Kalman_Update(Kalman_t *kalman, float newAngle, float newRate, float dt) {
 80013f4:	b480      	push	{r7}
 80013f6:	b08d      	sub	sp, #52	@ 0x34
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001400:	edc7 0a01 	vstr	s1, [r7, #4]
 8001404:	ed87 1a00 	vstr	s2, [r7]
     /* Step 1: Predict */
     /* Project the state ahead using gyro data */
     float rate = newRate - kalman->bias;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a04 	vldr	s15, [r3, #16]
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
     kalman->angle += dt * rate;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001420:	edd7 6a00 	vldr	s13, [r7]
 8001424:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edc3 7a03 	vstr	s15, [r3, #12]
     
     /* Project the error covariance matrix ahead */
     kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	ed93 7a05 	vldr	s14, [r3, #20]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001442:	edd7 7a00 	vldr	s15, [r7]
 8001446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edd3 7a07 	vldr	s15, [r3, #28]
 800145a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001468:	edd7 7a00 	vldr	s15, [r7]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edc3 7a05 	vstr	s15, [r3, #20]
     kalman->P[0][1] -= dt * kalman->P[1][1];
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edd3 6a08 	vldr	s13, [r3, #32]
 8001486:	edd7 7a00 	vldr	s15, [r7]
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	edc3 7a06 	vstr	s15, [r3, #24]
     kalman->P[1][0] -= dt * kalman->P[1][1];
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	ed93 7a07 	vldr	s14, [r3, #28]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 6a08 	vldr	s13, [r3, #32]
 80014a4:	edd7 7a00 	vldr	s15, [r7]
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edc3 7a07 	vstr	s15, [r3, #28]
     kalman->P[1][1] += kalman->Q_bias * dt;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	edd3 6a01 	vldr	s13, [r3, #4]
 80014c2:	edd7 7a00 	vldr	s15, [r7]
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edc3 7a08 	vstr	s15, [r3, #32]
     
     /* Step 2: Measurement Update (Correction) */
     /* Compute the Kalman gain */
     float S = kalman->P[0][0] + kalman->R_measure;  /* Innovation covariance */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
     float K[2];  /* Kalman gain */
     K[0] = kalman->P[0][0] / S;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80014ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f6:	edc7 7a05 	vstr	s15, [r7, #20]
     K[1] = kalman->P[1][0] / S;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001500:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001508:	edc7 7a06 	vstr	s15, [r7, #24]
     
     /* Update estimate with measurement */
     float y = newAngle - kalman->angle;  /* Innovation/measurement residual */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001512:	ed97 7a02 	vldr	s14, [r7, #8]
 8001516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
     kalman->angle += K[0] * y;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	ed93 7a03 	vldr	s14, [r3, #12]
 8001524:	edd7 6a05 	vldr	s13, [r7, #20]
 8001528:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edc3 7a03 	vstr	s15, [r3, #12]
     kalman->bias += K[1] * y;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001540:	edd7 6a06 	vldr	s13, [r7, #24]
 8001544:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	edc3 7a04 	vstr	s15, [r3, #16]
     
     /* Update the error covariance matrix */
     float P00_temp = kalman->P[0][0];
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	623b      	str	r3, [r7, #32]
     float P01_temp = kalman->P[0][1];
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	61fb      	str	r3, [r7, #28]
     
     kalman->P[0][0] -= K[0] * P00_temp;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	ed93 7a05 	vldr	s14, [r3, #20]
 8001568:	edd7 6a05 	vldr	s13, [r7, #20]
 800156c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	edc3 7a05 	vstr	s15, [r3, #20]
     kalman->P[0][1] -= K[0] * P01_temp;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ed93 7a06 	vldr	s14, [r3, #24]
 8001584:	edd7 6a05 	vldr	s13, [r7, #20]
 8001588:	edd7 7a07 	vldr	s15, [r7, #28]
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	edc3 7a06 	vstr	s15, [r3, #24]
     kalman->P[1][0] -= K[1] * P00_temp;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	ed93 7a07 	vldr	s14, [r3, #28]
 80015a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edc3 7a07 	vstr	s15, [r3, #28]
     kalman->P[1][1] -= K[1] * P01_temp;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80015bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80015c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80015c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	edc3 7a08 	vstr	s15, [r3, #32]
     
     return kalman->angle;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	ee07 3a90 	vmov	s15, r3
 }
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	3734      	adds	r7, #52	@ 0x34
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	621a      	str	r2, [r3, #32]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d01c      	beq.n	80017a6 <LL_TIM_OC_DisableFast+0x4a>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b04      	cmp	r3, #4
 8001770:	d017      	beq.n	80017a2 <LL_TIM_OC_DisableFast+0x46>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b10      	cmp	r3, #16
 8001776:	d012      	beq.n	800179e <LL_TIM_OC_DisableFast+0x42>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b40      	cmp	r3, #64	@ 0x40
 800177c:	d00d      	beq.n	800179a <LL_TIM_OC_DisableFast+0x3e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001784:	d007      	beq.n	8001796 <LL_TIM_OC_DisableFast+0x3a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178c:	d101      	bne.n	8001792 <LL_TIM_OC_DisableFast+0x36>
 800178e:	2305      	movs	r3, #5
 8001790:	e00a      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 8001792:	2306      	movs	r3, #6
 8001794:	e008      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_TIM_OC_DisableFast+0x4c>
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3318      	adds	r3, #24
 80017ae:	4619      	mov	r1, r3
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <LL_TIM_OC_DisableFast+0x84>)
 80017b4:	5cd3      	ldrb	r3, [r2, r3]
 80017b6:	440b      	add	r3, r1
 80017b8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <LL_TIM_OC_DisableFast+0x88>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	4619      	mov	r1, r3
 80017c6:	2304      	movs	r3, #4
 80017c8:	408b      	lsls	r3, r1
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	0800d7f0 	.word	0x0800d7f0
 80017e4:	0800d7f8 	.word	0x0800d7f8

080017e8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d01c      	beq.n	8001832 <LL_TIM_OC_EnablePreload+0x4a>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d017      	beq.n	800182e <LL_TIM_OC_EnablePreload+0x46>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d012      	beq.n	800182a <LL_TIM_OC_EnablePreload+0x42>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b40      	cmp	r3, #64	@ 0x40
 8001808:	d00d      	beq.n	8001826 <LL_TIM_OC_EnablePreload+0x3e>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001810:	d007      	beq.n	8001822 <LL_TIM_OC_EnablePreload+0x3a>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001818:	d101      	bne.n	800181e <LL_TIM_OC_EnablePreload+0x36>
 800181a:	2305      	movs	r3, #5
 800181c:	e00a      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 800181e:	2306      	movs	r3, #6
 8001820:	e008      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_TIM_OC_EnablePreload+0x4c>
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3318      	adds	r3, #24
 800183a:	4619      	mov	r1, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LL_TIM_OC_EnablePreload+0x80>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	440b      	add	r3, r1
 8001844:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4907      	ldr	r1, [pc, #28]	@ (800186c <LL_TIM_OC_EnablePreload+0x84>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	4619      	mov	r1, r3
 8001852:	2308      	movs	r3, #8
 8001854:	408b      	lsls	r3, r1
 8001856:	431a      	orrs	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	0800d7f0 	.word	0x0800d7f0
 800186c:	0800d7f8 	.word	0x0800d7f8

08001870 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001902:	b480      	push	{r7}
 8001904:	b089      	sub	sp, #36	@ 0x24
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	e853 3f00 	ldrex	r3, [r3]
 8001916:	60bb      	str	r3, [r7, #8]
   return(result);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f043 0320 	orr.w	r3, r3, #32
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	330c      	adds	r3, #12
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	61ba      	str	r2, [r7, #24]
 8001928:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800192a:	6979      	ldr	r1, [r7, #20]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	e841 2300 	strex	r3, r2, [r1]
 8001932:	613b      	str	r3, [r7, #16]
   return(result);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e7      	bne.n	800190a <LL_USART_EnableIT_RXNE+0x8>
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3724      	adds	r7, #36	@ 0x24
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001954:	4907      	ldr	r1, [pc, #28]	@ (8001974 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800195e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40023800 	.word	0x40023800

08001978 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800198e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800

080019a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4013      	ands	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40023800 	.word	0x40023800

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	@ 0x38
 80019dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019de:	f001 ff0d 	bl	80037fc <HAL_Init>

  /* USER CODE BEGIN Init */
  PID_INIT(&_pid_roll,&_roll_set,&_output_roll, &_roll_measured,
 80019e2:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <main+0x130>)
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <main+0x134>)
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <main+0x138>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	ed9f 2b40 	vldr	d2, [pc, #256]	@ 8001af0 <main+0x118>
 80019f2:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8001af8 <main+0x120>
 80019f6:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8001b00 <main+0x128>
 80019fa:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <main+0x13c>)
 80019fc:	4a46      	ldr	r2, [pc, #280]	@ (8001b18 <main+0x140>)
 80019fe:	4947      	ldr	r1, [pc, #284]	@ (8001b1c <main+0x144>)
 8001a00:	4847      	ldr	r0, [pc, #284]	@ (8001b20 <main+0x148>)
 8001a02:	f001 f9d9 	bl	8002db8 <PID_INIT>
    10, 90.0, 0.0, &_kp_roll, &_ki_roll, &_kd_roll);
  PID_INIT(&_pid_pitch,&_pitch_set,&_output_pitch, &_pitch_measured,
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <main+0x14c>)
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <main+0x150>)
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <main+0x154>)
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	ed9f 2b37 	vldr	d2, [pc, #220]	@ 8001af0 <main+0x118>
 8001a16:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8001af8 <main+0x120>
 8001a1a:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8001b00 <main+0x128>
 8001a1e:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <main+0x158>)
 8001a20:	4a44      	ldr	r2, [pc, #272]	@ (8001b34 <main+0x15c>)
 8001a22:	4945      	ldr	r1, [pc, #276]	@ (8001b38 <main+0x160>)
 8001a24:	4845      	ldr	r0, [pc, #276]	@ (8001b3c <main+0x164>)
 8001a26:	f001 f9c7 	bl	8002db8 <PID_INIT>
    10, 90.0, 0.0, &_kp_pitch, &_ki_pitch, &_kd_pitch);
  PID_INIT(&_pid_z,&_z_set,&_output_z, &_altitude,
 8001a2a:	4b45      	ldr	r3, [pc, #276]	@ (8001b40 <main+0x168>)
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <main+0x16c>)
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <main+0x170>)
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	ed9f 2b2e 	vldr	d2, [pc, #184]	@ 8001af0 <main+0x118>
 8001a3a:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8001af8 <main+0x120>
 8001a3e:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8001b00 <main+0x128>
 8001a42:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <main+0x174>)
 8001a44:	4a42      	ldr	r2, [pc, #264]	@ (8001b50 <main+0x178>)
 8001a46:	4943      	ldr	r1, [pc, #268]	@ (8001b54 <main+0x17c>)
 8001a48:	4843      	ldr	r0, [pc, #268]	@ (8001b58 <main+0x180>)
 8001a4a:	f001 f9b5 	bl	8002db8 <PID_INIT>
      10, 90.0, 0.0, &_kp_z, &_ki_z, &_kd_z);
  PID_INIT(&_pid_yaw,&_yaw_set,&_output_yaw, &_yaw_measured,
 8001a4e:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <main+0x184>)
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	4b43      	ldr	r3, [pc, #268]	@ (8001b60 <main+0x188>)
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <main+0x18c>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	ed9f 2b25 	vldr	d2, [pc, #148]	@ 8001af0 <main+0x118>
 8001a5e:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8001af8 <main+0x120>
 8001a62:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8001b00 <main+0x128>
 8001a66:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <main+0x190>)
 8001a68:	4a40      	ldr	r2, [pc, #256]	@ (8001b6c <main+0x194>)
 8001a6a:	4941      	ldr	r1, [pc, #260]	@ (8001b70 <main+0x198>)
 8001a6c:	4841      	ldr	r0, [pc, #260]	@ (8001b74 <main+0x19c>)
 8001a6e:	f001 f9a3 	bl	8002db8 <PID_INIT>
    10, 90.0, 0.0, &_kp_yaw, &_ki_yaw, &_kd_yaw);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a72:	f000 fa01 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a76:	f000 fc0b 	bl	8002290 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a7a:	f000 fa65 	bl	8001f48 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a7e:	f000 fba7 	bl	80021d0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001a82:	f000 fb15 	bl	80020b0 <MX_TIM5_Init>
  MX_I2C3_Init();
 8001a86:	f000 fa8d 	bl	8001fa4 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001a8a:	f000 fab9 	bl	8002000 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  mpu6050.hi2c = &hi2c1;
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <main+0x1a0>)
 8001a90:	4a3a      	ldr	r2, [pc, #232]	@ (8001b7c <main+0x1a4>)
 8001a92:	601a      	str	r2, [r3, #0]
  mpu6050.dev_addr = MPU6050_ADDRESS; // 0x68 (AD0 = GND)
 8001a94:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <main+0x1a0>)
 8001a96:	2268      	movs	r2, #104	@ 0x68
 8001a98:	711a      	strb	r2, [r3, #4]
  mpu6050.timeout = 100; // 100ms timeout
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <main+0x1a0>)
 8001a9c:	2264      	movs	r2, #100	@ 0x64
 8001a9e:	811a      	strh	r2, [r3, #8]
  if (MPU6050_Init(&mpu6050)) {
 8001aa0:	4835      	ldr	r0, [pc, #212]	@ (8001b78 <main+0x1a0>)
 8001aa2:	f000 ff73 	bl	800298c <MPU6050_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <main+0xe4>
	  _status |= 0x02; // Bit 1: MPU6050 OK
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <main+0x1a8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <main+0x1a8>)
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e006      	b.n	8001aca <main+0xf2>
  } else {
	  _status |= 0x20; // Bit 5: MPU6050 error
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <main+0x1a8>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <main+0x1a8>)
 8001ac8:	701a      	strb	r2, [r3, #0]
  }
  if (_status & 0x02) {
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <main+0x1a8>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80ef 	beq.w	8001cb6 <main+0x2de>
      MPU6050_RawData raw_data;
      int32_t gyro_x_sum = 0, gyro_y_sum = 0, gyro_z_sum = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
      const int samples = 200; // Thu thập 200 mẫu
 8001ae4:	23c8      	movs	r3, #200	@ 0xc8
 8001ae6:	617b      	str	r3, [r7, #20]
      for (int i = 0; i < samples; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e06a      	b.n	8001bc4 <main+0x1ec>
 8001aee:	bf00      	nop
	...
 8001afc:	40568000 	.word	0x40568000
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40240000 	.word	0x40240000
 8001b08:	20000348 	.word	0x20000348
 8001b0c:	20000340 	.word	0x20000340
 8001b10:	20000338 	.word	0x20000338
 8001b14:	200003d0 	.word	0x200003d0
 8001b18:	200003b0 	.word	0x200003b0
 8001b1c:	20000398 	.word	0x20000398
 8001b20:	200003f0 	.word	0x200003f0
 8001b24:	20000360 	.word	0x20000360
 8001b28:	20000358 	.word	0x20000358
 8001b2c:	20000350 	.word	0x20000350
 8001b30:	200003d8 	.word	0x200003d8
 8001b34:	200003b8 	.word	0x200003b8
 8001b38:	200003a0 	.word	0x200003a0
 8001b3c:	20000450 	.word	0x20000450
 8001b40:	20000378 	.word	0x20000378
 8001b44:	20000370 	.word	0x20000370
 8001b48:	20000368 	.word	0x20000368
 8001b4c:	200003e8 	.word	0x200003e8
 8001b50:	200003c8 	.word	0x200003c8
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000510 	.word	0x20000510
 8001b5c:	20000390 	.word	0x20000390
 8001b60:	20000388 	.word	0x20000388
 8001b64:	20000380 	.word	0x20000380
 8001b68:	200003e0 	.word	0x200003e0
 8001b6c:	200003c0 	.word	0x200003c0
 8001b70:	200003a8 	.word	0x200003a8
 8001b74:	200004b0 	.word	0x200004b0
 8001b78:	2000021c 	.word	0x2000021c
 8001b7c:	20000228 	.word	0x20000228
 8001b80:	20000570 	.word	0x20000570
        if (MPU6050_ReadRawData(&mpu6050, &raw_data)) {
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	489b      	ldr	r0, [pc, #620]	@ (8001df8 <main+0x420>)
 8001b8a:	f000 ffeb 	bl	8002b64 <MPU6050_ReadRawData>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d011      	beq.n	8001bb8 <main+0x1e0>
          gyro_x_sum += raw_data.gyro_x;
 8001b94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	4413      	add	r3, r2
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
          gyro_y_sum += raw_data.gyro_y;
 8001ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	4413      	add	r3, r2
 8001baa:	623b      	str	r3, [r7, #32]
          gyro_z_sum += raw_data.gyro_z;
 8001bac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	61fb      	str	r3, [r7, #28]
        }
        osDelay(10);
 8001bb8:	200a      	movs	r0, #10
 8001bba:	f005 fcdf 	bl	800757c <osDelay>
      for (int i = 0; i < samples; i++) {
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbdb      	blt.n	8001b84 <main+0x1ac>
      }
      gyro_x_bias = (float)(gyro_x_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f; // Chuyển LSB sang rad/s
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001dfc <main+0x424>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	ee17 0a90 	vmov	r0, s15
 8001be8:	f7fe fcb6 	bl	8000558 <__aeabi_f2d>
 8001bec:	a380      	add	r3, pc, #512	@ (adr r3, 8001df0 <main+0x418>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fd09 	bl	8000608 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <main+0x428>)
 8001c04:	f7fe fe2a 	bl	800085c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ffd2 	bl	8000bb8 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a7b      	ldr	r2, [pc, #492]	@ (8001e04 <main+0x42c>)
 8001c18:	6013      	str	r3, [r2, #0]
      gyro_y_bias = (float)(gyro_y_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f;
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001dfc <main+0x424>
 8001c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	f7fe fc8f 	bl	8000558 <__aeabi_f2d>
 8001c3a:	a36d      	add	r3, pc, #436	@ (adr r3, 8001df0 <main+0x418>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fce2 	bl	8000608 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <main+0x428>)
 8001c52:	f7fe fe03 	bl	800085c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffab 	bl	8000bb8 <__aeabi_d2f>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a68      	ldr	r2, [pc, #416]	@ (8001e08 <main+0x430>)
 8001c66:	6013      	str	r3, [r2, #0]
      gyro_z_bias = (float)(gyro_z_sum / samples) * (1.0f / 16.4f) * M_PI / 180.0f;
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c78:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001dfc <main+0x424>
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	ee17 0a90 	vmov	r0, s15
 8001c84:	f7fe fc68 	bl	8000558 <__aeabi_f2d>
 8001c88:	a359      	add	r3, pc, #356	@ (adr r3, 8001df0 <main+0x418>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fcbb 	bl	8000608 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b58      	ldr	r3, [pc, #352]	@ (8001e00 <main+0x428>)
 8001ca0:	f7fe fddc 	bl	800085c <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff84 	bl	8000bb8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <main+0x434>)
 8001cb4:	6013      	str	r3, [r2, #0]
  }

  LL_USART_EnableIT_RXNE(USART1);
 8001cb6:	4856      	ldr	r0, [pc, #344]	@ (8001e10 <main+0x438>)
 8001cb8:	f7ff fe23 	bl	8001902 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 8001cbc:	4855      	ldr	r0, [pc, #340]	@ (8001e14 <main+0x43c>)
 8001cbe:	f7ff fe20 	bl	8001902 <LL_USART_EnableIT_RXNE>


  LL_TIM_EnableCounter(TIM5);
 8001cc2:	4855      	ldr	r0, [pc, #340]	@ (8001e18 <main+0x440>)
 8001cc4:	f7ff fd19 	bl	80016fa <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4853      	ldr	r0, [pc, #332]	@ (8001e18 <main+0x440>)
 8001ccc:	f7ff fd35 	bl	800173a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4851      	ldr	r0, [pc, #324]	@ (8001e18 <main+0x440>)
 8001cd4:	f7ff fd31 	bl	800173a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8001cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cdc:	484e      	ldr	r0, [pc, #312]	@ (8001e18 <main+0x440>)
 8001cde:	f7ff fd2c 	bl	800173a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8001ce2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ce6:	484c      	ldr	r0, [pc, #304]	@ (8001e18 <main+0x440>)
 8001ce8:	f7ff fd27 	bl	800173a <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM2);
 8001cec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001cf0:	f7ff fd03 	bl	80016fa <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001cfa:	f7ff fd1e 	bl	800173a <LL_TIM_CC_EnableChannel>
  // ESC Calibration
  TIM2 -> CCR1 = 2000;
 8001cfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d02:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM5 -> CCR2 = 12500;
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <main+0x440>)
 8001d0a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM5 -> CCR3 = 12500;
 8001d10:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <main+0x440>)
 8001d12:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001d16:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM5 -> CCR4 = 12500;
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <main+0x440>)
 8001d1a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

//  TIM5 -> CCR1 = 200;
//  TIM5 -> CCR2 = 200;
//  TIM5 -> CCR3 = 200;
//  TIM5 -> CCR4 = 200;
  HAL_Delay(7000);
 8001d20:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001d24:	f001 fdac 	bl	8003880 <HAL_Delay>

  TIM2 -> CCR1 = 1000;
 8001d28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM5 -> CCR2 = 6250;
 8001d32:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <main+0x440>)
 8001d34:	f641 026a 	movw	r2, #6250	@ 0x186a
 8001d38:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM5 -> CCR3 = 6250;
 8001d3a:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <main+0x440>)
 8001d3c:	f641 026a 	movw	r2, #6250	@ 0x186a
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM5 -> CCR4 = 6250;
 8001d42:	4b35      	ldr	r3, [pc, #212]	@ (8001e18 <main+0x440>)
 8001d44:	f641 026a 	movw	r2, #6250	@ 0x186a
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40

//  TIM5 -> CCR1 = 100;
//  TIM5 -> CCR2 = 100;
//  TIM5 -> CCR3 = 100;
//  TIM5 -> CCR4 = 100;
  HAL_Delay(8000);
 8001d4a:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8001d4e:	f001 fd97 	bl	8003880 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d52:	f005 fb37 	bl	80073c4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of stateQueue */
  stateQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &stateQueue_attributes);
 8001d56:	4a31      	ldr	r2, [pc, #196]	@ (8001e1c <main+0x444>)
 8001d58:	2102      	movs	r1, #2
 8001d5a:	2010      	movs	r0, #16
 8001d5c:	f005 fd0f 	bl	800777e <osMessageQueueNew>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a2f      	ldr	r2, [pc, #188]	@ (8001e20 <main+0x448>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* creation of controlQueue */
  controlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &controlQueue_attributes);
 8001d66:	4a2f      	ldr	r2, [pc, #188]	@ (8001e24 <main+0x44c>)
 8001d68:	2102      	movs	r1, #2
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f005 fd07 	bl	800777e <osMessageQueueNew>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <main+0x450>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(MPU6050_ConvertedData), &sensorQueue_attributes);
 8001d76:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <main+0x454>)
 8001d78:	211c      	movs	r1, #28
 8001d7a:	2010      	movs	r0, #16
 8001d7c:	f005 fcff 	bl	800777e <osMessageQueueNew>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <main+0x458>)
 8001d84:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorTask */
  motorTaskHandle = osThreadNew(MotorTask, NULL, &motorTask_attributes);
 8001d86:	4a2b      	ldr	r2, [pc, #172]	@ (8001e34 <main+0x45c>)
 8001d88:	2100      	movs	r1, #0
 8001d8a:	482b      	ldr	r0, [pc, #172]	@ (8001e38 <main+0x460>)
 8001d8c:	f005 fb64 	bl	8007458 <osThreadNew>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <main+0x464>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* creation of pidTask */
  pidTaskHandle = osThreadNew(PidTask, NULL, &pidTask_attributes);
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <main+0x468>)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	482a      	ldr	r0, [pc, #168]	@ (8001e44 <main+0x46c>)
 8001d9c:	f005 fb5c 	bl	8007458 <osThreadNew>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a29      	ldr	r2, [pc, #164]	@ (8001e48 <main+0x470>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(SensorTask, NULL, &sensorTask_attributes);
 8001da6:	4a29      	ldr	r2, [pc, #164]	@ (8001e4c <main+0x474>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	4829      	ldr	r0, [pc, #164]	@ (8001e50 <main+0x478>)
 8001dac:	f005 fb54 	bl	8007458 <osThreadNew>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a28      	ldr	r2, [pc, #160]	@ (8001e54 <main+0x47c>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* creation of rcTask */
  rcTaskHandle = osThreadNew(RCTask, NULL, &rcTask_attributes);
 8001db6:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <main+0x480>)
 8001db8:	2100      	movs	r1, #0
 8001dba:	4828      	ldr	r0, [pc, #160]	@ (8001e5c <main+0x484>)
 8001dbc:	f005 fb4c 	bl	8007458 <osThreadNew>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <main+0x488>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* creation of stateTask05 */
  stateTask05Handle = osThreadNew(StateEstimatorTask, NULL, &stateTask05_attributes);
 8001dc6:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <main+0x48c>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4827      	ldr	r0, [pc, #156]	@ (8001e68 <main+0x490>)
 8001dcc:	f005 fb44 	bl	8007458 <osThreadNew>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a26      	ldr	r2, [pc, #152]	@ (8001e6c <main+0x494>)
 8001dd4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of runpidEvent */
  runpidEventHandle = osEventFlagsNew(&runpidEvent_attributes);
 8001dd6:	4826      	ldr	r0, [pc, #152]	@ (8001e70 <main+0x498>)
 8001dd8:	f005 fbeb 	bl	80075b2 <osEventFlagsNew>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a25      	ldr	r2, [pc, #148]	@ (8001e74 <main+0x49c>)
 8001de0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001de2:	f005 fb13 	bl	800740c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <main+0x40e>
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	54442d18 	.word	0x54442d18
 8001df4:	400921fb 	.word	0x400921fb
 8001df8:	2000021c 	.word	0x2000021c
 8001dfc:	3d79c190 	.word	0x3d79c190
 8001e00:	40668000 	.word	0x40668000
 8001e04:	20000578 	.word	0x20000578
 8001e08:	2000057c 	.word	0x2000057c
 8001e0c:	20000580 	.word	0x20000580
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40004400 	.word	0x40004400
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	0800d8b4 	.word	0x0800d8b4
 8001e20:	2000032c 	.word	0x2000032c
 8001e24:	0800d8cc 	.word	0x0800d8cc
 8001e28:	20000330 	.word	0x20000330
 8001e2c:	0800d8f4 	.word	0x0800d8f4
 8001e30:	20000574 	.word	0x20000574
 8001e34:	0800d800 	.word	0x0800d800
 8001e38:	08002315 	.word	0x08002315
 8001e3c:	20000318 	.word	0x20000318
 8001e40:	0800d824 	.word	0x0800d824
 8001e44:	08002325 	.word	0x08002325
 8001e48:	2000031c 	.word	0x2000031c
 8001e4c:	0800d848 	.word	0x0800d848
 8001e50:	080024c1 	.word	0x080024c1
 8001e54:	20000320 	.word	0x20000320
 8001e58:	0800d86c 	.word	0x0800d86c
 8001e5c:	08002531 	.word	0x08002531
 8001e60:	20000324 	.word	0x20000324
 8001e64:	0800d890 	.word	0x0800d890
 8001e68:	080025d9 	.word	0x080025d9
 8001e6c:	20000328 	.word	0x20000328
 8001e70:	0800d8e4 	.word	0x0800d8e4
 8001e74:	20000334 	.word	0x20000334

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	@ 0x50
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2230      	movs	r2, #48	@ 0x30
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f009 fb4b 	bl	800b522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <SystemClock_Config+0xc8>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <SystemClock_Config+0xc8>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <SystemClock_Config+0xc8>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001ec2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <SystemClock_Config+0xcc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001edc:	2310      	movs	r3, #16
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 ff87 	bl	8004e10 <HAL_RCC_OscConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f08:	f000 fd3a 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001f14:	23a0      	movs	r3, #160	@ 0xa0
 8001f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 f9e9 	bl	8005300 <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f34:	f000 fd24 	bl	8002980 <Error_Handler>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3750      	adds	r7, #80	@ 0x50
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000

08001f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <MX_I2C1_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <MX_I2C1_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f86:	f001 ff1f 	bl	8003dc8 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fcf6 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000228 	.word	0x20000228
 8001f9c:	40005400 	.word	0x40005400
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001faa:	4a13      	ldr	r2, [pc, #76]	@ (8001ff8 <MX_I2C3_Init+0x54>)
 8001fac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fb0:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <MX_I2C3_Init+0x58>)
 8001fb2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fc6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <MX_I2C3_Init+0x50>)
 8001fe2:	f001 fef1 	bl	8003dc8 <HAL_I2C_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fec:	f000 fcc8 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000027c 	.word	0x2000027c
 8001ff8:	40005c00 	.word	0x40005c00
 8001ffc:	000186a0 	.word	0x000186a0

08002000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002022:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <MX_TIM2_Init+0xac>)
 800202c:	2207      	movs	r2, #7
 800202e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002036:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002038:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800203c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002044:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800204a:	4818      	ldr	r0, [pc, #96]	@ (80020ac <MX_TIM2_Init+0xac>)
 800204c:	f003 fc26 	bl	800589c <HAL_TIM_PWM_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002056:	f000 fc93 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	4619      	mov	r1, r3
 8002068:	4810      	ldr	r0, [pc, #64]	@ (80020ac <MX_TIM2_Init+0xac>)
 800206a:	f004 f859 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002074:	f000 fc84 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002078:	2360      	movs	r3, #96	@ 0x60
 800207a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	4619      	mov	r1, r3
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <MX_TIM2_Init+0xac>)
 8002090:	f003 fd44 	bl	8005b1c <HAL_TIM_PWM_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800209a:	f000 fc71 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800209e:	4803      	ldr	r0, [pc, #12]	@ (80020ac <MX_TIM2_Init+0xac>)
 80020a0:	f001 f920 	bl	80032e4 <HAL_TIM_MspPostInit>

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	@ 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002d0 	.word	0x200002d0

080020b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b094      	sub	sp, #80	@ 0x50
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	2220      	movs	r2, #32
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f009 fa27 	bl	800b522 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80020e4:	2008      	movs	r0, #8
 80020e6:	f7ff fc47 	bl	8001978 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020ee:	2300      	movs	r3, #0
 80020f0:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 24999;
 80020f2:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 80020f6:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80020fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002100:	4619      	mov	r1, r3
 8002102:	4831      	ldr	r0, [pc, #196]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002104:	f004 fc06 	bl	8006914 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8002108:	482f      	ldr	r0, [pc, #188]	@ (80021c8 <MX_TIM5_Init+0x118>)
 800210a:	f7ff fb06 	bl	800171a <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800210e:	2110      	movs	r1, #16
 8002110:	482d      	ldr	r0, [pc, #180]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002112:	f7ff fb69 	bl	80017e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	@ 0x60
 8002118:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	461a      	mov	r2, r3
 8002130:	2110      	movs	r1, #16
 8002132:	4825      	ldr	r0, [pc, #148]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002134:	f004 fc68 	bl	8006a08 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8002138:	2110      	movs	r1, #16
 800213a:	4823      	ldr	r0, [pc, #140]	@ (80021c8 <MX_TIM5_Init+0x118>)
 800213c:	f7ff fb0e 	bl	800175c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8002140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002144:	4820      	ldr	r0, [pc, #128]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002146:	f7ff fb4f 	bl	80017e8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002154:	481c      	ldr	r0, [pc, #112]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002156:	f004 fc57 	bl	8006a08 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800215a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800215e:	481a      	ldr	r0, [pc, #104]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002160:	f7ff fafc 	bl	800175c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8002164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002168:	4817      	ldr	r0, [pc, #92]	@ (80021c8 <MX_TIM5_Init+0x118>)
 800216a:	f7ff fb3d 	bl	80017e8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	461a      	mov	r2, r3
 8002174:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002178:	4813      	ldr	r0, [pc, #76]	@ (80021c8 <MX_TIM5_Init+0x118>)
 800217a:	f004 fc45 	bl	8006a08 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800217e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002182:	4811      	ldr	r0, [pc, #68]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002184:	f7ff faea 	bl	800175c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002188:	2100      	movs	r1, #0
 800218a:	480f      	ldr	r0, [pc, #60]	@ (80021c8 <MX_TIM5_Init+0x118>)
 800218c:	f7ff fb70 	bl	8001870 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002190:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <MX_TIM5_Init+0x118>)
 8002192:	f7ff fb80 	bl	8001896 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff fbd6 	bl	8001948 <LL_AHB1_GRP1_EnableClock>
  /**TIM5 GPIO Configuration
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800219c:	230e      	movs	r3, #14
 800219e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021a0:	2302      	movs	r3, #2
 80021a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_TIM5_Init+0x11c>)
 80021ba:	f004 f97e 	bl	80064ba <LL_GPIO_Init>

}
 80021be:	bf00      	nop
 80021c0:	3750      	adds	r7, #80	@ 0x50
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40020000 	.word	0x40020000

080021d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	@ 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80021fa:	2010      	movs	r0, #16
 80021fc:	f7ff fbd4 	bl	80019a8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fba1 	bl	8001948 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002206:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800220a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800220c:	2302      	movs	r3, #2
 800220e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800221c:	2307      	movs	r3, #7
 800221e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4818      	ldr	r0, [pc, #96]	@ (8002288 <MX_USART1_UART_Init+0xb8>)
 8002226:	f004 f948 	bl	80064ba <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800222a:	f7ff f9dd 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800222e:	4603      	mov	r3, r0
 8002230:	2200      	movs	r2, #0
 8002232:	2105      	movs	r1, #5
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fa2d 	bl	8001694 <NVIC_EncodePriority>
 800223a:	4603      	mov	r3, r0
 800223c:	4619      	mov	r1, r3
 800223e:	2025      	movs	r0, #37	@ 0x25
 8002240:	f7ff f9fe 	bl	8001640 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002244:	2025      	movs	r0, #37	@ 0x25
 8002246:	f7ff f9dd 	bl	8001604 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800224a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800224e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800225c:	230c      	movs	r3, #12
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	@ (800228c <MX_USART1_UART_Init+0xbc>)
 8002270:	f005 f800 	bl	8007274 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002274:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_USART1_UART_Init+0xbc>)
 8002276:	f7ff fb2e 	bl	80018d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800227a:	4804      	ldr	r0, [pc, #16]	@ (800228c <MX_USART1_UART_Init+0xbc>)
 800227c:	f7ff fb1b 	bl	80018b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	3738      	adds	r7, #56	@ 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40020000 	.word	0x40020000
 800228c:	40011000 	.word	0x40011000

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <MX_GPIO_Init+0x7c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2160      	movs	r1, #96	@ 0x60
 80022e2:	480b      	ldr	r0, [pc, #44]	@ (8002310 <MX_GPIO_Init+0x80>)
 80022e4:	f001 fd56 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022e8:	2360      	movs	r3, #96	@ 0x60
 80022ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	4804      	ldr	r0, [pc, #16]	@ (8002310 <MX_GPIO_Init+0x80>)
 8002300:	f001 fbc4 	bl	8003a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002304:	bf00      	nop
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <MotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MotorTask */
void MotorTask(void *argument)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 800231c:	200a      	movs	r0, #10
 800231e:	f005 f92d 	bl	800757c <osDelay>
 8002322:	e7fb      	b.n	800231c <MotorTask+0x8>

08002324 <PidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PidTask */
void PidTask(void *argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PidTask */
  uint32_t flags;
  /* Infinite loop */
  for(;;)
  {
	flags = osEventFlagsWait(runpidEventHandle, FLAGS_PID, osFlagsWaitAny, osWaitForever);
 800232c:	4b5b      	ldr	r3, [pc, #364]	@ (800249c <PidTask+0x178>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	f04f 33ff 	mov.w	r3, #4294967295
 8002334:	2200      	movs	r2, #0
 8002336:	2101      	movs	r1, #1
 8002338:	f005 f9bc 	bl	80076b4 <osEventFlagsWait>
 800233c:	6178      	str	r0, [r7, #20]
	if(flags & FLAGS_PID){
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <PidTask+0x8>
		PID_CONTROLLER(&_pid_roll);
 8002348:	4855      	ldr	r0, [pc, #340]	@ (80024a0 <PidTask+0x17c>)
 800234a:	f000 fdbf 	bl	8002ecc <PID_CONTROLLER>
		PID_CONTROLLER(&_pid_pitch);
 800234e:	4855      	ldr	r0, [pc, #340]	@ (80024a4 <PidTask+0x180>)
 8002350:	f000 fdbc 	bl	8002ecc <PID_CONTROLLER>
		PID_CONTROLLER(&_pid_yaw);
 8002354:	4854      	ldr	r0, [pc, #336]	@ (80024a8 <PidTask+0x184>)
 8002356:	f000 fdb9 	bl	8002ecc <PID_CONTROLLER>
		PID_CONTROLLER(&_pid_z);
 800235a:	4854      	ldr	r0, [pc, #336]	@ (80024ac <PidTask+0x188>)
 800235c:	f000 fdb6 	bl	8002ecc <PID_CONTROLLER>
		int16_t throttle_1 = (int16_t)(_output_z - _output_roll + _output_pitch + _output_yaw);
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <PidTask+0x18c>)
 8002362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002366:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <PidTask+0x190>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fd ff94 	bl	8000298 <__aeabi_dsub>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <PidTask+0x194>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fd ff8d 	bl	800029c <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	4b4c      	ldr	r3, [pc, #304]	@ (80024bc <PidTask+0x198>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fd ff84 	bl	800029c <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fbe4 	bl	8000b68 <__aeabi_d2iz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	827b      	strh	r3, [r7, #18]
		int16_t throttle_2 = (int16_t)(_output_z + _output_roll - _output_pitch + _output_yaw);
 80023a4:	4b42      	ldr	r3, [pc, #264]	@ (80024b0 <PidTask+0x18c>)
 80023a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023aa:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <PidTask+0x190>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fd ff74 	bl	800029c <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <PidTask+0x194>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fd ff69 	bl	8000298 <__aeabi_dsub>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <PidTask+0x198>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd ff62 	bl	800029c <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fbc2 	bl	8000b68 <__aeabi_d2iz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	823b      	strh	r3, [r7, #16]
		int16_t throttle_3 = (int16_t)(_output_z + _output_roll + _output_pitch - _output_yaw);
 80023e8:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <PidTask+0x18c>)
 80023ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <PidTask+0x190>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fd ff52 	bl	800029c <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <PidTask+0x194>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fd ff49 	bl	800029c <__adddf3>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <PidTask+0x198>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd ff3e 	bl	8000298 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fba0 	bl	8000b68 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	81fb      	strh	r3, [r7, #14]
		int16_t throttle_4 = (int16_t)(_output_z - _output_roll - _output_pitch - _output_yaw);
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <PidTask+0x18c>)
 800242e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <PidTask+0x190>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fd ff2e 	bl	8000298 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <PidTask+0x194>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fd ff25 	bl	8000298 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <PidTask+0x198>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fd ff1c 	bl	8000298 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fb7e 	bl	8000b68 <__aeabi_d2iz>
 800246c:	4603      	mov	r3, r0
 800246e:	81bb      	strh	r3, [r7, #12]
		do_motor1(throttle_1);
 8002470:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fe99 	bl	80011ac <do_motor1>
		do_motor2(throttle_2);
 800247a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe feb3 	bl	80011ea <do_motor2>
		do_motor3(throttle_3);
 8002484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fecd 	bl	8001228 <do_motor3>
		do_motor4(throttle_4);
 800248e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fee7 	bl	8001266 <do_motor4>
	flags = osEventFlagsWait(runpidEventHandle, FLAGS_PID, osFlagsWaitAny, osWaitForever);
 8002498:	e748      	b.n	800232c <PidTask+0x8>
 800249a:	bf00      	nop
 800249c:	20000334 	.word	0x20000334
 80024a0:	200003f0 	.word	0x200003f0
 80024a4:	20000450 	.word	0x20000450
 80024a8:	200004b0 	.word	0x200004b0
 80024ac:	20000510 	.word	0x20000510
 80024b0:	200003c8 	.word	0x200003c8
 80024b4:	200003b0 	.word	0x200003b0
 80024b8:	200003b8 	.word	0x200003b8
 80024bc:	200003c0 	.word	0x200003c0

080024c0 <SensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorTask */
void SensorTask(void *argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	@ 0x38
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorTask */
  /* Infinite loop */
  for(;;){
	if (_status & 0x02) {
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <SensorTask+0x64>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d022      	beq.n	800251a <SensorTask+0x5a>
	  MPU6050_RawData raw_data;
	  MPU6050_ConvertedData conv_data;
	  if (MPU6050_ReadRawData(&mpu6050, &raw_data)) {
 80024d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d8:	4619      	mov	r1, r3
 80024da:	4813      	ldr	r0, [pc, #76]	@ (8002528 <SensorTask+0x68>)
 80024dc:	f000 fb42 	bl	8002b64 <MPU6050_ReadRawData>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d019      	beq.n	800251a <SensorTask+0x5a>
		  MPU6050_ConvertData(&mpu6050, &raw_data, &conv_data);
 80024e6:	f107 020c 	add.w	r2, r7, #12
 80024ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ee:	4619      	mov	r1, r3
 80024f0:	480d      	ldr	r0, [pc, #52]	@ (8002528 <SensorTask+0x68>)
 80024f2:	f000 fba3 	bl	8002c3c <MPU6050_ConvertData>
	//	          accel_y = conv_data.accel_y ;
	//	          accel_z = conv_data.accel_z ;
	//	          gyro_x = conv_data.gyro_x * (M_PI / 180.0f) - gyro_x_bias; //rad/s
	//	          gyro_y = conv_data.gyro_y * (M_PI / 180.0f) - gyro_y_bias;
	//	          gyro_z = conv_data.gyro_z * (M_PI / 180.0f) - gyro_z_bias;
		  if (osMessageQueuePut(sensorQueueHandle, &conv_data, 0, 0) != osOK) {
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <SensorTask+0x6c>)
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	f107 010c 	add.w	r1, r7, #12
 80024fe:	2300      	movs	r3, #0
 8002500:	2200      	movs	r2, #0
 8002502:	f005 f9af 	bl	8007864 <osMessageQueuePut>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <SensorTask+0x5a>
			 _status |= 0x80; // Bit 7: Queue error
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <SensorTask+0x64>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <SensorTask+0x64>)
 8002518:	701a      	strb	r2, [r3, #0]
		  }
	  }
	}
    osDelay(10);
 800251a:	200a      	movs	r0, #10
 800251c:	f005 f82e 	bl	800757c <osDelay>
	if (_status & 0x02) {
 8002520:	e7d2      	b.n	80024c8 <SensorTask+0x8>
 8002522:	bf00      	nop
 8002524:	20000570 	.word	0x20000570
 8002528:	2000021c 	.word	0x2000021c
 800252c:	20000574 	.word	0x20000574

08002530 <RCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RCTask */
void RCTask(void *argument)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RCTask */
  /* Infinite loop */
  for(;;)
  {
      if(ibus_rx_cplt_flag == 1){
 8002538:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <RCTask+0x90>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d12c      	bne.n	800259a <RCTask+0x6a>
          ibus_rx_cplt_flag = 0;
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <RCTask+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]

          if(ibus_check_CS(&ibus_rx_buf[0], 32) == 1)
 8002546:	2120      	movs	r1, #32
 8002548:	481e      	ldr	r0, [pc, #120]	@ (80025c4 <RCTask+0x94>)
 800254a:	f7fe fcfd 	bl	8000f48 <ibus_check_CS>
 800254e:	4603      	mov	r3, r0
 8002550:	2b01      	cmp	r3, #1
 8002552:	d11d      	bne.n	8002590 <RCTask+0x60>
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8002554:	2201      	movs	r2, #1
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	481b      	ldr	r0, [pc, #108]	@ (80025c8 <RCTask+0x98>)
 800255a:	f001 fc1b 	bl	8003d94 <HAL_GPIO_WritePin>
              HAL_Delay(100);
 800255e:	2064      	movs	r0, #100	@ 0x64
 8002560:	f001 f98e 	bl	8003880 <HAL_Delay>
            //	  				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
              ibus_message(&ibus_rx_buf[0], &ibus);
 8002564:	4919      	ldr	r1, [pc, #100]	@ (80025cc <RCTask+0x9c>)
 8002566:	4817      	ldr	r0, [pc, #92]	@ (80025c4 <RCTask+0x94>)
 8002568:	f7fe fd23 	bl	8000fb2 <ibus_message>

              if(ibus_active_failsafe(&ibus) == 1)
 800256c:	4817      	ldr	r0, [pc, #92]	@ (80025cc <RCTask+0x9c>)
 800256e:	f7fe fdae 	bl	80010ce <ibus_active_failsafe>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <RCTask+0x54>
              {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002578:	2201      	movs	r2, #1
 800257a:	2120      	movs	r1, #32
 800257c:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <RCTask+0x98>)
 800257e:	f001 fc09 	bl	8003d94 <HAL_GPIO_WritePin>
 8002582:	e00a      	b.n	800259a <RCTask+0x6a>
                //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
              }
              else
              {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2120      	movs	r1, #32
 8002588:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <RCTask+0x98>)
 800258a:	f001 fc03 	bl	8003d94 <HAL_GPIO_WritePin>
 800258e:	e004      	b.n	800259a <RCTask+0x6a>
                //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
              }
          }
          else
          {
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2140      	movs	r1, #64	@ 0x40
 8002594:	480c      	ldr	r0, [pc, #48]	@ (80025c8 <RCTask+0x98>)
 8002596:	f001 fbfd 	bl	8003d94 <HAL_GPIO_WritePin>
          }
      }
      _z_set = map_ibus_to_altitude(ibus.left_horizontal);
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <RCTask+0x9c>)
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fda6 	bl	80010f0 <map_ibus_to_altitude>
 80025a4:	ee10 3a10 	vmov	r3, s0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffd5 	bl	8000558 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <RCTask+0xa0>)
 80025b4:	e9c1 2300 	strd	r2, r3, [r1]
  	  // TIM2 -> CCR1 = 1000 + (ibus.left_horizontal - 1000 + 15);
  	  // TIM5 -> CCR2 = 6250 + (ibus.left_horizontal - 1000) * 6.25;
  	  // TIM5 -> CCR3 = 6250 + (ibus.left_horizontal - 1000) * 6.25;
  	  // TIM5 -> CCR4 = 6250 + (ibus.left_horizontal - 1000) * 6.25;
    osDelay(30);
 80025b8:	201e      	movs	r0, #30
 80025ba:	f004 ffdf 	bl	800757c <osDelay>
      if(ibus_rx_cplt_flag == 1){
 80025be:	e7bb      	b.n	8002538 <RCTask+0x8>
 80025c0:	20000008 	.word	0x20000008
 80025c4:	200005d8 	.word	0x200005d8
 80025c8:	40020000 	.word	0x40020000
 80025cc:	20000204 	.word	0x20000204
 80025d0:	20000000 	.word	0x20000000
 80025d4:	00000000 	.word	0x00000000

080025d8 <StateEstimatorTask>:
*/
float pitch;
float roll;
/* USER CODE END Header_StateEstimatorTask */
void StateEstimatorTask(void *argument)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	ed2d 8b02 	vpush	{d8}
 80025de:	b09e      	sub	sp, #120	@ 0x78
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StateEstimatorTask */
  MPU6050_ConvertedData conv_data;
  Kalman_t kf;
  Kalman_Init(&kf);
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fed1 	bl	8001390 <Kalman_Init>
  float dt = 0.01f;
 80025ee:	4bc8      	ldr	r3, [pc, #800]	@ (8002910 <StateEstimatorTask+0x338>)
 80025f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  float yaw_state = 0.0f;  // Persistent yaw state for complementary filter
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  float yaw_gyro_bias = 0.0f;  // Estimated gyro bias for yaw axis
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	677b      	str	r3, [r7, #116]	@ 0x74

  // Adaptive filter parameters
  float yaw_cf_alpha = YAW_CF_ALPHA;  // Base complementary filter coefficient
 80025fe:	4bc5      	ldr	r3, [pc, #788]	@ (8002914 <StateEstimatorTask+0x33c>)
 8002600:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t static_duration = 0;        // Counter for detecting static periods
 8002602:	2300      	movs	r3, #0
 8002604:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Infinite loop */
   for (;;) {
       if (osMessageQueueGet(sensorQueueHandle, &conv_data, NULL, osWaitForever) == osOK) {
 8002606:	4bc4      	ldr	r3, [pc, #784]	@ (8002918 <StateEstimatorTask+0x340>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	2200      	movs	r2, #0
 8002614:	f005 f986 	bl	8007924 <osMessageQueueGet>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 816e 	bne.w	80028fc <StateEstimatorTask+0x324>
           // Compute measured angles
          roll = atan2f(conv_data.accel_y,
 8002620:	ed97 8a0e 	vldr	s16, [r7, #56]	@ 0x38
                                sqrtf(conv_data.accel_x * conv_data.accel_x +
 8002624:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002628:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800262c:	ee27 7a27 	vmul.f32	s14, s14, s15
                                       conv_data.accel_z * conv_data.accel_z));
 8002630:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002634:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002638:	ee66 7aa7 	vmul.f32	s15, s13, s15
          roll = atan2f(conv_data.accel_y,
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	f00a fee8 	bl	800d418 <sqrtf>
 8002648:	eef0 7a40 	vmov.f32	s15, s0
 800264c:	eef0 0a67 	vmov.f32	s1, s15
 8002650:	eeb0 0a48 	vmov.f32	s0, s16
 8002654:	f00a fede 	bl	800d414 <atan2f>
 8002658:	eef0 7a40 	vmov.f32	s15, s0
 800265c:	4baf      	ldr	r3, [pc, #700]	@ (800291c <StateEstimatorTask+0x344>)
 800265e:	edc3 7a00 	vstr	s15, [r3]
          pitch = atan2f(-conv_data.accel_x,
 8002662:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002666:	eeb1 8a67 	vneg.f32	s16, s15
                                sqrtf(conv_data.accel_y * conv_data.accel_y +
 800266a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800266e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002672:	ee27 7a27 	vmul.f32	s14, s14, s15
                                        conv_data.accel_z * conv_data.accel_z));
 8002676:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800267a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800267e:	ee66 7aa7 	vmul.f32	s15, s13, s15
          pitch = atan2f(-conv_data.accel_x,
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	f00a fec5 	bl	800d418 <sqrtf>
 800268e:	eef0 7a40 	vmov.f32	s15, s0
 8002692:	eef0 0a67 	vmov.f32	s1, s15
 8002696:	eeb0 0a48 	vmov.f32	s0, s16
 800269a:	f00a febb 	bl	800d414 <atan2f>
 800269e:	eef0 7a40 	vmov.f32	s15, s0
 80026a2:	4b9f      	ldr	r3, [pc, #636]	@ (8002920 <StateEstimatorTask+0x348>)
 80026a4:	edc3 7a00 	vstr	s15, [r3]
//           // Compute acceleration magnitude
//           float acc_magnitude = sqrtf(conv_data.accel_x * conv_data.accel_x +
//                                      conv_data.accel_y * conv_data.accel_y +
//                                      conv_data.accel_z * conv_data.accel_z) * 9.81f; // Convert g to m/s^2
          // Use pre-converted and bias-corrected gyro data
          float p = conv_data.gyro_x * (M_PI / 180.0f) - gyro_x_bias; // Already in rad/s
 80026a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff54 	bl	8000558 <__aeabi_f2d>
 80026b0:	a395      	add	r3, pc, #596	@ (adr r3, 8002908 <StateEstimatorTask+0x330>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fd ffa7 	bl	8000608 <__aeabi_dmul>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	461d      	mov	r5, r3
 80026c2:	4b98      	ldr	r3, [pc, #608]	@ (8002924 <StateEstimatorTask+0x34c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff46 	bl	8000558 <__aeabi_f2d>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fd fde0 	bl	8000298 <__aeabi_dsub>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe fa6a 	bl	8000bb8 <__aeabi_d2f>
 80026e4:	4603      	mov	r3, r0
 80026e6:	667b      	str	r3, [r7, #100]	@ 0x64
          float q = conv_data.gyro_y * (M_PI / 180.0f) - gyro_y_bias;
 80026e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff34 	bl	8000558 <__aeabi_f2d>
 80026f0:	a385      	add	r3, pc, #532	@ (adr r3, 8002908 <StateEstimatorTask+0x330>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd ff87 	bl	8000608 <__aeabi_dmul>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4614      	mov	r4, r2
 8002700:	461d      	mov	r5, r3
 8002702:	4b89      	ldr	r3, [pc, #548]	@ (8002928 <StateEstimatorTask+0x350>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd ff26 	bl	8000558 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4620      	mov	r0, r4
 8002712:	4629      	mov	r1, r5
 8002714:	f7fd fdc0 	bl	8000298 <__aeabi_dsub>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa4a 	bl	8000bb8 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	663b      	str	r3, [r7, #96]	@ 0x60
          float r = conv_data.gyro_z * (M_PI / 180.0f) - gyro_z_bias;
 8002728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff14 	bl	8000558 <__aeabi_f2d>
 8002730:	a375      	add	r3, pc, #468	@ (adr r3, 8002908 <StateEstimatorTask+0x330>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd ff67 	bl	8000608 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4614      	mov	r4, r2
 8002740:	461d      	mov	r5, r3
 8002742:	4b7a      	ldr	r3, [pc, #488]	@ (800292c <StateEstimatorTask+0x354>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff06 	bl	8000558 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4620      	mov	r0, r4
 8002752:	4629      	mov	r1, r5
 8002754:	f7fd fda0 	bl	8000298 <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa2a 	bl	8000bb8 <__aeabi_d2f>
 8002764:	4603      	mov	r3, r0
 8002766:	65fb      	str	r3, [r7, #92]	@ 0x5c
          //float r = conv_data.gyro_x * (M_PI / 180.0f) - gyro_x_bias;

          // Calculate overall angular rate magnitude
          float angular_rate_magnitude = sqrtf(p*p + q*q + r*r);
 8002768:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800276c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002770:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002774:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002780:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	eeb0 0a67 	vmov.f32	s0, s15
 800278c:	f00a fe44 	bl	800d418 <sqrtf>
 8002790:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

          // Detect if drone is relatively static (for bias estimation)
          if (angular_rate_magnitude < 0.05f) {  // Less than ~3 deg/sec total rotation
 8002794:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002798:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002930 <StateEstimatorTask+0x358>
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d518      	bpl.n	80027d8 <StateEstimatorTask+0x200>
            static_duration++;
 80027a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a8:	3301      	adds	r3, #1
 80027aa:	673b      	str	r3, [r7, #112]	@ 0x70
            
            // During static periods, estimate gyro bias
            if (static_duration > 100) {  // After 1 second of being static
 80027ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d90f      	bls.n	80027d2 <StateEstimatorTask+0x1fa>
                // Slowly update yaw gyro bias estimate
                yaw_gyro_bias = yaw_gyro_bias * 0.999f + r * 0.001f;
 80027b2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80027b6:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002934 <StateEstimatorTask+0x35c>
 80027ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027be:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80027c2:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002938 <StateEstimatorTask+0x360>
 80027c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
            }
            
            // When static, slightly favor more magnetometer (if available)
            // or just slow down integration to reduce drift
            yaw_cf_alpha = 0.95f;  // Lower alpha during static periods
 80027d2:	4b5a      	ldr	r3, [pc, #360]	@ (800293c <StateEstimatorTask+0x364>)
 80027d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027d6:	e003      	b.n	80027e0 <StateEstimatorTask+0x208>
          } else {
              static_duration = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	673b      	str	r3, [r7, #112]	@ 0x70
              yaw_cf_alpha = YAW_CF_ALPHA;  // Normal alpha during motion
 80027dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <StateEstimatorTask+0x33c>)
 80027de:	66bb      	str	r3, [r7, #104]	@ 0x68
          }

           // Validate inputs
           if (!isnan(roll) && !isnan(pitch) &&
 80027e0:	4b4e      	ldr	r3, [pc, #312]	@ (800291c <StateEstimatorTask+0x344>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eef4 7a67 	vcmp.f32	s15, s15
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d678      	bvs.n	80028e2 <StateEstimatorTask+0x30a>
 80027f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <StateEstimatorTask+0x348>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eef4 7a67 	vcmp.f32	s15, s15
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d670      	bvs.n	80028e2 <StateEstimatorTask+0x30a>
 8002800:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002804:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002808:	eeb4 7a67 	vcmp.f32	s14, s15
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d667      	bvs.n	80028e2 <StateEstimatorTask+0x30a>
               !isnan(p) && !isnan(q)) {
 8002812:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002816:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800281a:	eeb4 7a67 	vcmp.f32	s14, s15
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d65e      	bvs.n	80028e2 <StateEstimatorTask+0x30a>
                _roll_measured = Kalman_Update(&kf, roll , p , dt) * RAD_TO_DEG;
 8002824:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <StateEstimatorTask+0x344>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	ed97 1a1b 	vldr	s2, [r7, #108]	@ 0x6c
 8002832:	edd7 0a19 	vldr	s1, [r7, #100]	@ 0x64
 8002836:	eeb0 0a67 	vmov.f32	s0, s15
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fdda 	bl	80013f4 <Kalman_Update>
 8002840:	eef0 7a40 	vmov.f32	s15, s0
 8002844:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002940 <StateEstimatorTask+0x368>
 8002848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284c:	ee17 0a90 	vmov	r0, s15
 8002850:	f7fd fe82 	bl	8000558 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	493a      	ldr	r1, [pc, #232]	@ (8002944 <StateEstimatorTask+0x36c>)
 800285a:	e9c1 2300 	strd	r2, r3, [r1]
                _pitch_measured = Kalman_Update(&kf, pitch, q , dt) * RAD_TO_DEG;
 800285e:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <StateEstimatorTask+0x348>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	ed97 1a1b 	vldr	s2, [r7, #108]	@ 0x6c
 800286c:	edd7 0a18 	vldr	s1, [r7, #96]	@ 0x60
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fdbd 	bl	80013f4 <Kalman_Update>
 800287a:	eef0 7a40 	vmov.f32	s15, s0
 800287e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002940 <StateEstimatorTask+0x368>
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	ee17 0a90 	vmov	r0, s15
 800288a:	f7fd fe65 	bl	8000558 <__aeabi_f2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	492d      	ldr	r1, [pc, #180]	@ (8002948 <StateEstimatorTask+0x370>)
 8002894:	e9c1 2300 	strd	r2, r3, [r1]
                // while (yaw_integrated < -M_PI) yaw_integrated += 2.0f * M_PI;
                
                // _yaw_measured = yaw_integrated;

                // Without magnetometer, pass NaN to only use gyro
                float mag_yaw = NAN;  // No magnetometer in this example
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <StateEstimatorTask+0x374>)
 800289a:	657b      	str	r3, [r7, #84]	@ 0x54
                
                // Apply drift correction for yaw using complementary filter
                float corrected_yaw_rate = r - yaw_gyro_bias;  // Apply estimated bias
 800289c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80028a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
                _yaw_measured = estimate_yaw_complementary(corrected_yaw_rate, mag_yaw, 
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	4618      	mov	r0, r3
 80028b2:	ed97 1a1b 	vldr	s2, [r7, #108]	@ 0x6c
 80028b6:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 80028ba:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 80028be:	f7fe fcf3 	bl	80012a8 <estimate_yaw_complementary>
 80028c2:	eef0 7a40 	vmov.f32	s15, s0
                                                          dt, &yaw_state) * RAD_TO_DEG;
 80028c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002940 <StateEstimatorTask+0x368>
 80028ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ce:	ee17 0a90 	vmov	r0, s15
 80028d2:	f7fd fe41 	bl	8000558 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
                _yaw_measured = estimate_yaw_complementary(corrected_yaw_rate, mag_yaw, 
 80028da:	491d      	ldr	r1, [pc, #116]	@ (8002950 <StateEstimatorTask+0x378>)
 80028dc:	e9c1 2300 	strd	r2, r3, [r1]
               !isnan(p) && !isnan(q)) {
 80028e0:	e006      	b.n	80028f0 <StateEstimatorTask+0x318>
           } else {
               _status |= 0x10; // Bit 4: Invalid sensor data
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <StateEstimatorTask+0x37c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <StateEstimatorTask+0x37c>)
 80028ee:	701a      	strb	r2, [r3, #0]
           }
           osEventFlagsSet(runpidEventHandle, FLAGS_PID);
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <StateEstimatorTask+0x380>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fe9a 	bl	8007630 <osEventFlagsSet>
       }
       osDelay(10); // 100Hz
 80028fc:	200a      	movs	r0, #10
 80028fe:	f004 fe3d 	bl	800757c <osDelay>
       if (osMessageQueueGet(sensorQueueHandle, &conv_data, NULL, osWaitForever) == osOK) {
 8002902:	e680      	b.n	8002606 <StateEstimatorTask+0x2e>
 8002904:	f3af 8000 	nop.w
 8002908:	a2529d39 	.word	0xa2529d39
 800290c:	3f91df46 	.word	0x3f91df46
 8002910:	3c23d70a 	.word	0x3c23d70a
 8002914:	3f7ae148 	.word	0x3f7ae148
 8002918:	20000574 	.word	0x20000574
 800291c:	20000588 	.word	0x20000588
 8002920:	20000584 	.word	0x20000584
 8002924:	20000578 	.word	0x20000578
 8002928:	2000057c 	.word	0x2000057c
 800292c:	20000580 	.word	0x20000580
 8002930:	3d4ccccd 	.word	0x3d4ccccd
 8002934:	3f7fbe77 	.word	0x3f7fbe77
 8002938:	3a83126f 	.word	0x3a83126f
 800293c:	3f733333 	.word	0x3f733333
 8002940:	42652ee1 	.word	0x42652ee1
 8002944:	200003d0 	.word	0x200003d0
 8002948:	200003d8 	.word	0x200003d8
 800294c:	7fc00000 	.word	0x7fc00000
 8002950:	200003e0 	.word	0x200003e0
 8002954:	20000570 	.word	0x20000570
 8002958:	20000334 	.word	0x20000334

0800295c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800296e:	f000 ff67 	bl	8003840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40010000 	.word	0x40010000

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <Error_Handler+0x8>

0800298c <MPU6050_Init>:
/**
 * @brief Khởi tạo MPU6050
 * @param hmpu Cấu trúc quản lý MPU6050
 * @retval 1: Thành công, 0: Thất bại
 */
uint8_t MPU6050_Init(MPU6050_HandleTypeDef *hmpu) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af04      	add	r7, sp, #16
 8002992:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // Kiểm tra con trỏ và thông số
    if (hmpu == NULL || hmpu->hi2c == NULL) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <MPU6050_Init+0x16>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <MPU6050_Init+0x1a>
        return 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e0da      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Xác minh ID thiết bị
    if (HAL_I2C_Mem_Read(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_WHO_AM_I, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	b299      	uxth	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	891b      	ldrh	r3, [r3, #8]
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	2301      	movs	r3, #1
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	f107 030f 	add.w	r3, r7, #15
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	2275      	movs	r2, #117	@ 0x75
 80029c6:	f001 fc3d 	bl	8004244 <HAL_I2C_Mem_Read>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MPU6050_Init+0x48>
        return 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e0c3      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }
    if (data != 0x68) {
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b68      	cmp	r3, #104	@ 0x68
 80029d8:	d001      	beq.n	80029de <MPU6050_Init+0x52>
        return 0; // ID thiết bị không đúng
 80029da:	2300      	movs	r3, #0
 80029dc:	e0be      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Reset thiết bị
    data = 0x80; // DEVICE_RESET
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	b299      	uxth	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	2301      	movs	r3, #1
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	f107 030f 	add.w	r3, r7, #15
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2301      	movs	r3, #1
 8002a00:	226b      	movs	r2, #107	@ 0x6b
 8002a02:	f001 fb25 	bl	8004050 <HAL_I2C_Mem_Write>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MPU6050_Init+0x84>
        return 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e0a5      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }
    HAL_Delay(100); // Chờ reset hoàn tất
 8002a10:	2064      	movs	r0, #100	@ 0x64
 8002a12:	f000 ff35 	bl	8003880 <HAL_Delay>

    // Đánh thức thiết bị và chọn nguồn xung PLL
    data = 0x01; // CLKSEL = 1 (PLL với tham chiếu con quay trục X)
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	791b      	ldrb	r3, [r3, #4]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b299      	uxth	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	891b      	ldrh	r3, [r3, #8]
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	f107 030f 	add.w	r3, r7, #15
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	226b      	movs	r2, #107	@ 0x6b
 8002a3a:	f001 fb09 	bl	8004050 <HAL_I2C_Mem_Write>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MPU6050_Init+0xbc>
        return 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e089      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Đặt tỷ lệ mẫu 1kHz (SMPLRT_DIV = 7: 8kHz / (1 + 7))
    data = 0x07;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_SMPLRT_DIV, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	b299      	uxth	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	891b      	ldrh	r3, [r3, #8]
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f107 030f 	add.w	r3, r7, #15
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2219      	movs	r2, #25
 8002a6c:	f001 faf0 	bl	8004050 <HAL_I2C_Mem_Write>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MPU6050_Init+0xee>
        return 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e070      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Cấu hình DLPF (44Hz cho cả con quay và gia tốc)
    data = 0x03; // DLPF_CFG = 3
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_CONFIG, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	b299      	uxth	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	891b      	ldrh	r3, [r3, #8]
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	2301      	movs	r3, #1
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	f107 030f 	add.w	r3, r7, #15
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	221a      	movs	r2, #26
 8002a9e:	f001 fad7 	bl	8004050 <HAL_I2C_Mem_Write>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MPU6050_Init+0x120>
        return 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e057      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Đặt phạm vi con quay ±2000°/s
    hmpu->gyro_range = 3;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	719a      	strb	r2, [r3, #6]
    data = hmpu->gyro_range << 3; // FS_SEL = 3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_GYRO_CONFIG, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	b299      	uxth	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	891b      	ldrh	r3, [r3, #8]
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	f107 030f 	add.w	r3, r7, #15
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	221b      	movs	r2, #27
 8002adc:	f001 fab8 	bl	8004050 <HAL_I2C_Mem_Write>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MPU6050_Init+0x15e>
        return 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e038      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Đặt phạm vi gia tốc ±16g
    hmpu->accel_range = 3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	715a      	strb	r2, [r3, #5]
    data = hmpu->accel_range << 3; // AFS_SEL = 3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	795b      	ldrb	r3, [r3, #5]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_ACCEL_CONFIG, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	b299      	uxth	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	891b      	ldrh	r3, [r3, #8]
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	f107 030f 	add.w	r3, r7, #15
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	221c      	movs	r2, #28
 8002b1a:	f001 fa99 	bl	8004050 <HAL_I2C_Mem_Write>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MPU6050_Init+0x19c>
        return 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e019      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    // Tắt FIFO
    data = 0x00;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_USER_CTRL, 1, &data, 1, hmpu->timeout) != HAL_OK) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b299      	uxth	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	891b      	ldrh	r3, [r3, #8]
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 030f 	add.w	r3, r7, #15
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	226a      	movs	r2, #106	@ 0x6a
 8002b4c:	f001 fa80 	bl	8004050 <HAL_I2C_Mem_Write>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MPU6050_Init+0x1ce>
        return 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <MPU6050_Init+0x1d0>
    }

    return 1; // Thành công
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <MPU6050_ReadRawData>:
 * @brief Đọc dữ liệu thô từ MPU6050
 * @param hmpu Cấu trúc quản lý MPU6050
 * @param data Con trỏ tới dữ liệu thô
 * @retval 1: Thành công, 0: Thất bại
 */
uint8_t MPU6050_ReadRawData(MPU6050_HandleTypeDef *hmpu, MPU6050_RawData *data) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	@ 0x28
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[14];

    // Kiểm tra con trỏ
    if (hmpu == NULL || hmpu->hi2c == NULL || data == NULL) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <MPU6050_ReadRawData+0x1e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <MPU6050_ReadRawData+0x1e>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <MPU6050_ReadRawData+0x22>
        return 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e056      	b.n	8002c34 <MPU6050_ReadRawData+0xd0>
    }

    // Đọc 14 byte từ ACCEL_XOUT_H
    if (HAL_I2C_Mem_Read(hmpu->hi2c, hmpu->dev_addr << 1, MPU6050_REG_ACCEL_XOUT_H, 1, buffer, 14, hmpu->timeout) != HAL_OK) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b299      	uxth	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	891b      	ldrh	r3, [r3, #8]
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	230e      	movs	r3, #14
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	223b      	movs	r2, #59	@ 0x3b
 8002ba6:	f001 fb4d 	bl	8004244 <HAL_I2C_Mem_Read>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MPU6050_ReadRawData+0x50>
        return 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e03f      	b.n	8002c34 <MPU6050_ReadRawData+0xd0>
    }

    // Kết hợp byte cao và thấp
    data->accel_x = (int16_t)((buffer[0] << 8) | buffer[1]);
 8002bb4:	7a3b      	ldrb	r3, [r7, #8]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	7a7b      	ldrb	r3, [r7, #9]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	801a      	strh	r2, [r3, #0]
    data->accel_y = (int16_t)((buffer[2] << 8) | buffer[3]);
 8002bc6:	7abb      	ldrb	r3, [r7, #10]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	805a      	strh	r2, [r3, #2]
    data->accel_z = (int16_t)((buffer[4] << 8) | buffer[5]);
 8002bd8:	7b3b      	ldrb	r3, [r7, #12]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	7b7b      	ldrb	r3, [r7, #13]
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	809a      	strh	r2, [r3, #4]
    data->temp = (int16_t)((buffer[6] << 8) | buffer[7]);
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	80da      	strh	r2, [r3, #6]
    data->gyro_x = (int16_t)((buffer[8] << 8) | buffer[9]);
 8002bfc:	7c3b      	ldrb	r3, [r7, #16]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	7c7b      	ldrb	r3, [r7, #17]
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	811a      	strh	r2, [r3, #8]
    data->gyro_y = (int16_t)((buffer[10] << 8) | buffer[11]);
 8002c0e:	7cbb      	ldrb	r3, [r7, #18]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	815a      	strh	r2, [r3, #10]
    data->gyro_z = (int16_t)((buffer[12] << 8) | buffer[13]);
 8002c20:	7d3b      	ldrb	r3, [r7, #20]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	7d7b      	ldrb	r3, [r7, #21]
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	819a      	strh	r2, [r3, #12]

    return 1; // Thành công
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <MPU6050_ConvertData>:
 * @brief Chuyển đổi dữ liệu thô thành đơn vị vật lý
 * @param hmpu Cấu trúc quản lý MPU6050
 * @param raw_data Dữ liệu thô
 * @param conv_data Dữ liệu đã chuyển đổi
 */
void MPU6050_ConvertData(MPU6050_HandleTypeDef *hmpu, MPU6050_RawData *raw_data, MPU6050_ConvertedData *conv_data) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
    float accel_scale, gyro_scale;

    // Chọn hệ số tỷ lệ cho gia tốc
    switch (hmpu->accel_range) {
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	795b      	ldrb	r3, [r3, #5]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d81b      	bhi.n	8002c88 <MPU6050_ConvertData+0x4c>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <MPU6050_ConvertData+0x1c>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c71 	.word	0x08002c71
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c81 	.word	0x08002c81
        case 0: accel_scale = 16384.0f; break; // ±2g
 8002c68:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	e00e      	b.n	8002c8e <MPU6050_ConvertData+0x52>
        case 1: accel_scale = 8192.0f; break;  // ±4g
 8002c70:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e00a      	b.n	8002c8e <MPU6050_ConvertData+0x52>
        case 2: accel_scale = 4096.0f; break;  // ±8g
 8002c78:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e006      	b.n	8002c8e <MPU6050_ConvertData+0x52>
        case 3: accel_scale = 2048.0f; break;  // ±16g
 8002c80:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e002      	b.n	8002c8e <MPU6050_ConvertData+0x52>
        default: accel_scale = 16384.0f;
 8002c88:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8002c8c:	617b      	str	r3, [r7, #20]
    }

    // Chọn hệ số tỷ lệ cho con quay
    switch (hmpu->gyro_range) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	799b      	ldrb	r3, [r3, #6]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d816      	bhi.n	8002cc4 <MPU6050_ConvertData+0x88>
 8002c96:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <MPU6050_ConvertData+0x60>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cb3 	.word	0x08002cb3
 8002ca4:	08002cb9 	.word	0x08002cb9
 8002ca8:	08002cbf 	.word	0x08002cbf
        case 0: gyro_scale = 131.0f; break;    // ±250°/s
 8002cac:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <MPU6050_ConvertData+0x164>)
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e00a      	b.n	8002cc8 <MPU6050_ConvertData+0x8c>
        case 1: gyro_scale = 65.5f; break;     // ±500°/s
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <MPU6050_ConvertData+0x168>)
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e007      	b.n	8002cc8 <MPU6050_ConvertData+0x8c>
        case 2: gyro_scale = 32.8f; break;     // ±1000°/s
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <MPU6050_ConvertData+0x16c>)
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e004      	b.n	8002cc8 <MPU6050_ConvertData+0x8c>
        case 3: gyro_scale = 16.4f; break;     // ±2000°/s
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <MPU6050_ConvertData+0x170>)
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	e001      	b.n	8002cc8 <MPU6050_ConvertData+0x8c>
        default: gyro_scale = 131.0f;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <MPU6050_ConvertData+0x164>)
 8002cc6:	613b      	str	r3, [r7, #16]
    }

    // Chuyển đổi dữ liệu
    conv_data->accel_x = raw_data->accel_x / accel_scale;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edc3 7a00 	vstr	s15, [r3]
    conv_data->accel_y = raw_data->accel_y / accel_scale;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	edc3 7a01 	vstr	s15, [r3, #4]
    conv_data->accel_z = raw_data->accel_z / accel_scale;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edc3 7a02 	vstr	s15, [r3, #8]
    conv_data->gyro_x = raw_data->gyro_x / gyro_scale;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	edc3 7a04 	vstr	s15, [r3, #16]
    conv_data->gyro_y = raw_data->gyro_y / gyro_scale;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d46:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	edc3 7a05 	vstr	s15, [r3, #20]
    conv_data->gyro_z = raw_data->gyro_z / gyro_scale;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d62:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	edc3 7a06 	vstr	s15, [r3, #24]
    conv_data->temp = (raw_data->temp / 340.0f) + 36.53f; // Nhiệt độ (°C)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002db0 <MPU6050_ConvertData+0x174>
 8002d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d86:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002db4 <MPU6050_ConvertData+0x178>
 8002d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	43030000 	.word	0x43030000
 8002da4:	42830000 	.word	0x42830000
 8002da8:	42033333 	.word	0x42033333
 8002dac:	41833333 	.word	0x41833333
 8002db0:	43aa0000 	.word	0x43aa0000
 8002db4:	42121eb8 	.word	0x42121eb8

08002db8 <PID_INIT>:

#define  NULL ((void*)0)
#define ALPHA 1 // not fil

void PID_INIT(PID_PARA *pid, double *target, double *output, double *measure,
               double sample_time, double outmax, double outmin, double *kp, double *ki, double *kd) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	@ 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6278      	str	r0, [r7, #36]	@ 0x24
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	61fa      	str	r2, [r7, #28]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	ed87 0b04 	vstr	d0, [r7, #16]
 8002dca:	ed87 1b02 	vstr	d1, [r7, #8]
 8002dce:	ed87 2b00 	vstr	d2, [r7]
    if (!pid || !target || !output || !measure || !kp || !ki || !kd) {
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06c      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d069      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d066      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d060      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d05d      	beq.n	8002eb2 <PID_INIT+0xfa>
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05a      	beq.n	8002eb2 <PID_INIT+0xfa>
        return;
    }

    pid->target = target;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	601a      	str	r2, [r3, #0]
    pid->T = (sample_time > 0) ? sample_time/1000.0 : DEFAULT_SAMPLE_TIME;
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e0e:	f7fd fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <PID_INIT+0x74>
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec8 <PID_INIT+0x110>)
 8002e1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e22:	f7fd fd1b 	bl	800085c <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	e002      	b.n	8002e32 <PID_INIT+0x7a>
 8002e2c:	a324      	add	r3, pc, #144	@ (adr r3, 8002ec0 <PID_INIT+0x108>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e34:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->MaxOutput = outmax;
 8002e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->MinOutput = outmin;
 8002e42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e48:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->kp = kp;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e50:	621a      	str	r2, [r3, #32]
    pid->ki = ki;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->kd = kd;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->output = output;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	605a      	str	r2, [r3, #4]
    pid->output_last = 0.0;
 8002e64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    pid->last_error1 = 0.0;
 8002e72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    pid->last_error2 = 0.0;
 8002e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->error = 0.0;
 8002e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->measure = measure;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	651a      	str	r2, [r3, #80]	@ 0x50
    pid->last_filtered_derivative = 0.0;
 8002ea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8002eb0:	e000      	b.n	8002eb4 <PID_INIT+0xfc>
        return;
 8002eb2:	bf00      	nop
}
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	47ae147b 	.word	0x47ae147b
 8002ec4:	3f847ae1 	.word	0x3f847ae1
 8002ec8:	408f4000 	.word	0x408f4000

08002ecc <PID_CONTROLLER>:
    if (new_sample_time > 0) {
        pid->T = new_sample_time / 1000.0; // ms -> s
    }
}

void PID_CONTROLLER(PID_PARA *pid) {
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	b090      	sub	sp, #64	@ 0x40
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    if (!pid || !pid->target || !pid->kp || !pid->ki || !pid->kd || !pid->output || !pid->measure) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8118 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8113 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 810e 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8109 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8104 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80ff 	beq.w	800310c <PID_CONTROLLER+0x240>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80fa 	beq.w	800310c <PID_CONTROLLER+0x240>
        return;
    }

    pid->error = *(pid->target) - *(pid->measure);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd f9b6 	bl	8000298 <__aeabi_dsub>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    // if (ABS(pid->error) < DEFAULT_DEADBAND) {
    //     pid->error = 0;
    // }
    // PID calculations

    double kp = *(pid->kp);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double ki = *(pid->ki);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double kd = *(pid->kd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double filtered_derivative = ALPHA * (pid->error - 2 * pid->last_error1 + pid->last_error2)/ pid->T + (1-ALPHA) * pid->last_filtered_derivative;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	f7fd f997 	bl	800029c <__adddf3>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f7fd f98f 	bl	8000298 <__aeabi_dsub>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002f88:	f7fd f988 	bl	800029c <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f9a:	f7fd fc5f 	bl	800085c <__aeabi_ddiv>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4614      	mov	r4, r2
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	f7fd fb28 	bl	8000608 <__aeabi_dmul>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	f7fd f96c 	bl	800029c <__adddf3>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    pid->last_filtered_derivative = filtered_derivative;
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fd2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

    double incKp = kp * (pid->error - pid->last_error1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fe2:	f7fd f959 	bl	8000298 <__aeabi_dsub>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002fee:	f7fd fb0b 	bl	8000608 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double incKi = ki * pid->T * (pid->error + pid->last_error1) / 2.0; // Trapezoidal approximation
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003000:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003004:	f7fd fb00 	bl	8000608 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800301c:	f7fd f93e 	bl	800029c <__adddf3>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd faee 	bl	8000608 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800303c:	f7fd fc0e 	bl	800085c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double incKd = kd * filtered_derivative;
 8003048:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800304c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003050:	f7fd fada 	bl	8000608 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Update output
    *pid->output = pid->output_last + incKp + incKi + incKd;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003066:	f7fd f919 	bl	800029c <__adddf3>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003076:	f7fd f911 	bl	800029c <__adddf3>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685c      	ldr	r4, [r3, #4]
 8003086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308a:	f7fd f907 	bl	800029c <__adddf3>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	e9c4 2300 	strd	r2, r3, [r4]

    // Clamping the output
    if (*pid->output > pid->MaxOutput) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030a4:	f7fd fd40 	bl	8000b28 <__aeabi_dcmpgt>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <PID_CONTROLLER+0x1f2>
        *pid->output = pid->MaxOutput;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030b8:	e9c1 2300 	strd	r2, r3, [r1]
 80030bc:	e012      	b.n	80030e4 <PID_CONTROLLER+0x218>
    } else if (*pid->output < pid->MinOutput) {
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030cc:	f7fd fd0e 	bl	8000aec <__aeabi_dcmplt>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <PID_CONTROLLER+0x218>
        *pid->output = pid->MinOutput;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030e0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // Update error history
    pid->last_error2 = pid->last_error1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    pid->last_error1 = pid->error;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    pid->output_last = *pid->output;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 800310a:	e000      	b.n	800310e <PID_CONTROLLER+0x242>
        return;
 800310c:	bf00      	nop
}
 800310e:	3740      	adds	r7, #64	@ 0x40
 8003110:	46bd      	mov	sp, r7
 8003112:	bdb0      	pop	{r4, r5, r7, pc}

08003114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_MspInit+0x54>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <HAL_MspInit+0x54>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_MspInit+0x54>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_MspInit+0x54>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_MspInit+0x54>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	@ 0x40
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_MspInit+0x54>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	210f      	movs	r1, #15
 8003156:	f06f 0001 	mvn.w	r0, #1
 800315a:	f000 fc6d 	bl	8003a38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	@ 0x30
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a41      	ldr	r2, [pc, #260]	@ (8003290 <HAL_I2C_MspInit+0x124>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12c      	bne.n	80031e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a3f      	ldr	r2, [pc, #252]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031aa:	23c0      	movs	r3, #192	@ 0xc0
 80031ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ae:	2312      	movs	r3, #18
 80031b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ba:	2304      	movs	r3, #4
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4619      	mov	r1, r3
 80031c4:	4834      	ldr	r0, [pc, #208]	@ (8003298 <HAL_I2C_MspInit+0x12c>)
 80031c6:	f000 fc61 	bl	8003a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031da:	4b2e      	ldr	r3, [pc, #184]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80031e6:	e04f      	b.n	8003288 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_I2C_MspInit+0x130>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d14a      	bne.n	8003288 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	4a26      	ldr	r2, [pc, #152]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	@ 0x30
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
 800321e:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800322a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003230:	2312      	movs	r3, #18
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800323c:	2304      	movs	r3, #4
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4816      	ldr	r0, [pc, #88]	@ (80032a0 <HAL_I2C_MspInit+0x134>)
 8003248:	f000 fc20 	bl	8003a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800324c:	2310      	movs	r3, #16
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003250:	2312      	movs	r3, #18
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800325c:	2309      	movs	r3, #9
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	4619      	mov	r1, r3
 8003266:	480c      	ldr	r0, [pc, #48]	@ (8003298 <HAL_I2C_MspInit+0x12c>)
 8003268:	f000 fc10 	bl	8003a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	4a07      	ldr	r2, [pc, #28]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 8003276:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800327a:	6413      	str	r3, [r2, #64]	@ 0x40
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_I2C_MspInit+0x128>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
}
 8003288:	bf00      	nop
 800328a:	3730      	adds	r7, #48	@ 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40005400 	.word	0x40005400
 8003294:	40023800 	.word	0x40023800
 8003298:	40020400 	.word	0x40020400
 800329c:	40005c00 	.word	0x40005c00
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d10d      	bne.n	80032d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003304:	d11e      	bne.n	8003344 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_TIM_MspPostInit+0x68>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <HAL_TIM_MspPostInit+0x68>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_TIM_MspPostInit+0x68>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003334:	2301      	movs	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	4619      	mov	r1, r3
 800333e:	4804      	ldr	r0, [pc, #16]	@ (8003350 <HAL_TIM_MspPostInit+0x6c>)
 8003340:	f000 fba4 	bl	8003a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003344:	bf00      	nop
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000

08003354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	@ 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <HAL_InitTick+0xd0>)
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_InitTick+0xd0>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6453      	str	r3, [r2, #68]	@ 0x44
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_InitTick+0xd0>)
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003380:	f107 020c 	add.w	r2, r7, #12
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f002 f998 	bl	80056c0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003390:	f002 f982 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 8003394:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	4a23      	ldr	r2, [pc, #140]	@ (8003428 <HAL_InitTick+0xd4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9b      	lsrs	r3, r3, #18
 80033a0:	3b01      	subs	r3, #1
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_InitTick+0xd8>)
 80033a6:	4a22      	ldr	r2, [pc, #136]	@ (8003430 <HAL_InitTick+0xdc>)
 80033a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_InitTick+0xd8>)
 80033ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033b2:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_InitTick+0xd8>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <HAL_InitTick+0xd8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_InitTick+0xd8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_InitTick+0xd8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80033ca:	4818      	ldr	r0, [pc, #96]	@ (800342c <HAL_InitTick+0xd8>)
 80033cc:	f002 f9aa 	bl	8005724 <HAL_TIM_Base_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80033d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11b      	bne.n	8003416 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033de:	4813      	ldr	r0, [pc, #76]	@ (800342c <HAL_InitTick+0xd8>)
 80033e0:	f002 f9fa 	bl	80057d8 <HAL_TIM_Base_Start_IT>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80033ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033f2:	2019      	movs	r0, #25
 80033f4:	f000 fb3c 	bl	8003a70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d808      	bhi.n	8003410 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80033fe:	2200      	movs	r2, #0
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	2019      	movs	r0, #25
 8003404:	f000 fb18 	bl	8003a38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003408:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <HAL_InitTick+0xe0>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e002      	b.n	8003416 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	@ 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	431bde83 	.word	0x431bde83
 800342c:	2000058c 	.word	0x2000058c
 8003430:	40010000 	.word	0x40010000
 8003434:	20000010 	.word	0x20000010

08003438 <LL_USART_IsActiveFlag_ORE>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_USART_IsActiveFlag_RXNE>:
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_USART_ClearFlag_ORE>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003492:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	b2db      	uxtb	r3, r3
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034c6:	bf00      	nop
 80034c8:	e7fd      	b.n	80034c6 <NMI_Handler+0x4>

080034ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <HardFault_Handler+0x4>

080034d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d6:	bf00      	nop
 80034d8:	e7fd      	b.n	80034d6 <MemManage_Handler+0x4>

080034da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034de:	bf00      	nop
 80034e0:	e7fd      	b.n	80034de <BusFault_Handler+0x4>

080034e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e6:	bf00      	nop
 80034e8:	e7fd      	b.n	80034e6 <UsageFault_Handler+0x4>

080034ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034fe:	f002 fa1c 	bl	800593a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000058c 	.word	0x2000058c

0800350c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	static uint8_t cnt = 0;

  //  Overrun (ORE)
  if (LL_USART_IsActiveFlag_ORE(USART1)) {
 8003512:	4833      	ldr	r0, [pc, #204]	@ (80035e0 <USART1_IRQHandler+0xd4>)
 8003514:	f7ff ff90 	bl	8003438 <LL_USART_IsActiveFlag_ORE>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <USART1_IRQHandler+0x24>
    LL_USART_ClearFlag_ORE(USART1);
 800351e:	4830      	ldr	r0, [pc, #192]	@ (80035e0 <USART1_IRQHandler+0xd4>)
 8003520:	f7ff ffb0 	bl	8003484 <LL_USART_ClearFlag_ORE>
    volatile uint8_t dummy = LL_USART_ReceiveData8(USART1);
 8003524:	482e      	ldr	r0, [pc, #184]	@ (80035e0 <USART1_IRQHandler+0xd4>)
 8003526:	f7ff ffbf 	bl	80034a8 <LL_USART_ReceiveData8>
 800352a:	4603      	mov	r3, r0
 800352c:	71bb      	strb	r3, [r7, #6]
    return;
 800352e:	e054      	b.n	80035da <USART1_IRQHandler+0xce>
  }


  if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8003530:	482b      	ldr	r0, [pc, #172]	@ (80035e0 <USART1_IRQHandler+0xd4>)
 8003532:	f7ff ff94 	bl	800345e <LL_USART_IsActiveFlag_RXNE>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d04e      	beq.n	80035da <USART1_IRQHandler+0xce>
    uint8_t data = LL_USART_ReceiveData8(USART1);
 800353c:	4828      	ldr	r0, [pc, #160]	@ (80035e0 <USART1_IRQHandler+0xd4>)
 800353e:	f7ff ffb3 	bl	80034a8 <LL_USART_ReceiveData8>
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
    usart1_rx_data = data;
 8003546:	4a27      	ldr	r2, [pc, #156]	@ (80035e4 <USART1_IRQHandler+0xd8>)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	7013      	strb	r3, [r2, #0]
    usart1_rx_flag = 1;
 800354c:	4b26      	ldr	r3, [pc, #152]	@ (80035e8 <USART1_IRQHandler+0xdc>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]

    switch (cnt) {
 8003552:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <USART1_IRQHandler+0xe0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b1f      	cmp	r3, #31
 8003558:	d026      	beq.n	80035a8 <USART1_IRQHandler+0x9c>
 800355a:	2b1f      	cmp	r3, #31
 800355c:	dc31      	bgt.n	80035c2 <USART1_IRQHandler+0xb6>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <USART1_IRQHandler+0x5c>
 8003562:	2b01      	cmp	r3, #1
 8003564:	d00e      	beq.n	8003584 <USART1_IRQHandler+0x78>
 8003566:	e02c      	b.n	80035c2 <USART1_IRQHandler+0xb6>
      case 0:
        if (data == 0x20) {
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b20      	cmp	r3, #32
 800356c:	d134      	bne.n	80035d8 <USART1_IRQHandler+0xcc>
          ibus_rx_buf[cnt++] = data;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <USART1_IRQHandler+0xe0>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	b2d1      	uxtb	r1, r2
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <USART1_IRQHandler+0xe0>)
 8003578:	7011      	strb	r1, [r2, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <USART1_IRQHandler+0xe4>)
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	5453      	strb	r3, [r2, r1]
        }
        break;
 8003582:	e029      	b.n	80035d8 <USART1_IRQHandler+0xcc>
      case 1:
        if (data == 0x40) {
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d10a      	bne.n	80035a0 <USART1_IRQHandler+0x94>
          ibus_rx_buf[cnt++] = data;
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <USART1_IRQHandler+0xe0>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	b2d1      	uxtb	r1, r2
 8003592:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <USART1_IRQHandler+0xe0>)
 8003594:	7011      	strb	r1, [r2, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <USART1_IRQHandler+0xe4>)
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	5453      	strb	r3, [r2, r1]
        } else {
          cnt = 0;
        }
        break;
 800359e:	e01c      	b.n	80035da <USART1_IRQHandler+0xce>
          cnt = 0;
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <USART1_IRQHandler+0xe0>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
        break;
 80035a6:	e018      	b.n	80035da <USART1_IRQHandler+0xce>
      case 31:
        ibus_rx_buf[cnt] = data;
 80035a8:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <USART1_IRQHandler+0xe0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4619      	mov	r1, r3
 80035ae:	4a10      	ldr	r2, [pc, #64]	@ (80035f0 <USART1_IRQHandler+0xe4>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	5453      	strb	r3, [r2, r1]
        cnt = 0;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <USART1_IRQHandler+0xe0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
        ibus_rx_cplt_flag = 1;  // Báo hiệu nhận đủ 32 byte
 80035ba:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <USART1_IRQHandler+0xe8>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
        break;
 80035c0:	e00b      	b.n	80035da <USART1_IRQHandler+0xce>
      default:
        ibus_rx_buf[cnt++] = data;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <USART1_IRQHandler+0xe0>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	b2d1      	uxtb	r1, r2
 80035ca:	4a08      	ldr	r2, [pc, #32]	@ (80035ec <USART1_IRQHandler+0xe0>)
 80035cc:	7011      	strb	r1, [r2, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <USART1_IRQHandler+0xe4>)
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	5453      	strb	r3, [r2, r1]
        break;
 80035d6:	e000      	b.n	80035da <USART1_IRQHandler+0xce>
        break;
 80035d8:	bf00      	nop
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40011000 	.word	0x40011000
 80035e4:	200005d4 	.word	0x200005d4
 80035e8:	200005d5 	.word	0x200005d5
 80035ec:	200005f8 	.word	0x200005f8
 80035f0:	200005d8 	.word	0x200005d8
 80035f4:	20000008 	.word	0x20000008

080035f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_kill>:

int _kill(int pid, int sig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003612:	f008 f82f 	bl	800b674 <__errno>
 8003616:	4603      	mov	r3, r0
 8003618:	2216      	movs	r2, #22
 800361a:	601a      	str	r2, [r3, #0]
  return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <_exit>:

void _exit (int status)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffe7 	bl	8003608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <_exit+0x12>

0800363e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e00a      	b.n	8003666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003650:	f3af 8000 	nop.w
 8003654:	4601      	mov	r1, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	b2ca      	uxtb	r2, r1
 800365e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	dbf0      	blt.n	8003650 <_read+0x12>
  }

  return len;
 800366e:	687b      	ldr	r3, [r7, #4]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e009      	b.n	800369e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	60ba      	str	r2, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	dbf1      	blt.n	800368a <_write+0x12>
  }
  return len;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_close>:

int _close(int file)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036d8:	605a      	str	r2, [r3, #4]
  return 0;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_isatty>:

int _isatty(int file)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <_sbrk+0x5c>)
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <_sbrk+0x60>)
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800372c:	4b13      	ldr	r3, [pc, #76]	@ (800377c <_sbrk+0x64>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <_sbrk+0x64>)
 8003736:	4a12      	ldr	r2, [pc, #72]	@ (8003780 <_sbrk+0x68>)
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <_sbrk+0x64>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003748:	f007 ff94 	bl	800b674 <__errno>
 800374c:	4603      	mov	r3, r0
 800374e:	220c      	movs	r2, #12
 8003750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	e009      	b.n	800376c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003758:	4b08      	ldr	r3, [pc, #32]	@ (800377c <_sbrk+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800375e:	4b07      	ldr	r3, [pc, #28]	@ (800377c <_sbrk+0x64>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	4a05      	ldr	r2, [pc, #20]	@ (800377c <_sbrk+0x64>)
 8003768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20020000 	.word	0x20020000
 8003778:	00000400 	.word	0x00000400
 800377c:	200005fc 	.word	0x200005fc
 8003780:	20005138 	.word	0x20005138

08003784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <SystemInit+0x20>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <SystemInit+0x20>)
 8003790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ac:	f7ff ffea 	bl	8003784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037b0:	480c      	ldr	r0, [pc, #48]	@ (80037e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037b2:	490d      	ldr	r1, [pc, #52]	@ (80037e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c8:	4c0a      	ldr	r4, [pc, #40]	@ (80037f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037d6:	f007 ff53 	bl	800b680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037da:	f7fe f8fd 	bl	80019d8 <main>
  bx  lr    
 80037de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80037ec:	0800dce0 	.word	0x0800dce0
  ldr r2, =_sbss
 80037f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80037f4:	20005138 	.word	0x20005138

080037f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC_IRQHandler>
	...

080037fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0d      	ldr	r2, [pc, #52]	@ (800383c <HAL_Init+0x40>)
 8003806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800380a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <HAL_Init+0x40>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <HAL_Init+0x40>)
 8003812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <HAL_Init+0x40>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a07      	ldr	r2, [pc, #28]	@ (800383c <HAL_Init+0x40>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003824:	2003      	movs	r0, #3
 8003826:	f000 f8fc 	bl	8003a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382a:	200f      	movs	r0, #15
 800382c:	f7ff fd92 	bl	8003354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003830:	f7ff fc70 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000014 	.word	0x20000014
 8003864:	20000600 	.word	0x20000600

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000600 	.word	0x20000600

08003880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d005      	beq.n	80038a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_Delay+0x44>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038a6:	bf00      	nop
 80038a8:	f7ff ffde 	bl	8003868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f7      	bhi.n	80038a8 <HAL_Delay+0x28>
  {
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000014 	.word	0x20000014

080038c8 <__NVIC_SetPriorityGrouping>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	@ (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	@ 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff4c 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4a:	f7ff ff61 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f7ff ffb1 	bl	80039bc <NVIC_EncodePriority>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff80 	bl	8003968 <__NVIC_SetPriority>
}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff54 	bl	800392c <__NVIC_EnableIRQ>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b089      	sub	sp, #36	@ 0x24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e159      	b.n	8003d5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	f040 8148 	bne.w	8003d56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d005      	beq.n	8003ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d130      	bne.n	8003b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 0201 	and.w	r2, r3, #1
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d017      	beq.n	8003b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	2203      	movs	r2, #3
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d123      	bne.n	8003bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	08da      	lsrs	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3208      	adds	r2, #8
 8003b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	220f      	movs	r2, #15
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	08da      	lsrs	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3208      	adds	r2, #8
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0203 	and.w	r2, r3, #3
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a2 	beq.w	8003d56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b57      	ldr	r3, [pc, #348]	@ (8003d74 <HAL_GPIO_Init+0x2e8>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	4a56      	ldr	r2, [pc, #344]	@ (8003d74 <HAL_GPIO_Init+0x2e8>)
 8003c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c22:	4b54      	ldr	r3, [pc, #336]	@ (8003d74 <HAL_GPIO_Init+0x2e8>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c2e:	4a52      	ldr	r2, [pc, #328]	@ (8003d78 <HAL_GPIO_Init+0x2ec>)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	3302      	adds	r3, #2
 8003c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	220f      	movs	r2, #15
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a49      	ldr	r2, [pc, #292]	@ (8003d7c <HAL_GPIO_Init+0x2f0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d019      	beq.n	8003c8e <HAL_GPIO_Init+0x202>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a48      	ldr	r2, [pc, #288]	@ (8003d80 <HAL_GPIO_Init+0x2f4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_GPIO_Init+0x1fe>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a47      	ldr	r2, [pc, #284]	@ (8003d84 <HAL_GPIO_Init+0x2f8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a46      	ldr	r2, [pc, #280]	@ (8003d88 <HAL_GPIO_Init+0x2fc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <HAL_GPIO_Init+0x1f6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a45      	ldr	r2, [pc, #276]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_GPIO_Init+0x1f2>
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x204>
 8003c7e:	2307      	movs	r3, #7
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x204>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x204>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x204>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x204>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	@ (8003d78 <HAL_GPIO_Init+0x2ec>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b38      	ldr	r3, [pc, #224]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d02:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d26:	4a1a      	ldr	r2, [pc, #104]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d50:	4a0f      	ldr	r2, [pc, #60]	@ (8003d90 <HAL_GPIO_Init+0x304>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f aea2 	bls.w	8003aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	@ 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40013c00 	.word	0x40013c00

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e12b      	b.n	8004032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff f9bc 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f001 fc20 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4a81      	ldr	r2, [pc, #516]	@ (800403c <HAL_I2C_Init+0x274>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d807      	bhi.n	8003e4c <HAL_I2C_Init+0x84>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a80      	ldr	r2, [pc, #512]	@ (8004040 <HAL_I2C_Init+0x278>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e006      	b.n	8003e5a <HAL_I2C_Init+0x92>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a7d      	ldr	r2, [pc, #500]	@ (8004044 <HAL_I2C_Init+0x27c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0e7      	b.n	8004032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a78      	ldr	r2, [pc, #480]	@ (8004048 <HAL_I2C_Init+0x280>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0c9b      	lsrs	r3, r3, #18
 8003e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a6a      	ldr	r2, [pc, #424]	@ (800403c <HAL_I2C_Init+0x274>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d802      	bhi.n	8003e9c <HAL_I2C_Init+0xd4>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	e009      	b.n	8003eb0 <HAL_I2C_Init+0xe8>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4a69      	ldr	r2, [pc, #420]	@ (800404c <HAL_I2C_Init+0x284>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ec2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	495c      	ldr	r1, [pc, #368]	@ (800403c <HAL_I2C_Init+0x274>)
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d819      	bhi.n	8003f04 <HAL_I2C_Init+0x13c>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e59      	subs	r1, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_I2C_Init+0x138>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1e59      	subs	r1, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	e051      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e04f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <HAL_I2C_Init+0x168>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e012      	b.n	8003f56 <HAL_I2C_Init+0x18e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e58      	subs	r0, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	0099      	lsls	r1, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Init+0x196>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10e      	bne.n	8003f84 <HAL_I2C_Init+0x1bc>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e58      	subs	r0, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	440b      	add	r3, r1
 8003f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f82:	e00f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e58      	subs	r0, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	0099      	lsls	r1, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	6809      	ldr	r1, [r1, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6911      	ldr	r1, [r2, #16]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	000186a0 	.word	0x000186a0
 8004040:	001e847f 	.word	0x001e847f
 8004044:	003d08ff 	.word	0x003d08ff
 8004048:	431bde83 	.word	0x431bde83
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800406a:	f7ff fbfd 	bl	8003868 <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	f040 80d9 	bne.w	8004230 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2319      	movs	r3, #25
 8004084:	2201      	movs	r2, #1
 8004086:	496d      	ldr	r1, [pc, #436]	@ (800423c <HAL_I2C_Mem_Write+0x1ec>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fc8b 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	e0cc      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2C_Mem_Write+0x56>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0c5      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d007      	beq.n	80040cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2221      	movs	r2, #33	@ 0x21
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	@ 0x40
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a4d      	ldr	r2, [pc, #308]	@ (8004240 <HAL_I2C_Mem_Write+0x1f0>)
 800410c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410e:	88f8      	ldrh	r0, [r7, #6]
 8004110:	893a      	ldrh	r2, [r7, #8]
 8004112:	8979      	ldrh	r1, [r7, #10]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4603      	mov	r3, r0
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fac2 	bl	80046a8 <I2C_RequestMemoryWrite>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d052      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e081      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fd50 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2b04      	cmp	r3, #4
 8004144:	d107      	bne.n	8004156 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06b      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d11b      	bne.n	80041d0 <HAL_I2C_Mem_Write+0x180>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d017      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1aa      	bne.n	800412e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fd43 	bl	8004c68 <I2C_WaitOnBTFFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d107      	bne.n	8004200 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e016      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	00100002 	.word	0x00100002
 8004240:	ffff0000 	.word	0xffff0000

08004244 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	@ 0x30
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7ff fb03 	bl	8003868 <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	f040 8214 	bne.w	800469a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2319      	movs	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	497b      	ldr	r1, [pc, #492]	@ (8004468 <HAL_I2C_Mem_Read+0x224>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fb91 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	e207      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Read+0x56>
 8004296:	2302      	movs	r3, #2
 8004298:	e200      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d007      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2222      	movs	r2, #34	@ 0x22
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	@ 0x40
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80042f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a5b      	ldr	r2, [pc, #364]	@ (800446c <HAL_I2C_Mem_Read+0x228>)
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004302:	88f8      	ldrh	r0, [r7, #6]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa5e 	bl	80047d4 <I2C_RequestMemoryRead>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1bc      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e190      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	2b01      	cmp	r3, #1
 8004358:	d11b      	bne.n	8004392 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e170      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004396:	2b02      	cmp	r3, #2
 8004398:	d11b      	bne.n	80043d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	e150      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043e8:	e144      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	f200 80f1 	bhi.w	80045d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d123      	bne.n	8004444 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fc79 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e145      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004442:	e117      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	2b02      	cmp	r3, #2
 800444a:	d14e      	bne.n	80044ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	2200      	movs	r2, #0
 8004454:	4906      	ldr	r1, [pc, #24]	@ (8004470 <HAL_I2C_Mem_Read+0x22c>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 faa4 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e11a      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
 8004466:	bf00      	nop
 8004468:	00100002 	.word	0x00100002
 800446c:	ffff0000 	.word	0xffff0000
 8004470:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044e8:	e0c4      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	2200      	movs	r2, #0
 80044f2:	496c      	ldr	r1, [pc, #432]	@ (80046a4 <HAL_I2C_Mem_Read+0x460>)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fa55 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0cb      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	2200      	movs	r2, #0
 800454e:	4955      	ldr	r1, [pc, #340]	@ (80046a4 <HAL_I2C_Mem_Read+0x460>)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fa27 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e09d      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045d4:	e04e      	b.n	8004674 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fb8c 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e058      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d124      	bne.n	8004674 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	2b03      	cmp	r3, #3
 8004630:	d107      	bne.n	8004642 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004640:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	f47f aeb6 	bne.w	80043ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3728      	adds	r7, #40	@ 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00010004 	.word	0x00010004

080046a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	817b      	strh	r3, [r7, #10]
 80046ba:	460b      	mov	r3, r1
 80046bc:	813b      	strh	r3, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2200      	movs	r2, #0
 80046da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f960 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f8:	d103      	bne.n	8004702 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004700:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e05f      	b.n	80047c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	492d      	ldr	r1, [pc, #180]	@ (80047d0 <I2C_RequestMemoryWrite+0x128>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f9bb 	bl	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04c      	b.n	80047c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004744:	6a39      	ldr	r1, [r7, #32]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fa46 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	2b04      	cmp	r3, #4
 8004758:	d107      	bne.n	800476a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e02b      	b.n	80047c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	e021      	b.n	80047c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b29b      	uxth	r3, r3
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004790:	6a39      	ldr	r1, [r7, #32]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa20 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d107      	bne.n	80047b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e005      	b.n	80047c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ba:	893b      	ldrh	r3, [r7, #8]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	00010002 	.word	0x00010002

080047d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	460b      	mov	r3, r1
 80047e8:	813b      	strh	r3, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800480c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	2200      	movs	r2, #0
 8004816:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8c2 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004834:	d103      	bne.n	800483e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0aa      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004842:	897b      	ldrh	r3, [r7, #10]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	4952      	ldr	r1, [pc, #328]	@ (80049a0 <I2C_RequestMemoryRead+0x1cc>)
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f91d 	bl	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e097      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004880:	6a39      	ldr	r1, [r7, #32]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f9a8 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	2b04      	cmp	r3, #4
 8004894:	d107      	bne.n	80048a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e076      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b0:	893b      	ldrh	r3, [r7, #8]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]
 80048ba:	e021      	b.n	8004900 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048cc:	6a39      	ldr	r1, [r7, #32]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f982 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d107      	bne.n	80048f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e050      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048f6:	893b      	ldrh	r3, [r7, #8]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004902:	6a39      	ldr	r1, [r7, #32]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f967 	bl	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	2b04      	cmp	r3, #4
 8004916:	d107      	bne.n	8004928 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004926:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e035      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2200      	movs	r2, #0
 8004944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f82b 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d103      	bne.n	800496c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e013      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004970:	897b      	ldrh	r3, [r7, #10]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	4906      	ldr	r1, [pc, #24]	@ (80049a0 <I2C_RequestMemoryRead+0x1cc>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f886 	bl	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	00010002 	.word	0x00010002

080049a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b4:	e048      	b.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d044      	beq.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe ff53 	bl	8003868 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d139      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10d      	bne.n	80049fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	e00c      	b.n	8004a14 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d116      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e023      	b.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10d      	bne.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	e00c      	b.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d093      	beq.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aa6:	e071      	b.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab6:	d123      	bne.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e067      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d041      	beq.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fe feae 	bl	8003868 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d136      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10c      	bne.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e00b      	b.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	43da      	mvns	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e021      	b.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10c      	bne.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e00b      	b.n	8004bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f af6d 	bne.w	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be4:	e034      	b.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8e3 	bl	8004db2 <I2C_IsAcknowledgeFailed>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e034      	b.n	8004c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d028      	beq.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fe fe33 	bl	8003868 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11d      	bne.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b80      	cmp	r3, #128	@ 0x80
 8004c20:	d016      	beq.n	8004c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d1c3      	bne.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c74:	e034      	b.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f89b 	bl	8004db2 <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e034      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d028      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe fdeb 	bl	8003868 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11d      	bne.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d016      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e007      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d1c3      	bne.n	8004c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d04:	e049      	b.n	8004d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d119      	bne.n	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0210 	mvn.w	r2, #16
 8004d1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e030      	b.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fe fd8e 	bl	8003868 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11d      	bne.n	8004d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	d016      	beq.n	8004d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e007      	b.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d1ae      	bne.n	8004d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc8:	d11b      	bne.n	8004e02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e267      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d075      	beq.n	8004f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e2e:	4b88      	ldr	r3, [pc, #544]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d00c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4b85      	ldr	r3, [pc, #532]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b82      	ldr	r3, [pc, #520]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4b7e      	ldr	r3, [pc, #504]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05b      	beq.n	8004f18 <HAL_RCC_OscConfig+0x108>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d157      	bne.n	8004f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e242      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x74>
 8004e76:	4b76      	ldr	r3, [pc, #472]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a75      	ldr	r2, [pc, #468]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x98>
 8004e8e:	4b70      	ldr	r3, [pc, #448]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6f      	ldr	r2, [pc, #444]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004ea8:	4b69      	ldr	r3, [pc, #420]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a68      	ldr	r2, [pc, #416]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b66      	ldr	r3, [pc, #408]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a65      	ldr	r2, [pc, #404]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fcce 	bl	8003868 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fe fcca 	bl	8003868 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	@ 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e207      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xc0>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fcba 	bl	8003868 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fe fcb6 	bl	8003868 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	@ 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1f3      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b51      	ldr	r3, [pc, #324]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xe8>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d063      	beq.n	8004fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f26:	4b4a      	ldr	r3, [pc, #296]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b47      	ldr	r3, [pc, #284]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	4b41      	ldr	r3, [pc, #260]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e1c7      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f62:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4937      	ldr	r1, [pc, #220]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	e03a      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f80:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <HAL_RCC_OscConfig+0x244>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fe fc6f 	bl	8003868 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fe fc6b 	bl	8003868 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1a8      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4925      	ldr	r1, [pc, #148]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e015      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <HAL_RCC_OscConfig+0x244>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe fc4e 	bl	8003868 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fe fc4a 	bl	8003868 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e187      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d036      	beq.n	8005068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b15      	ldr	r3, [pc, #84]	@ (8005058 <HAL_RCC_OscConfig+0x248>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fe fc2e 	bl	8003868 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fe fc2a 	bl	8003868 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e167      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8005024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x200>
 800502e:	e01b      	b.n	8005068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x248>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fe fc17 	bl	8003868 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	e00e      	b.n	800505c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503e:	f7fe fc13 	bl	8003868 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d907      	bls.n	800505c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e150      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
 8005050:	40023800 	.word	0x40023800
 8005054:	42470000 	.word	0x42470000
 8005058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	4b88      	ldr	r3, [pc, #544]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800505e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ea      	bne.n	800503e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8097 	beq.w	80051a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507a:	4b81      	ldr	r3, [pc, #516]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	4b7d      	ldr	r3, [pc, #500]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	4a7c      	ldr	r2, [pc, #496]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6413      	str	r3, [r2, #64]	@ 0x40
 8005096:	4b7a      	ldr	r3, [pc, #488]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b77      	ldr	r3, [pc, #476]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b2:	4b74      	ldr	r3, [pc, #464]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a73      	ldr	r2, [pc, #460]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fe fbd3 	bl	8003868 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fe fbcf 	bl	8003868 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e10c      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x2ea>
 80050ec:	4b64      	ldr	r3, [pc, #400]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	4a63      	ldr	r2, [pc, #396]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f8:	e01c      	b.n	8005134 <HAL_RCC_OscConfig+0x324>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x30c>
 8005102:	4b5f      	ldr	r3, [pc, #380]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005106:	4a5e      	ldr	r2, [pc, #376]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	6713      	str	r3, [r2, #112]	@ 0x70
 800510e:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	4a5b      	ldr	r2, [pc, #364]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6713      	str	r3, [r2, #112]	@ 0x70
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0x324>
 800511c:	4b58      	ldr	r3, [pc, #352]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	4a57      	ldr	r2, [pc, #348]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	@ 0x70
 8005128:	4b55      	ldr	r3, [pc, #340]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	4a54      	ldr	r2, [pc, #336]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800512e:	f023 0304 	bic.w	r3, r3, #4
 8005132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fe fb94 	bl	8003868 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005142:	e00a      	b.n	800515a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f7fe fb90 	bl	8003868 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e0cb      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515a:	4b49      	ldr	r3, [pc, #292]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0ee      	beq.n	8005144 <HAL_RCC_OscConfig+0x334>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005168:	f7fe fb7e 	bl	8003868 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fe fb7a 	bl	8003868 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0b5      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005186:	4b3e      	ldr	r3, [pc, #248]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ee      	bne.n	8005170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	4a38      	ldr	r2, [pc, #224]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a1 	beq.w	80052f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ae:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d05c      	beq.n	8005274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d141      	bne.n	8005246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	4b31      	ldr	r3, [pc, #196]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fe fb4e 	bl	8003868 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fe fb4a 	bl	8003868 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e087      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	4b27      	ldr	r3, [pc, #156]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	491b      	ldr	r1, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005218:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fe fb23 	bl	8003868 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fe fb1f 	bl	8003868 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e05c      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005238:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x416>
 8005244:	e054      	b.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fe fb0c 	bl	8003868 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fe fb08 	bl	8003868 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e045      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x444>
 8005272:	e03d      	b.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e038      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
 8005280:	40023800 	.word	0x40023800
 8005284:	40007000 	.word	0x40007000
 8005288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x4ec>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d028      	beq.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d121      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d11a      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d111      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	3b01      	subs	r3, #1
 80052d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0cc      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b68      	ldr	r3, [pc, #416]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90c      	bls.n	800533c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b65      	ldr	r3, [pc, #404]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b63      	ldr	r3, [pc, #396]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0b8      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005354:	4b59      	ldr	r3, [pc, #356]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800535e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800536c:	4b53      	ldr	r3, [pc, #332]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a52      	ldr	r2, [pc, #328]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b50      	ldr	r3, [pc, #320]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	494d      	ldr	r1, [pc, #308]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d044      	beq.n	8005420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b47      	ldr	r3, [pc, #284]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d119      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e07f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b3f      	ldr	r3, [pc, #252]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ce:	4b3b      	ldr	r3, [pc, #236]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e067      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 0203 	bic.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4934      	ldr	r1, [pc, #208]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f0:	f7fe fa3a 	bl	8003868 <HAL_GetTick>
 80053f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	e00a      	b.n	800540e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f8:	f7fe fa36 	bl	8003868 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e04f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 020c 	and.w	r2, r3, #12
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d1eb      	bne.n	80053f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005420:	4b25      	ldr	r3, [pc, #148]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20c      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b20      	ldr	r3, [pc, #128]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e032      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005454:	4b19      	ldr	r3, [pc, #100]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4916      	ldr	r1, [pc, #88]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005472:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	490e      	ldr	r1, [pc, #56]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005486:	f000 f821 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 800548a:	4602      	mov	r2, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	490a      	ldr	r1, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054a2:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd ff54 	bl	8003354 <HAL_InitTick>

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00
 80054bc:	40023800 	.word	0x40023800
 80054c0:	0800d90c 	.word	0x0800d90c
 80054c4:	2000000c 	.word	0x2000000c
 80054c8:	20000010 	.word	0x20000010

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d0:	b090      	sub	sp, #64	@ 0x40
 80054d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e4:	4b59      	ldr	r3, [pc, #356]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d00d      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x40>
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	f200 80a1 	bhi.w	8005638 <HAL_RCC_GetSysClockFreq+0x16c>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x34>
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_GetSysClockFreq+0x3a>
 80054fe:	e09b      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b53      	ldr	r3, [pc, #332]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x184>)
 8005502:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005504:	e09b      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005506:	4b53      	ldr	r3, [pc, #332]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x188>)
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800550a:	e098      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800550c:	4b4f      	ldr	r3, [pc, #316]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005514:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005516:	4b4d      	ldr	r3, [pc, #308]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d028      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005522:	4b4a      	ldr	r3, [pc, #296]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	2200      	movs	r2, #0
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	627a      	str	r2, [r7, #36]	@ 0x24
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005534:	2100      	movs	r1, #0
 8005536:	4b47      	ldr	r3, [pc, #284]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x188>)
 8005538:	fb03 f201 	mul.w	r2, r3, r1
 800553c:	2300      	movs	r3, #0
 800553e:	fb00 f303 	mul.w	r3, r0, r3
 8005542:	4413      	add	r3, r2
 8005544:	4a43      	ldr	r2, [pc, #268]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x188>)
 8005546:	fba0 1202 	umull	r1, r2, r0, r2
 800554a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800554c:	460a      	mov	r2, r1
 800554e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005552:	4413      	add	r3, r2
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005558:	2200      	movs	r2, #0
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	61fa      	str	r2, [r7, #28]
 800555e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005562:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005566:	f7fb fb77 	bl	8000c58 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4613      	mov	r3, r2
 8005570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005572:	e053      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005574:	4b35      	ldr	r3, [pc, #212]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	099b      	lsrs	r3, r3, #6
 800557a:	2200      	movs	r2, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	617a      	str	r2, [r7, #20]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005586:	f04f 0b00 	mov.w	fp, #0
 800558a:	4652      	mov	r2, sl
 800558c:	465b      	mov	r3, fp
 800558e:	f04f 0000 	mov.w	r0, #0
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	0159      	lsls	r1, r3, #5
 8005598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800559c:	0150      	lsls	r0, r2, #5
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	ebb2 080a 	subs.w	r8, r2, sl
 80055a6:	eb63 090b 	sbc.w	r9, r3, fp
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055be:	ebb2 0408 	subs.w	r4, r2, r8
 80055c2:	eb63 0509 	sbc.w	r5, r3, r9
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	00eb      	lsls	r3, r5, #3
 80055d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d4:	00e2      	lsls	r2, r4, #3
 80055d6:	4614      	mov	r4, r2
 80055d8:	461d      	mov	r5, r3
 80055da:	eb14 030a 	adds.w	r3, r4, sl
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	eb45 030b 	adc.w	r3, r5, fp
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f2:	4629      	mov	r1, r5
 80055f4:	028b      	lsls	r3, r1, #10
 80055f6:	4621      	mov	r1, r4
 80055f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055fc:	4621      	mov	r1, r4
 80055fe:	028a      	lsls	r2, r1, #10
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	2200      	movs	r2, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	60fa      	str	r2, [r7, #12]
 800560c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005610:	f7fb fb22 	bl	8000c58 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800561c:	4b0b      	ldr	r3, [pc, #44]	@ (800564c <HAL_RCC_GetSysClockFreq+0x180>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	3301      	adds	r3, #1
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800562c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005636:	e002      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x184>)
 800563a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800563c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005640:	4618      	mov	r0, r3
 8005642:	3740      	adds	r7, #64	@ 0x40
 8005644:	46bd      	mov	sp, r7
 8005646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400
 8005654:	017d7840 	.word	0x017d7840

08005658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_RCC_GetHCLKFreq+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	2000000c 	.word	0x2000000c

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005674:	f7ff fff0 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0a9b      	lsrs	r3, r3, #10
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	@ (8005694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	0800d91c 	.word	0x0800d91c

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800569c:	f7ff ffdc 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0b5b      	lsrs	r3, r3, #13
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4903      	ldr	r1, [pc, #12]	@ (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40023800 	.word	0x40023800
 80056bc:	0800d91c 	.word	0x0800d91c

080056c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	220f      	movs	r2, #15
 80056ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056d0:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_RCC_GetClockConfig+0x5c>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0203 	and.w	r2, r3, #3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056dc:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_RCC_GetClockConfig+0x5c>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056e8:	4b0c      	ldr	r3, [pc, #48]	@ (800571c <HAL_RCC_GetClockConfig+0x5c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056f4:	4b09      	ldr	r3, [pc, #36]	@ (800571c <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <HAL_RCC_GetClockConfig+0x60>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0207 	and.w	r2, r3, #7
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	40023c00 	.word	0x40023c00

08005724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e041      	b.n	80057ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f839 	bl	80057c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 fac4 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e044      	b.n	800587a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1e      	ldr	r2, [pc, #120]	@ (8005888 <HAL_TIM_Base_Start_IT+0xb0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x6c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d013      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x6c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1a      	ldr	r2, [pc, #104]	@ (800588c <HAL_TIM_Base_Start_IT+0xb4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x6c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <HAL_TIM_Base_Start_IT+0xb8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x6c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <HAL_TIM_Base_Start_IT+0xbc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x6c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a16      	ldr	r2, [pc, #88]	@ (8005898 <HAL_TIM_Base_Start_IT+0xc0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d111      	bne.n	8005868 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b06      	cmp	r3, #6
 8005854:	d010      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	e007      	b.n	8005878 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40010000 	.word	0x40010000
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40014000 	.word	0x40014000

0800589c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e041      	b.n	8005932 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd fcee 	bl	80032a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f000 fa08 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01b      	beq.n	800599e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0202 	mvn.w	r2, #2
 800596e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f995 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 800598a:	e005      	b.n	8005998 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f987 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f998 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0204 	mvn.w	r2, #4
 80059ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f96f 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 80059d6:	e005      	b.n	80059e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f961 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f972 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d020      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0208 	mvn.w	r2, #8
 8005a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f949 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005a22:	e005      	b.n	8005a30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f93b 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f94c 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d020      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01b      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0210 	mvn.w	r2, #16
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2208      	movs	r2, #8
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f923 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f915 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f926 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0201 	mvn.w	r2, #1
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7fc ff5b 	bl	800295c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fba3 	bl	8006210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8f7 	bl	8005cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0220 	mvn.w	r2, #32
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb75 	bl	80061fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e0ae      	b.n	8005c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	f200 809f 	bhi.w	8005c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b85 	.word	0x08005b85
 8005b54:	08005c89 	.word	0x08005c89
 8005b58:	08005c89 	.word	0x08005c89
 8005b5c:	08005c89 	.word	0x08005c89
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005c89 	.word	0x08005c89
 8005b68:	08005c89 	.word	0x08005c89
 8005b6c:	08005c89 	.word	0x08005c89
 8005b70:	08005c07 	.word	0x08005c07
 8005b74:	08005c89 	.word	0x08005c89
 8005b78:	08005c89 	.word	0x08005c89
 8005b7c:	08005c89 	.word	0x08005c89
 8005b80:	08005c47 	.word	0x08005c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f93c 	bl	8005e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	619a      	str	r2, [r3, #24]
      break;
 8005bc2:	e064      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f982 	bl	8005ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6999      	ldr	r1, [r3, #24]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	021a      	lsls	r2, r3, #8
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	619a      	str	r2, [r3, #24]
      break;
 8005c04:	e043      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f9cd 	bl	8005fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0208 	orr.w	r2, r2, #8
 8005c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0204 	bic.w	r2, r2, #4
 8005c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	61da      	str	r2, [r3, #28]
      break;
 8005c44:	e023      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fa17 	bl	8006080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69d9      	ldr	r1, [r3, #28]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	021a      	lsls	r2, r3, #8
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	61da      	str	r2, [r3, #28]
      break;
 8005c86:	e002      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a3a      	ldr	r2, [pc, #232]	@ (8005dec <TIM_Base_SetConfig+0xfc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a37      	ldr	r2, [pc, #220]	@ (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a36      	ldr	r2, [pc, #216]	@ (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x38>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a35      	ldr	r2, [pc, #212]	@ (8005df8 <TIM_Base_SetConfig+0x108>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dec <TIM_Base_SetConfig+0xfc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d017      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	@ (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	@ (8005df8 <TIM_Base_SetConfig+0x108>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a25      	ldr	r2, [pc, #148]	@ (8005dfc <TIM_Base_SetConfig+0x10c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a24      	ldr	r2, [pc, #144]	@ (8005e00 <TIM_Base_SetConfig+0x110>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0x8a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a23      	ldr	r2, [pc, #140]	@ (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0e      	ldr	r2, [pc, #56]	@ (8005dec <TIM_Base_SetConfig+0xfc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d103      	bne.n	8005dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]
  }
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f023 0201 	bic.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 0302 	bic.w	r3, r3, #2
 8005e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed0 <TIM_OC1_SetConfig+0xc8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0308 	bic.w	r3, r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a13      	ldr	r2, [pc, #76]	@ (8005ed0 <TIM_OC1_SetConfig+0xc8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d111      	bne.n	8005eaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40010000 	.word	0x40010000

08005ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f023 0210 	bic.w	r2, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0320 	bic.w	r3, r3, #32
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa8 <TIM_OC2_SetConfig+0xd4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d10d      	bne.n	8005f50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <TIM_OC2_SetConfig+0xd4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d113      	bne.n	8005f80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40010000 	.word	0x40010000

08005fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <TIM_OC3_SetConfig+0xd0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d10d      	bne.n	8006026 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <TIM_OC3_SetConfig+0xd0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d113      	bne.n	8006056 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	621a      	str	r2, [r3, #32]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40010000 	.word	0x40010000

08006080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a10      	ldr	r2, [pc, #64]	@ (800611c <TIM_OC4_SetConfig+0x9c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d109      	bne.n	80060f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	019b      	lsls	r3, r3, #6
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000

08006120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006134:	2302      	movs	r3, #2
 8006136:	e050      	b.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1c      	ldr	r2, [pc, #112]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006184:	d013      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a13      	ldr	r2, [pc, #76]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d10c      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40014000 	.word	0x40014000

080061fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006224:	b480      	push	{r7}
 8006226:	b08b      	sub	sp, #44	@ 0x2c
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	613b      	str	r3, [r7, #16]
  return result;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800624a:	2320      	movs	r3, #32
 800624c:	e003      	b.n	8006256 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	b2db      	uxtb	r3, r3
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	2103      	movs	r1, #3
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	401a      	ands	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	61fb      	str	r3, [r7, #28]
  return result;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006278:	2320      	movs	r3, #32
 800627a:	e003      	b.n	8006284 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	372c      	adds	r7, #44	@ 0x2c
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	431a      	orrs	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b08b      	sub	sp, #44	@ 0x2c
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	613b      	str	r3, [r7, #16]
  return result;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80062f4:	2320      	movs	r3, #32
 80062f6:	e003      	b.n	8006300 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	fab3 f383 	clz	r3, r3
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	2103      	movs	r1, #3
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	401a      	ands	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	fa93 f3a3 	rbit	r3, r3
 8006316:	61fb      	str	r3, [r7, #28]
  return result;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006322:	2320      	movs	r3, #32
 8006324:	e003      	b.n	800632e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	fab3 f383 	clz	r3, r3
 800632c:	b2db      	uxtb	r3, r3
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	431a      	orrs	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800633c:	bf00      	nop
 800633e:	372c      	adds	r7, #44	@ 0x2c
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006348:	b480      	push	{r7}
 800634a:	b08b      	sub	sp, #44	@ 0x2c
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	fa93 f3a3 	rbit	r3, r3
 8006362:	613b      	str	r3, [r7, #16]
  return result;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800636e:	2320      	movs	r3, #32
 8006370:	e003      	b.n	800637a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	fab3 f383 	clz	r3, r3
 8006378:	b2db      	uxtb	r3, r3
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	2103      	movs	r1, #3
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	43db      	mvns	r3, r3
 8006384:	401a      	ands	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	fa93 f3a3 	rbit	r3, r3
 8006390:	61fb      	str	r3, [r7, #28]
  return result;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800639c:	2320      	movs	r3, #32
 800639e:	e003      	b.n	80063a8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	fab3 f383 	clz	r3, r3
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	60da      	str	r2, [r3, #12]
}
 80063b6:	bf00      	nop
 80063b8:	372c      	adds	r7, #44	@ 0x2c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b08b      	sub	sp, #44	@ 0x2c
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	fa93 f3a3 	rbit	r3, r3
 80063dc:	613b      	str	r3, [r7, #16]
  return result;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80063e8:	2320      	movs	r3, #32
 80063ea:	e003      	b.n	80063f4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	210f      	movs	r1, #15
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	61fb      	str	r3, [r7, #28]
  return result;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006416:	2320      	movs	r3, #32
 8006418:	e003      	b.n	8006422 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	fab3 f383 	clz	r3, r3
 8006420:	b2db      	uxtb	r3, r3
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	fa01 f303 	lsl.w	r3, r1, r3
 800642a:	431a      	orrs	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006430:	bf00      	nop
 8006432:	372c      	adds	r7, #44	@ 0x2c
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800643c:	b480      	push	{r7}
 800643e:	b08b      	sub	sp, #44	@ 0x2c
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	fa93 f3a3 	rbit	r3, r3
 8006458:	613b      	str	r3, [r7, #16]
  return result;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006464:	2320      	movs	r3, #32
 8006466:	e003      	b.n	8006470 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	fab3 f383 	clz	r3, r3
 800646e:	b2db      	uxtb	r3, r3
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	210f      	movs	r1, #15
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	401a      	ands	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	61fb      	str	r3, [r7, #28]
  return result;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80064ae:	bf00      	nop
 80064b0:	372c      	adds	r7, #44	@ 0x2c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b08a      	sub	sp, #40	@ 0x28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	fa93 f3a3 	rbit	r3, r3
 80064d8:	617b      	str	r3, [r7, #20]
  return result;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <LL_GPIO_Init+0x2e>
    return 32U;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e003      	b.n	80064f0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	fab3 f383 	clz	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80064f2:	e057      	b.n	80065a4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	2101      	movs	r1, #1
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	4013      	ands	r3, r2
 8006502:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d049      	beq.n	800659e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d003      	beq.n	800651a <LL_GPIO_Init+0x60>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d10d      	bne.n	8006536 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	461a      	mov	r2, r3
 8006520:	6a39      	ldr	r1, [r7, #32]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fed3 	bl	80062ce <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	461a      	mov	r2, r3
 800652e:	6a39      	ldr	r1, [r7, #32]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff feb4 	bl	800629e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	461a      	mov	r2, r3
 800653c:	6a39      	ldr	r1, [r7, #32]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff02 	bl	8006348 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d121      	bne.n	8006590 <LL_GPIO_Init+0xd6>
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	fa93 f3a3 	rbit	r3, r3
 8006556:	60bb      	str	r3, [r7, #8]
  return result;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <LL_GPIO_Init+0xac>
    return 32U;
 8006562:	2320      	movs	r3, #32
 8006564:	e003      	b.n	800656e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	fab3 f383 	clz	r3, r3
 800656c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800656e:	2b07      	cmp	r3, #7
 8006570:	d807      	bhi.n	8006582 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	461a      	mov	r2, r3
 8006578:	6a39      	ldr	r1, [r7, #32]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff ff21 	bl	80063c2 <LL_GPIO_SetAFPin_0_7>
 8006580:	e006      	b.n	8006590 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	461a      	mov	r2, r3
 8006588:	6a39      	ldr	r1, [r7, #32]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ff56 	bl	800643c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	461a      	mov	r2, r3
 8006596:	6a39      	ldr	r1, [r7, #32]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fe43 	bl	8006224 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	3301      	adds	r3, #1
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	fa22 f303 	lsr.w	r3, r2, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1a0      	bne.n	80064f4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3728      	adds	r7, #40	@ 0x28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80065c0:	4b04      	ldr	r3, [pc, #16]	@ (80065d4 <LL_RCC_GetSysClkSource+0x18>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 030c 	and.w	r3, r3, #12
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800

080065d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800

080065f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065f8:	4b04      	ldr	r3, [pc, #16]	@ (800660c <LL_RCC_GetAPB1Prescaler+0x18>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40023800 	.word	0x40023800

08006610 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800

0800662c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006630:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <LL_RCC_PLL_GetMainSource+0x18>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40023800 	.word	0x40023800

08006648 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800664c:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <LL_RCC_PLL_GetN+0x18>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006656:	4618      	mov	r0, r3
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40023800 	.word	0x40023800

08006664 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006668:	4b04      	ldr	r3, [pc, #16]	@ (800667c <LL_RCC_PLL_GetP+0x18>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800

08006680 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006684:	4b04      	ldr	r3, [pc, #16]	@ (8006698 <LL_RCC_PLL_GetDivider+0x18>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800

0800669c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80066a4:	f000 f820 	bl	80066e8 <RCC_GetSystemClockFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f840 	bl	8006738 <RCC_GetHCLKClockFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f84e 	bl	8006764 <RCC_GetPCLK1ClockFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f85a 	bl	800678c <RCC_GetPCLK2ClockFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80066f2:	f7ff ff63 	bl	80065bc <LL_RCC_GetSysClkSource>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d00c      	beq.n	8006716 <RCC_GetSystemClockFreq+0x2e>
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d80f      	bhi.n	8006720 <RCC_GetSystemClockFreq+0x38>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <RCC_GetSystemClockFreq+0x22>
 8006704:	2b04      	cmp	r3, #4
 8006706:	d003      	beq.n	8006710 <RCC_GetSystemClockFreq+0x28>
 8006708:	e00a      	b.n	8006720 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800670a:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <RCC_GetSystemClockFreq+0x48>)
 800670c:	607b      	str	r3, [r7, #4]
      break;
 800670e:	e00a      	b.n	8006726 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006710:	4b08      	ldr	r3, [pc, #32]	@ (8006734 <RCC_GetSystemClockFreq+0x4c>)
 8006712:	607b      	str	r3, [r7, #4]
      break;
 8006714:	e007      	b.n	8006726 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006716:	2008      	movs	r0, #8
 8006718:	f000 f84c 	bl	80067b4 <RCC_PLL_GetFreqDomain_SYS>
 800671c:	6078      	str	r0, [r7, #4]
      break;
 800671e:	e002      	b.n	8006726 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006720:	4b03      	ldr	r3, [pc, #12]	@ (8006730 <RCC_GetSystemClockFreq+0x48>)
 8006722:	607b      	str	r3, [r7, #4]
      break;
 8006724:	bf00      	nop
  }

  return frequency;
 8006726:	687b      	ldr	r3, [r7, #4]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00f42400 	.word	0x00f42400
 8006734:	017d7840 	.word	0x017d7840

08006738 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006740:	f7ff ff4a 	bl	80065d8 <LL_RCC_GetAHBPrescaler>
 8006744:	4603      	mov	r3, r0
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	4a04      	ldr	r2, [pc, #16]	@ (8006760 <RCC_GetHCLKClockFreq+0x28>)
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	40d3      	lsrs	r3, r2
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	0800d90c 	.word	0x0800d90c

08006764 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800676c:	f7ff ff42 	bl	80065f4 <LL_RCC_GetAPB1Prescaler>
 8006770:	4603      	mov	r3, r0
 8006772:	0a9b      	lsrs	r3, r3, #10
 8006774:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <RCC_GetPCLK1ClockFreq+0x24>)
 8006776:	5cd3      	ldrb	r3, [r2, r3]
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	40d3      	lsrs	r3, r2
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	0800d91c 	.word	0x0800d91c

0800678c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006794:	f7ff ff3c 	bl	8006610 <LL_RCC_GetAPB2Prescaler>
 8006798:	4603      	mov	r3, r0
 800679a:	0b5b      	lsrs	r3, r3, #13
 800679c:	4a04      	ldr	r2, [pc, #16]	@ (80067b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800679e:	5cd3      	ldrb	r3, [r2, r3]
 80067a0:	461a      	mov	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	40d3      	lsrs	r3, r2
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	0800d91c 	.word	0x0800d91c

080067b4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80067c8:	f7ff ff30 	bl	800662c <LL_RCC_PLL_GetMainSource>
 80067cc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067da:	d003      	beq.n	80067e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80067dc:	e005      	b.n	80067ea <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80067de:	4b12      	ldr	r3, [pc, #72]	@ (8006828 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80067e0:	617b      	str	r3, [r7, #20]
      break;
 80067e2:	e005      	b.n	80067f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80067e4:	4b11      	ldr	r3, [pc, #68]	@ (800682c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80067e6:	617b      	str	r3, [r7, #20]
      break;
 80067e8:	e002      	b.n	80067f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80067ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80067ec:	617b      	str	r3, [r7, #20]
      break;
 80067ee:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d113      	bne.n	800681e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067f6:	f7ff ff43 	bl	8006680 <LL_RCC_PLL_GetDivider>
 80067fa:	4602      	mov	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	fbb3 f4f2 	udiv	r4, r3, r2
 8006802:	f7ff ff21 	bl	8006648 <LL_RCC_PLL_GetN>
 8006806:	4603      	mov	r3, r0
 8006808:	fb03 f404 	mul.w	r4, r3, r4
 800680c:	f7ff ff2a 	bl	8006664 <LL_RCC_PLL_GetP>
 8006810:	4603      	mov	r3, r0
 8006812:	0c1b      	lsrs	r3, r3, #16
 8006814:	3301      	adds	r3, #1
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fbb4 f3f3 	udiv	r3, r4, r3
 800681c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800681e:	693b      	ldr	r3, [r7, #16]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	00f42400 	.word	0x00f42400
 800682c:	017d7840 	.word	0x017d7840

08006830 <LL_TIM_SetPrescaler>:
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <LL_TIM_SetAutoReload>:
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <LL_TIM_SetRepetitionCounter>:
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_TIM_OC_SetCompareCH1>:
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <LL_TIM_OC_SetCompareCH2>:
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <LL_TIM_OC_SetCompareCH3>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <LL_TIM_OC_SetCompareCH4>:
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f043 0201 	orr.w	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	615a      	str	r2, [r3, #20]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a31      	ldr	r2, [pc, #196]	@ (80069ec <LL_TIM_Init+0xd8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00f      	beq.n	800694c <LL_TIM_Init+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006932:	d00b      	beq.n	800694c <LL_TIM_Init+0x38>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a2e      	ldr	r2, [pc, #184]	@ (80069f0 <LL_TIM_Init+0xdc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <LL_TIM_Init+0x38>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2d      	ldr	r2, [pc, #180]	@ (80069f4 <LL_TIM_Init+0xe0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <LL_TIM_Init+0x38>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2c      	ldr	r2, [pc, #176]	@ (80069f8 <LL_TIM_Init+0xe4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d106      	bne.n	800695a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a23      	ldr	r2, [pc, #140]	@ (80069ec <LL_TIM_Init+0xd8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d01b      	beq.n	800699a <LL_TIM_Init+0x86>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006968:	d017      	beq.n	800699a <LL_TIM_Init+0x86>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a20      	ldr	r2, [pc, #128]	@ (80069f0 <LL_TIM_Init+0xdc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <LL_TIM_Init+0x86>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1f      	ldr	r2, [pc, #124]	@ (80069f4 <LL_TIM_Init+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <LL_TIM_Init+0x86>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1e      	ldr	r2, [pc, #120]	@ (80069f8 <LL_TIM_Init+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <LL_TIM_Init+0x86>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1d      	ldr	r2, [pc, #116]	@ (80069fc <LL_TIM_Init+0xe8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <LL_TIM_Init+0x86>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a00 <LL_TIM_Init+0xec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <LL_TIM_Init+0x86>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <LL_TIM_Init+0xf0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d106      	bne.n	80069a8 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ff49 	bl	800684c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff35 	bl	8006830 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a08      	ldr	r2, [pc, #32]	@ (80069ec <LL_TIM_Init+0xd8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d105      	bne.n	80069da <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff47 	bl	8006868 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff ff8a 	bl	80068f4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800

08006a08 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1e:	d027      	beq.n	8006a70 <LL_TIM_OC_Init+0x68>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a26:	d82a      	bhi.n	8006a7e <LL_TIM_OC_Init+0x76>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2e:	d018      	beq.n	8006a62 <LL_TIM_OC_Init+0x5a>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a36:	d822      	bhi.n	8006a7e <LL_TIM_OC_Init+0x76>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d003      	beq.n	8006a46 <LL_TIM_OC_Init+0x3e>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d007      	beq.n	8006a54 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006a44:	e01b      	b.n	8006a7e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f81f 	bl	8006a8c <OC1Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]
      break;
 8006a52:	e015      	b.n	8006a80 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f87e 	bl	8006b58 <OC2Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a60:	e00e      	b.n	8006a80 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f8e1 	bl	8006c2c <OC3Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6e:	e007      	b.n	8006a80 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f944 	bl	8006d00 <OC4Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e000      	b.n	8006a80 <LL_TIM_OC_Init+0x78>
      break;
 8006a7e:	bf00      	nop
  }

  return result;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 0202 	bic.w	r2, r3, #2
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0201 	bic.w	r2, r3, #1
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <OC1Config+0xc8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d11e      	bne.n	8006b2c <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 0208 	bic.w	r2, r3, #8
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0204 	bic.w	r2, r3, #4
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fea0 	bl	8006884 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40010000 	.word	0x40010000

08006b58 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f023 0210 	bic.w	r2, r3, #16
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0220 	bic.w	r2, r3, #32
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0210 	bic.w	r2, r3, #16
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <OC2Config+0xd0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d11f      	bne.n	8006c00 <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	019b      	lsls	r3, r3, #6
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	019b      	lsls	r3, r3, #6
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff fe44 	bl	80068a0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40010000 	.word	0x40010000

08006c2c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <OC3Config+0xd0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d11f      	bne.n	8006cd2 <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	029b      	lsls	r3, r3, #10
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	015b      	lsls	r3, r3, #5
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff fde9 	bl	80068bc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40010000 	.word	0x40010000

08006d00 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	031b      	lsls	r3, r3, #12
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	031b      	lsls	r3, r3, #12
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0f      	ldr	r2, [pc, #60]	@ (8006da0 <OC4Config+0xa0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d107      	bne.n	8006d78 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	019b      	lsls	r3, r3, #6
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fda4 	bl	80068d8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40010000 	.word	0x40010000

08006da4 <LL_USART_IsEnabled>:
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <LL_USART_SetStopBitsLength>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	611a      	str	r2, [r3, #16]
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <LL_USART_SetHWFlowCtrl>:
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	615a      	str	r2, [r3, #20]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_USART_SetBaudRate>:
{
 8006e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e1c:	b0c0      	sub	sp, #256	@ 0x100
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e24:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006e28:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006e2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e38:	f040 810c 	bne.w	8007054 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	6639      	str	r1, [r7, #96]	@ 0x60
 8006e56:	415b      	adcs	r3, r3
 8006e58:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006e5e:	4621      	mov	r1, r4
 8006e60:	eb12 0801 	adds.w	r8, r2, r1
 8006e64:	4629      	mov	r1, r5
 8006e66:	eb43 0901 	adc.w	r9, r3, r1
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7e:	4690      	mov	r8, r2
 8006e80:	4699      	mov	r9, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	eb18 0303 	adds.w	r3, r8, r3
 8006e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	eb49 0303 	adc.w	r3, r9, r3
 8006e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	469a      	mov	sl, r3
 8006e9e:	4693      	mov	fp, r2
 8006ea0:	eb1a 030a 	adds.w	r3, sl, sl
 8006ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ea6:	eb4b 030b 	adc.w	r3, fp, fp
 8006eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006eb4:	f7f9 fed0 	bl	8000c58 <__aeabi_uldivmod>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4b64      	ldr	r3, [pc, #400]	@ (8007050 <LL_USART_SetBaudRate+0x238>)
 8006ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	b29c      	uxth	r4, r3
 8006eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ed4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ed8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006edc:	4642      	mov	r2, r8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	1891      	adds	r1, r2, r2
 8006ee2:	6539      	str	r1, [r7, #80]	@ 0x50
 8006ee4:	415b      	adcs	r3, r3
 8006ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006eec:	4641      	mov	r1, r8
 8006eee:	1851      	adds	r1, r2, r1
 8006ef0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	414b      	adcs	r3, r1
 8006ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006f04:	4659      	mov	r1, fp
 8006f06:	00cb      	lsls	r3, r1, #3
 8006f08:	4651      	mov	r1, sl
 8006f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f0e:	4651      	mov	r1, sl
 8006f10:	00ca      	lsls	r2, r1, #3
 8006f12:	4610      	mov	r0, r2
 8006f14:	4619      	mov	r1, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	4642      	mov	r2, r8
 8006f1a:	189b      	adds	r3, r3, r2
 8006f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f20:	464b      	mov	r3, r9
 8006f22:	460a      	mov	r2, r1
 8006f24:	eb42 0303 	adc.w	r3, r2, r3
 8006f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f36:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006f3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f3e:	460b      	mov	r3, r1
 8006f40:	18db      	adds	r3, r3, r3
 8006f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f44:	4613      	mov	r3, r2
 8006f46:	eb42 0303 	adc.w	r3, r2, r3
 8006f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f50:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006f54:	f7f9 fe80 	bl	8000c58 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8007050 <LL_USART_SetBaudRate+0x238>)
 8006f60:	fba3 2301 	umull	r2, r3, r3, r1
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	2264      	movs	r2, #100	@ 0x64
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	1acb      	subs	r3, r1, r3
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f74:	4b36      	ldr	r3, [pc, #216]	@ (8007050 <LL_USART_SetBaudRate+0x238>)
 8006f76:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4423      	add	r3, r4
 8006f8a:	b29c      	uxth	r4, r3
 8006f8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f96:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f9a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006f9e:	4642      	mov	r2, r8
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	1891      	adds	r1, r2, r2
 8006fa4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fa6:	415b      	adcs	r3, r3
 8006fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006faa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fae:	4641      	mov	r1, r8
 8006fb0:	1851      	adds	r1, r2, r1
 8006fb2:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	414b      	adcs	r3, r1
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	00cb      	lsls	r3, r1, #3
 8006fca:	4651      	mov	r1, sl
 8006fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	00ca      	lsls	r2, r1, #3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4642      	mov	r2, r8
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	eb42 0303 	adc.w	r3, r2, r3
 8006fea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ff8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006ffc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007000:	460b      	mov	r3, r1
 8007002:	18db      	adds	r3, r3, r3
 8007004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007006:	4613      	mov	r3, r2
 8007008:	eb42 0303 	adc.w	r3, r2, r3
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007012:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007016:	f7f9 fe1f 	bl	8000c58 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <LL_USART_SetBaudRate+0x238>)
 8007020:	fba3 1302 	umull	r1, r3, r3, r2
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	2164      	movs	r1, #100	@ 0x64
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	3332      	adds	r3, #50	@ 0x32
 8007032:	4a07      	ldr	r2, [pc, #28]	@ (8007050 <LL_USART_SetBaudRate+0x238>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	b29b      	uxth	r3, r3
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	b29b      	uxth	r3, r3
 8007042:	4423      	add	r3, r4
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704c:	609a      	str	r2, [r3, #8]
}
 800704e:	e108      	b.n	8007262 <LL_USART_SetBaudRate+0x44a>
 8007050:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800705e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007062:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	1891      	adds	r1, r2, r2
 800706c:	6239      	str	r1, [r7, #32]
 800706e:	415b      	adcs	r3, r3
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
 8007072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007076:	4641      	mov	r1, r8
 8007078:	1854      	adds	r4, r2, r1
 800707a:	4649      	mov	r1, r9
 800707c:	eb43 0501 	adc.w	r5, r3, r1
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	00eb      	lsls	r3, r5, #3
 800708a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708e:	00e2      	lsls	r2, r4, #3
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	4643      	mov	r3, r8
 8007096:	18e3      	adds	r3, r4, r3
 8007098:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800709c:	464b      	mov	r3, r9
 800709e:	eb45 0303 	adc.w	r3, r5, r3
 80070a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80070c0:	4629      	mov	r1, r5
 80070c2:	008b      	lsls	r3, r1, #2
 80070c4:	4621      	mov	r1, r4
 80070c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ca:	4621      	mov	r1, r4
 80070cc:	008a      	lsls	r2, r1, #2
 80070ce:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80070d2:	f7f9 fdc1 	bl	8000c58 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4b65      	ldr	r3, [pc, #404]	@ (8007270 <LL_USART_SetBaudRate+0x458>)
 80070dc:	fba3 2302 	umull	r2, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	b29c      	uxth	r4, r3
 80070e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070f6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80070fa:	4642      	mov	r2, r8
 80070fc:	464b      	mov	r3, r9
 80070fe:	1891      	adds	r1, r2, r2
 8007100:	61b9      	str	r1, [r7, #24]
 8007102:	415b      	adcs	r3, r3
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800710a:	4641      	mov	r1, r8
 800710c:	1851      	adds	r1, r2, r1
 800710e:	6139      	str	r1, [r7, #16]
 8007110:	4649      	mov	r1, r9
 8007112:	414b      	adcs	r3, r1
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007122:	4659      	mov	r1, fp
 8007124:	00cb      	lsls	r3, r1, #3
 8007126:	4651      	mov	r1, sl
 8007128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712c:	4651      	mov	r1, sl
 800712e:	00ca      	lsls	r2, r1, #3
 8007130:	4610      	mov	r0, r2
 8007132:	4619      	mov	r1, r3
 8007134:	4603      	mov	r3, r0
 8007136:	4642      	mov	r2, r8
 8007138:	189b      	adds	r3, r3, r2
 800713a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800713e:	464b      	mov	r3, r9
 8007140:	460a      	mov	r2, r1
 8007142:	eb42 0303 	adc.w	r3, r2, r3
 8007146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800714a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800714e:	2200      	movs	r2, #0
 8007150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007154:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007164:	4649      	mov	r1, r9
 8007166:	008b      	lsls	r3, r1, #2
 8007168:	4641      	mov	r1, r8
 800716a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716e:	4641      	mov	r1, r8
 8007170:	008a      	lsls	r2, r1, #2
 8007172:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007176:	f7f9 fd6f 	bl	8000c58 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4611      	mov	r1, r2
 8007180:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <LL_USART_SetBaudRate+0x458>)
 8007182:	fba3 2301 	umull	r2, r3, r3, r1
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	2264      	movs	r2, #100	@ 0x64
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	1acb      	subs	r3, r1, r3
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	3332      	adds	r3, #50	@ 0x32
 8007194:	4a36      	ldr	r2, [pc, #216]	@ (8007270 <LL_USART_SetBaudRate+0x458>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	b29b      	uxth	r3, r3
 800719e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4423      	add	r3, r4
 80071a6:	b29c      	uxth	r4, r3
 80071a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071ac:	2200      	movs	r2, #0
 80071ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071b0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071b2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	1891      	adds	r1, r2, r2
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	415b      	adcs	r3, r3
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c6:	4641      	mov	r1, r8
 80071c8:	1851      	adds	r1, r2, r1
 80071ca:	6039      	str	r1, [r7, #0]
 80071cc:	4649      	mov	r1, r9
 80071ce:	414b      	adcs	r3, r1
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071de:	4659      	mov	r1, fp
 80071e0:	00cb      	lsls	r3, r1, #3
 80071e2:	4651      	mov	r1, sl
 80071e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e8:	4651      	mov	r1, sl
 80071ea:	00ca      	lsls	r2, r1, #3
 80071ec:	4610      	mov	r0, r2
 80071ee:	4619      	mov	r1, r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	4642      	mov	r2, r8
 80071f4:	189b      	adds	r3, r3, r2
 80071f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80071f8:	464b      	mov	r3, r9
 80071fa:	460a      	mov	r2, r1
 80071fc:	eb42 0303 	adc.w	r3, r2, r3
 8007200:	677b      	str	r3, [r7, #116]	@ 0x74
 8007202:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007206:	2200      	movs	r2, #0
 8007208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800720a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007218:	4649      	mov	r1, r9
 800721a:	008b      	lsls	r3, r1, #2
 800721c:	4641      	mov	r1, r8
 800721e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007222:	4641      	mov	r1, r8
 8007224:	008a      	lsls	r2, r1, #2
 8007226:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800722a:	f7f9 fd15 	bl	8000c58 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <LL_USART_SetBaudRate+0x458>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	@ 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	3332      	adds	r3, #50	@ 0x32
 8007246:	4a0a      	ldr	r2, [pc, #40]	@ (8007270 <LL_USART_SetBaudRate+0x458>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	b29b      	uxth	r3, r3
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	b29b      	uxth	r3, r3
 8007256:	4423      	add	r3, r4
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007260:	609a      	str	r2, [r3, #8]
}
 8007262:	bf00      	nop
 8007264:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007268:	46bd      	mov	sp, r7
 800726a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726e:	bf00      	nop
 8007270:	51eb851f 	.word	0x51eb851f

08007274 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007282:	2300      	movs	r3, #0
 8007284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fd8c 	bl	8006da4 <LL_USART_IsEnabled>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d149      	bne.n	8007326 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800729a:	f023 030c 	bic.w	r3, r3, #12
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	6851      	ldr	r1, [r2, #4]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	68d2      	ldr	r2, [r2, #12]
 80072a6:	4311      	orrs	r1, r2
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	6912      	ldr	r2, [r2, #16]
 80072ac:	4311      	orrs	r1, r2
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	6992      	ldr	r2, [r2, #24]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fd83 	bl	8006dcc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff fd90 	bl	8006df2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff f9e0 	bl	800669c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a14      	ldr	r2, [pc, #80]	@ (8007330 <LL_USART_Init+0xbc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d102      	bne.n	80072ea <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e00c      	b.n	8007304 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <LL_USART_Init+0xc0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d102      	bne.n	80072f8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e005      	b.n	8007304 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007338 <LL_USART_Init+0xc4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8007312:	2300      	movs	r3, #0
 8007314:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800731e:	69b9      	ldr	r1, [r7, #24]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fd79 	bl	8006e18 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007326:	7ffb      	ldrb	r3, [r7, #31]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40011000 	.word	0x40011000
 8007334:	40004400 	.word	0x40004400
 8007338:	40011400 	.word	0x40011400

0800733c <__NVIC_SetPriority>:
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734c:	2b00      	cmp	r3, #0
 800734e:	db0a      	blt.n	8007366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	490c      	ldr	r1, [pc, #48]	@ (8007388 <__NVIC_SetPriority+0x4c>)
 8007356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735a:	0112      	lsls	r2, r2, #4
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	440b      	add	r3, r1
 8007360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007364:	e00a      	b.n	800737c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	4908      	ldr	r1, [pc, #32]	@ (800738c <__NVIC_SetPriority+0x50>)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	3b04      	subs	r3, #4
 8007374:	0112      	lsls	r2, r2, #4
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	440b      	add	r3, r1
 800737a:	761a      	strb	r2, [r3, #24]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	e000e100 	.word	0xe000e100
 800738c:	e000ed00 	.word	0xe000ed00

08007390 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <SysTick_Handler+0x1c>)
 8007396:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007398:	f002 fab2 	bl	8009900 <xTaskGetSchedulerState>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d001      	beq.n	80073a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073a2:	f003 f8e1 	bl	800a568 <xPortSysTickHandler>
  }
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	e000e010 	.word	0xe000e010

080073b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073b4:	2100      	movs	r1, #0
 80073b6:	f06f 0004 	mvn.w	r0, #4
 80073ba:	f7ff ffbf 	bl	800733c <__NVIC_SetPriority>
#endif
}
 80073be:	bf00      	nop
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ca:	f3ef 8305 	mrs	r3, IPSR
 80073ce:	603b      	str	r3, [r7, #0]
  return(result);
 80073d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073d6:	f06f 0305 	mvn.w	r3, #5
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	e00c      	b.n	80073f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073de:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <osKernelInitialize+0x44>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073e6:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <osKernelInitialize+0x44>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	607b      	str	r3, [r7, #4]
 80073f0:	e002      	b.n	80073f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000604 	.word	0x20000604

0800740c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007412:	f3ef 8305 	mrs	r3, IPSR
 8007416:	603b      	str	r3, [r7, #0]
  return(result);
 8007418:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <osKernelStart+0x1a>
    stat = osErrorISR;
 800741e:	f06f 0305 	mvn.w	r3, #5
 8007422:	607b      	str	r3, [r7, #4]
 8007424:	e010      	b.n	8007448 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007426:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <osKernelStart+0x48>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d109      	bne.n	8007442 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800742e:	f7ff ffbf 	bl	80073b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007432:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <osKernelStart+0x48>)
 8007434:	2202      	movs	r2, #2
 8007436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007438:	f001 fd5c 	bl	8008ef4 <vTaskStartScheduler>
      stat = osOK;
 800743c:	2300      	movs	r3, #0
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	e002      	b.n	8007448 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007448:	687b      	ldr	r3, [r7, #4]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000604 	.word	0x20000604

08007458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b08e      	sub	sp, #56	@ 0x38
 800745c:	af04      	add	r7, sp, #16
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007468:	f3ef 8305 	mrs	r3, IPSR
 800746c:	617b      	str	r3, [r7, #20]
  return(result);
 800746e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007470:	2b00      	cmp	r3, #0
 8007472:	d17e      	bne.n	8007572 <osThreadNew+0x11a>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d07b      	beq.n	8007572 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800747a:	2380      	movs	r3, #128	@ 0x80
 800747c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800747e:	2318      	movs	r3, #24
 8007480:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007486:	f04f 33ff 	mov.w	r3, #4294967295
 800748a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d045      	beq.n	800751e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <osThreadNew+0x48>
        name = attr->name;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <osThreadNew+0x6e>
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b38      	cmp	r3, #56	@ 0x38
 80074b8:	d805      	bhi.n	80074c6 <osThreadNew+0x6e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <osThreadNew+0x72>
        return (NULL);
 80074c6:	2300      	movs	r3, #0
 80074c8:	e054      	b.n	8007574 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <osThreadNew+0xa8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80074e8:	d90a      	bls.n	8007500 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d006      	beq.n	8007500 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <osThreadNew+0xa8>
        mem = 1;
 80074fa:	2301      	movs	r3, #1
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e010      	b.n	8007522 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10c      	bne.n	8007522 <osThreadNew+0xca>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <osThreadNew+0xca>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <osThreadNew+0xca>
          mem = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e001      	b.n	8007522 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d110      	bne.n	800754a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007530:	9202      	str	r2, [sp, #8]
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6a3a      	ldr	r2, [r7, #32]
 800753c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f001 fae4 	bl	8008b0c <xTaskCreateStatic>
 8007544:	4603      	mov	r3, r0
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	e013      	b.n	8007572 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d110      	bne.n	8007572 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	b29a      	uxth	r2, r3
 8007554:	f107 0310 	add.w	r3, r7, #16
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f001 fb32 	bl	8008bcc <xTaskCreate>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d001      	beq.n	8007572 <osThreadNew+0x11a>
            hTask = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007572:	693b      	ldr	r3, [r7, #16]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3728      	adds	r7, #40	@ 0x28
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007584:	f3ef 8305 	mrs	r3, IPSR
 8007588:	60bb      	str	r3, [r7, #8]
  return(result);
 800758a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <osDelay+0x1c>
    stat = osErrorISR;
 8007590:	f06f 0305 	mvn.w	r3, #5
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e007      	b.n	80075a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fc70 	bl	8008e88 <vTaskDelay>
    }
  }

  return (stat);
 80075a8:	68fb      	ldr	r3, [r7, #12]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075be:	f3ef 8305 	mrs	r3, IPSR
 80075c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075c4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12d      	bne.n	8007626 <osEventFlagsNew+0x74>
    mem = -1;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d015      	beq.n	8007602 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d006      	beq.n	80075ec <osEventFlagsNew+0x3a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b1f      	cmp	r3, #31
 80075e4:	d902      	bls.n	80075ec <osEventFlagsNew+0x3a>
        mem = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	e00c      	b.n	8007606 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <osEventFlagsNew+0x54>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <osEventFlagsNew+0x54>
          mem = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	e001      	b.n	8007606 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d106      	bne.n	800761a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fa19 	bl	8007a48 <xEventGroupCreateStatic>
 8007616:	6178      	str	r0, [r7, #20]
 8007618:	e005      	b.n	8007626 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007620:	f000 fa4b 	bl	8007aba <xEventGroupCreate>
 8007624:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <osEventFlagsSet+0x1c>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800764a:	d303      	bcc.n	8007654 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800764c:	f06f 0303 	mvn.w	r3, #3
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e028      	b.n	80076a6 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007654:	f3ef 8305 	mrs	r3, IPSR
 8007658:	60fb      	str	r3, [r7, #12]
  return(result);
 800765a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01d      	beq.n	800769c <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007664:	f107 0308 	add.w	r3, r7, #8
 8007668:	461a      	mov	r2, r3
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6938      	ldr	r0, [r7, #16]
 800766e:	f000 fbcd 	bl	8007e0c <xEventGroupSetBitsFromISR>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007678:	f06f 0302 	mvn.w	r3, #2
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	e012      	b.n	80076a6 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <osEventFlagsSet+0x76>
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <osEventFlagsSet+0x80>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	e004      	b.n	80076a6 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6938      	ldr	r0, [r7, #16]
 80076a0:	f000 faf8 	bl	8007c94 <xEventGroupSetBits>
 80076a4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	@ 0x30
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <osEventFlagsWait+0x20>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076d2:	d303      	bcc.n	80076dc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80076d4:	f06f 0303 	mvn.w	r3, #3
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	e04b      	b.n	8007774 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076dc:	f3ef 8305 	mrs	r3, IPSR
 80076e0:	617b      	str	r3, [r7, #20]
  return(result);
 80076e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80076e8:	f06f 0305 	mvn.w	r3, #5
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	e041      	b.n	8007774 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fe:	e001      	b.n	8007704 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007700:	2300      	movs	r3, #0
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800770e:	2300      	movs	r3, #0
 8007710:	623b      	str	r3, [r7, #32]
 8007712:	e001      	b.n	8007718 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	69b8      	ldr	r0, [r7, #24]
 8007724:	f000 f9e4 	bl	8007af0 <xEventGroupWaitBits>
 8007728:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d010      	beq.n	8007756 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4013      	ands	r3, r2
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	d019      	beq.n	8007774 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007746:	f06f 0301 	mvn.w	r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e012      	b.n	8007774 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800774e:	f06f 0302 	mvn.w	r3, #2
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e00e      	b.n	8007774 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007766:	f06f 0301 	mvn.w	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e002      	b.n	8007774 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800776e:	f06f 0302 	mvn.w	r3, #2
 8007772:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007774:	69fb      	ldr	r3, [r7, #28]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3728      	adds	r7, #40	@ 0x28
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800777e:	b580      	push	{r7, lr}
 8007780:	b08a      	sub	sp, #40	@ 0x28
 8007782:	af02      	add	r7, sp, #8
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	613b      	str	r3, [r7, #16]
  return(result);
 8007794:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007796:	2b00      	cmp	r3, #0
 8007798:	d15f      	bne.n	800785a <osMessageQueueNew+0xdc>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05c      	beq.n	800785a <osMessageQueueNew+0xdc>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d059      	beq.n	800785a <osMessageQueueNew+0xdc>
    mem = -1;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
 80077aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d029      	beq.n	8007806 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d012      	beq.n	80077e0 <osMessageQueueNew+0x62>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b4f      	cmp	r3, #79	@ 0x4f
 80077c0:	d90e      	bls.n	80077e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695a      	ldr	r2, [r3, #20]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <osMessageQueueNew+0x62>
        mem = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e014      	b.n	800780a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d110      	bne.n	800780a <osMessageQueueNew+0x8c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10c      	bne.n	800780a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <osMessageQueueNew+0x8c>
          mem = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	e001      	b.n	800780a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d10b      	bne.n	8007828 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2100      	movs	r1, #0
 800781a:	9100      	str	r1, [sp, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fc26 	bl	8008070 <xQueueGenericCreateStatic>
 8007824:	61f8      	str	r0, [r7, #28]
 8007826:	e008      	b.n	800783a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800782e:	2200      	movs	r2, #0
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fc99 	bl	800816a <xQueueGenericCreate>
 8007838:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00c      	beq.n	800785a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e001      	b.n	8007852 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	69f8      	ldr	r0, [r7, #28]
 8007856:	f001 f8fb 	bl	8008a50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800785a:	69fb      	ldr	r3, [r7, #28]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3720      	adds	r7, #32
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787c:	f3ef 8305 	mrs	r3, IPSR
 8007880:	617b      	str	r3, [r7, #20]
  return(result);
 8007882:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007884:	2b00      	cmp	r3, #0
 8007886:	d028      	beq.n	80078da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <osMessageQueuePut+0x36>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <osMessageQueuePut+0x36>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800789a:	f06f 0303 	mvn.w	r3, #3
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e038      	b.n	8007914 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80078a6:	f107 0210 	add.w	r2, r7, #16
 80078aa:	2300      	movs	r3, #0
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	69b8      	ldr	r0, [r7, #24]
 80078b0:	f000 fdbc 	bl	800842c <xQueueGenericSendFromISR>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d003      	beq.n	80078c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80078ba:	f06f 0302 	mvn.w	r3, #2
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e028      	b.n	8007914 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d025      	beq.n	8007914 <osMessageQueuePut+0xb0>
 80078c8:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <osMessageQueuePut+0xbc>)
 80078ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	e01c      	b.n	8007914 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <osMessageQueuePut+0x82>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80078e6:	f06f 0303 	mvn.w	r3, #3
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e012      	b.n	8007914 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80078ee:	2300      	movs	r3, #0
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	69b8      	ldr	r0, [r7, #24]
 80078f6:	f000 fc97 	bl	8008228 <xQueueGenericSend>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d009      	beq.n	8007914 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007906:	f06f 0301 	mvn.w	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	e002      	b.n	8007914 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800790e:	f06f 0302 	mvn.w	r3, #2
 8007912:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed04 	.word	0xe000ed04

08007924 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800793a:	f3ef 8305 	mrs	r3, IPSR
 800793e:	617b      	str	r3, [r7, #20]
  return(result);
 8007940:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007942:	2b00      	cmp	r3, #0
 8007944:	d028      	beq.n	8007998 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <osMessageQueueGet+0x34>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <osMessageQueueGet+0x34>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007958:	f06f 0303 	mvn.w	r3, #3
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	e037      	b.n	80079d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	461a      	mov	r2, r3
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	69b8      	ldr	r0, [r7, #24]
 800796e:	f000 fedd 	bl	800872c <xQueueReceiveFromISR>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d003      	beq.n	8007980 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007978:	f06f 0302 	mvn.w	r3, #2
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e027      	b.n	80079d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d024      	beq.n	80079d0 <osMessageQueueGet+0xac>
 8007986:	4b15      	ldr	r3, [pc, #84]	@ (80079dc <osMessageQueueGet+0xb8>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	e01b      	b.n	80079d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <osMessageQueueGet+0x80>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80079a4:	f06f 0303 	mvn.w	r3, #3
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e011      	b.n	80079d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	69b8      	ldr	r0, [r7, #24]
 80079b2:	f000 fdd9 	bl	8008568 <xQueueReceive>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d009      	beq.n	80079d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80079c2:	f06f 0301 	mvn.w	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	e002      	b.n	80079d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80079ca:	f06f 0302 	mvn.w	r3, #2
 80079ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80079d0:	69fb      	ldr	r3, [r7, #28]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4a07      	ldr	r2, [pc, #28]	@ (8007a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80079f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4a06      	ldr	r2, [pc, #24]	@ (8007a10 <vApplicationGetIdleTaskMemory+0x30>)
 80079f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2280      	movs	r2, #128	@ 0x80
 80079fc:	601a      	str	r2, [r3, #0]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000608 	.word	0x20000608
 8007a10:	200006b0 	.word	0x200006b0

08007a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4a07      	ldr	r2, [pc, #28]	@ (8007a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a06      	ldr	r2, [pc, #24]	@ (8007a44 <vApplicationGetTimerTaskMemory+0x30>)
 8007a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200008b0 	.word	0x200008b0
 8007a44:	20000958 	.word	0x20000958

08007a48 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007a6e:	2320      	movs	r3, #32
 8007a70:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d00b      	beq.n	8007a90 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60fb      	str	r3, [r7, #12]
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f9c5 	bl	8007e34 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2201      	movs	r2, #1
 8007aae:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007ab0:	697b      	ldr	r3, [r7, #20]
	}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007ac0:	2020      	movs	r0, #32
 8007ac2:	f002 fde3 	bl	800a68c <pvPortMalloc>
 8007ac6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f9ab 	bl	8007e34 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007ae4:	687b      	ldr	r3, [r7, #4]
	}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b090      	sub	sp, #64	@ 0x40
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <xEventGroupWaitBits+0x38>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	623b      	str	r3, [r7, #32]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2e:	d30b      	bcc.n	8007b48 <xEventGroupWaitBits+0x58>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	61fb      	str	r3, [r7, #28]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <xEventGroupWaitBits+0x76>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	61bb      	str	r3, [r7, #24]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b66:	f001 fecb 	bl	8009900 <xTaskGetSchedulerState>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <xEventGroupWaitBits+0x86>
 8007b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <xEventGroupWaitBits+0x8a>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <xEventGroupWaitBits+0x8c>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	617b      	str	r3, [r7, #20]
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8007b98:	f001 fa1c 	bl	8008fd4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ba8:	f000 f90d 	bl	8007dc6 <prvTestWaitCondition>
 8007bac:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d028      	beq.n	8007c14 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	401a      	ands	r2, r3
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e020      	b.n	8007c14 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8007be0:	e018      	b.n	8007c14 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bee:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c00:	1d18      	adds	r0, r3, #4
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	4313      	orrs	r3, r2
 8007c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f001 fbe4 	bl	80093d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007c14:	f001 f9ec 	bl	8008ff0 <xTaskResumeAll>
 8007c18:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d031      	beq.n	8007c84 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8007c26:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <xEventGroupWaitBits+0x1a0>)
 8007c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007c36:	f001 fef1 	bl	8009a1c <uxTaskResetEventItemValue>
 8007c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11a      	bne.n	8007c7c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8007c46:	f002 fbff 	bl	800a448 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c56:	f000 f8b6 	bl	8007dc6 <prvTestWaitCondition>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	401a      	ands	r2, r3
 8007c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c72:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8007c78:	f002 fc18 	bl	800a4ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3740      	adds	r7, #64	@ 0x40
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	@ 0x38
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xEventGroupSetBits+0x34>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	613b      	str	r3, [r7, #16]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cce:	d30b      	bcc.n	8007ce8 <xEventGroupSetBits+0x54>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	3304      	adds	r3, #4
 8007cec:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007cf4:	f001 f96e 	bl	8008fd4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007d0a:	e03c      	b.n	8007d86 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007d22:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d2a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d108      	bne.n	8007d48 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8007d42:	2301      	movs	r3, #1
 8007d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d46:	e008      	b.n	8007d5a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d101      	bne.n	8007d5a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d010      	beq.n	8007d82 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007d7e:	f001 fbf9 	bl	8009574 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8007d86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d1be      	bne.n	8007d0c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007d9c:	f001 f928 	bl	8008ff0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	681b      	ldr	r3, [r3, #0]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3738      	adds	r7, #56	@ 0x38
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff ff6b 	bl	8007c94 <xEventGroupSetBits>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b087      	sub	sp, #28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007de6:	2301      	movs	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	e007      	b.n	8007dfc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4013      	ands	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d101      	bne.n	8007dfc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007dfc:	697b      	ldr	r3, [r7, #20]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	4804      	ldr	r0, [pc, #16]	@ (8007e30 <xEventGroupSetBitsFromISR+0x24>)
 8007e20:	f002 f9c2 	bl	800a1a8 <xTimerPendFunctionCallFromISR>
 8007e24:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007e26:	697b      	ldr	r3, [r7, #20]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	08007dad 	.word	0x08007dad

08007e34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 0208 	add.w	r2, r3, #8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f103 0208 	add.w	r2, r3, #8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f103 0208 	add.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d103      	bne.n	8007ef6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e00c      	b.n	8007f10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e002      	b.n	8007f04 <vListInsert+0x2e>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d2f6      	bcs.n	8007efe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6892      	ldr	r2, [r2, #8]
 8007f5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6852      	ldr	r2, [r2, #4]
 8007f68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d103      	bne.n	8007f7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10b      	bne.n	8007fc8 <xQueueGenericReset+0x2c>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60bb      	str	r3, [r7, #8]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fc8:	f002 fa3e 	bl	800a448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	441a      	add	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	22ff      	movs	r2, #255	@ 0xff
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	22ff      	movs	r2, #255	@ 0xff
 8008014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d114      	bne.n	8008048 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01a      	beq.n	800805c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3310      	adds	r3, #16
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fa3e 	bl	80094ac <xTaskRemoveFromEventList>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d012      	beq.n	800805c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <xQueueGenericReset+0xd0>)
 8008038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	e009      	b.n	800805c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3310      	adds	r3, #16
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fef1 	bl	8007e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3324      	adds	r3, #36	@ 0x24
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff feec 	bl	8007e34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800805c:	f002 fa26 	bl	800a4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008060:	2301      	movs	r3, #1
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08e      	sub	sp, #56	@ 0x38
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	e7fd      	b.n	80080b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <xQueueGenericCreateStatic+0x56>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <xQueueGenericCreateStatic+0x5a>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericCreateStatic+0x5c>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	623b      	str	r3, [r7, #32]
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <xQueueGenericCreateStatic+0x84>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <xQueueGenericCreateStatic+0x88>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <xQueueGenericCreateStatic+0x8a>
 80080f8:	2300      	movs	r3, #0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	61fb      	str	r3, [r7, #28]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008116:	2350      	movs	r3, #80	@ 0x50
 8008118:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b50      	cmp	r3, #80	@ 0x50
 800811e:	d00b      	beq.n	8008138 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61bb      	str	r3, [r7, #24]
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008138:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800813e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800814c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f840 	bl	80081e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008162:	4618      	mov	r0, r3
 8008164:	3730      	adds	r7, #48	@ 0x30
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800816a:	b580      	push	{r7, lr}
 800816c:	b08a      	sub	sp, #40	@ 0x28
 800816e:	af02      	add	r7, sp, #8
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <xQueueGenericCreate+0x2c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	613b      	str	r3, [r7, #16]
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	e7fd      	b.n	8008192 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	fb02 f303 	mul.w	r3, r2, r3
 800819e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3350      	adds	r3, #80	@ 0x50
 80081a4:	4618      	mov	r0, r3
 80081a6:	f002 fa71 	bl	800a68c <pvPortMalloc>
 80081aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d011      	beq.n	80081d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	3350      	adds	r3, #80	@ 0x50
 80081ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f805 	bl	80081e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081d6:	69bb      	ldr	r3, [r7, #24]
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e002      	b.n	8008202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800820e:	2101      	movs	r1, #1
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f7ff fec3 	bl	8007f9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	@ 0x38
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xQueueGenericSend+0x34>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d103      	bne.n	800826a <xQueueGenericSend+0x42>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <xQueueGenericSend+0x46>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericSend+0x48>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <xQueueGenericSend+0x64>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d103      	bne.n	800829a <xQueueGenericSend+0x72>
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <xQueueGenericSend+0x76>
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <xQueueGenericSend+0x78>
 800829e:	2300      	movs	r3, #0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10b      	bne.n	80082bc <xQueueGenericSend+0x94>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	623b      	str	r3, [r7, #32]
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	e7fd      	b.n	80082b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082bc:	f001 fb20 	bl	8009900 <xTaskGetSchedulerState>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <xQueueGenericSend+0xa4>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <xQueueGenericSend+0xa8>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <xQueueGenericSend+0xaa>
 80082d0:	2300      	movs	r3, #0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <xQueueGenericSend+0xc6>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	61fb      	str	r3, [r7, #28]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082ee:	f002 f8ab 	bl	800a448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <xQueueGenericSend+0xdc>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d129      	bne.n	8008358 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800830a:	f000 fa91 	bl	8008830 <prvCopyDataToQueue>
 800830e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d010      	beq.n	800833a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	3324      	adds	r3, #36	@ 0x24
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f8c5 	bl	80094ac <xTaskRemoveFromEventList>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d013      	beq.n	8008350 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008328:	4b3f      	ldr	r3, [pc, #252]	@ (8008428 <xQueueGenericSend+0x200>)
 800832a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	e00a      	b.n	8008350 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008340:	4b39      	ldr	r3, [pc, #228]	@ (8008428 <xQueueGenericSend+0x200>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008350:	f002 f8ac 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 8008354:	2301      	movs	r3, #1
 8008356:	e063      	b.n	8008420 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800835e:	f002 f8a5 	bl	800a4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008362:	2300      	movs	r3, #0
 8008364:	e05c      	b.n	8008420 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4618      	mov	r0, r3
 8008372:	f001 f963 	bl	800963c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800837a:	f002 f897 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800837e:	f000 fe29 	bl	8008fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008382:	f002 f861 	bl	800a448 <vPortEnterCritical>
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800838c:	b25b      	sxtb	r3, r3
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d103      	bne.n	800839c <xQueueGenericSend+0x174>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d103      	bne.n	80083b2 <xQueueGenericSend+0x18a>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083b2:	f002 f87b 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083b6:	1d3a      	adds	r2, r7, #4
 80083b8:	f107 0314 	add.w	r3, r7, #20
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f952 	bl	8009668 <xTaskCheckForTimeOut>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d124      	bne.n	8008414 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083cc:	f000 fb28 	bl	8008a20 <prvIsQueueFull>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	3310      	adds	r3, #16
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 ffd4 	bl	800938c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083e6:	f000 fab3 	bl	8008950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ea:	f000 fe01 	bl	8008ff0 <xTaskResumeAll>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f af7c 	bne.w	80082ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <xQueueGenericSend+0x200>)
 80083f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e772      	b.n	80082ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800840a:	f000 faa1 	bl	8008950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800840e:	f000 fdef 	bl	8008ff0 <xTaskResumeAll>
 8008412:	e76c      	b.n	80082ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008416:	f000 fa9b 	bl	8008950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800841a:	f000 fde9 	bl	8008ff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800841e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008420:	4618      	mov	r0, r3
 8008422:	3738      	adds	r7, #56	@ 0x38
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b090      	sub	sp, #64	@ 0x40
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d103      	bne.n	800846a <xQueueGenericSendFromISR+0x3e>
 8008462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <xQueueGenericSendFromISR+0x42>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <xQueueGenericSendFromISR+0x44>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10b      	bne.n	800848c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	e7fd      	b.n	8008488 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d103      	bne.n	800849a <xQueueGenericSendFromISR+0x6e>
 8008492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <xQueueGenericSendFromISR+0x72>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <xQueueGenericSendFromISR+0x74>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10b      	bne.n	80084bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	623b      	str	r3, [r7, #32]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084bc:	f002 f8a4 	bl	800a608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084c0:	f3ef 8211 	mrs	r2, BASEPRI
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61fa      	str	r2, [r7, #28]
 80084d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d302      	bcc.n	80084ee <xQueueGenericSendFromISR+0xc2>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d12f      	bne.n	800854e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008504:	f000 f994 	bl	8008830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008508:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d112      	bne.n	8008538 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	3324      	adds	r3, #36	@ 0x24
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ffc4 	bl	80094ac <xTaskRemoveFromEventList>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00e      	beq.n	8008548 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e007      	b.n	8008548 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008538:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800853c:	3301      	adds	r3, #1
 800853e:	b2db      	uxtb	r3, r3
 8008540:	b25a      	sxtb	r2, r3
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008548:	2301      	movs	r3, #1
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800854c:	e001      	b.n	8008552 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800854e:	2300      	movs	r3, #0
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008554:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800855c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800855e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008560:	4618      	mov	r0, r3
 8008562:	3740      	adds	r7, #64	@ 0x40
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08c      	sub	sp, #48	@ 0x30
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <xQueueReceive+0x32>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	623b      	str	r3, [r7, #32]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <xQueueReceive+0x40>
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <xQueueReceive+0x44>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <xQueueReceive+0x46>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <xQueueReceive+0x62>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	61fb      	str	r3, [r7, #28]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085ca:	f001 f999 	bl	8009900 <xTaskGetSchedulerState>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <xQueueReceive+0x72>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <xQueueReceive+0x76>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueReceive+0x78>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <xQueueReceive+0x94>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	61bb      	str	r3, [r7, #24]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085fc:	f001 ff24 	bl	800a448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01f      	beq.n	800864c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008610:	f000 f978 	bl	8008904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	1e5a      	subs	r2, r3, #1
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00f      	beq.n	8008644 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	3310      	adds	r3, #16
 8008628:	4618      	mov	r0, r3
 800862a:	f000 ff3f 	bl	80094ac <xTaskRemoveFromEventList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d007      	beq.n	8008644 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008634:	4b3c      	ldr	r3, [pc, #240]	@ (8008728 <xQueueReceive+0x1c0>)
 8008636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008644:	f001 ff32 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 8008648:	2301      	movs	r3, #1
 800864a:	e069      	b.n	8008720 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008652:	f001 ff2b 	bl	800a4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008656:	2300      	movs	r3, #0
 8008658:	e062      	b.n	8008720 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008660:	f107 0310 	add.w	r3, r7, #16
 8008664:	4618      	mov	r0, r3
 8008666:	f000 ffe9 	bl	800963c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800866e:	f001 ff1d 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008672:	f000 fcaf 	bl	8008fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008676:	f001 fee7 	bl	800a448 <vPortEnterCritical>
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008680:	b25b      	sxtb	r3, r3
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d103      	bne.n	8008690 <xQueueReceive+0x128>
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008696:	b25b      	sxtb	r3, r3
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d103      	bne.n	80086a6 <xQueueReceive+0x13e>
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086a6:	f001 ff01 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086aa:	1d3a      	adds	r2, r7, #4
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 ffd8 	bl	8009668 <xTaskCheckForTimeOut>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d123      	bne.n	8008706 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c0:	f000 f998 	bl	80089f4 <prvIsQueueEmpty>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d017      	beq.n	80086fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	3324      	adds	r3, #36	@ 0x24
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fe5a 	bl	800938c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086da:	f000 f939 	bl	8008950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086de:	f000 fc87 	bl	8008ff0 <xTaskResumeAll>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d189      	bne.n	80085fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80086e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008728 <xQueueReceive+0x1c0>)
 80086ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	e780      	b.n	80085fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086fc:	f000 f928 	bl	8008950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008700:	f000 fc76 	bl	8008ff0 <xTaskResumeAll>
 8008704:	e77a      	b.n	80085fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008708:	f000 f922 	bl	8008950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800870c:	f000 fc70 	bl	8008ff0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008712:	f000 f96f 	bl	80089f4 <prvIsQueueEmpty>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f43f af6f 	beq.w	80085fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800871e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008720:	4618      	mov	r0, r3
 8008722:	3730      	adds	r7, #48	@ 0x30
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	@ 0x38
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	623b      	str	r3, [r7, #32]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <xQueueReceiveFromISR+0x3c>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <xQueueReceiveFromISR+0x40>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <xQueueReceiveFromISR+0x42>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10b      	bne.n	800878a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	61fb      	str	r3, [r7, #28]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800878a:	f001 ff3d 	bl	800a608 <vPortValidateInterruptPriority>
	__asm volatile
 800878e:	f3ef 8211 	mrs	r2, BASEPRI
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61ba      	str	r2, [r7, #24]
 80087a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02f      	beq.n	8008816 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087c4:	f000 f89e 	bl	8008904 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ca:	1e5a      	subs	r2, r3, #1
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d112      	bne.n	8008800 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	3310      	adds	r3, #16
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fe60 	bl	80094ac <xTaskRemoveFromEventList>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e007      	b.n	8008810 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008804:	3301      	adds	r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	b25a      	sxtb	r2, r3
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008810:	2301      	movs	r3, #1
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34
 8008814:	e001      	b.n	800881a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008816:	2300      	movs	r3, #0
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f383 8811 	msr	BASEPRI, r3
}
 8008824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008828:	4618      	mov	r0, r3
 800882a:	3738      	adds	r7, #56	@ 0x38
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d14d      	bne.n	80088f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	4618      	mov	r0, r3
 800885c:	f001 f86e 	bl	800993c <xTaskPriorityDisinherit>
 8008860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	609a      	str	r2, [r3, #8]
 8008868:	e043      	b.n	80088f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d119      	bne.n	80088a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6858      	ldr	r0, [r3, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	461a      	mov	r2, r3
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	f002 ff27 	bl	800b6ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008888:	441a      	add	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	429a      	cmp	r2, r3
 8008898:	d32b      	bcc.n	80088f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	e026      	b.n	80088f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68d8      	ldr	r0, [r3, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ac:	461a      	mov	r2, r3
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	f002 ff0d 	bl	800b6ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088bc:	425b      	negs	r3, r3
 80088be:	441a      	add	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d207      	bcs.n	80088e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d8:	425b      	negs	r3, r3
 80088da:	441a      	add	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d105      	bne.n	80088f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80088fa:	697b      	ldr	r3, [r7, #20]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d018      	beq.n	8008948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891e:	441a      	add	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	429a      	cmp	r2, r3
 800892e:	d303      	bcc.n	8008938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68d9      	ldr	r1, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008940:	461a      	mov	r2, r3
 8008942:	6838      	ldr	r0, [r7, #0]
 8008944:	f002 fec3 	bl	800b6ce <memcpy>
	}
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008958:	f001 fd76 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008964:	e011      	b.n	800898a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d012      	beq.n	8008994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3324      	adds	r3, #36	@ 0x24
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fd9a 	bl	80094ac <xTaskRemoveFromEventList>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800897e:	f000 fed7 	bl	8009730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	3b01      	subs	r3, #1
 8008986:	b2db      	uxtb	r3, r3
 8008988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dce9      	bgt.n	8008966 <prvUnlockQueue+0x16>
 8008992:	e000      	b.n	8008996 <prvUnlockQueue+0x46>
					break;
 8008994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	22ff      	movs	r2, #255	@ 0xff
 800899a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800899e:	f001 fd85 	bl	800a4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089a2:	f001 fd51 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ae:	e011      	b.n	80089d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d012      	beq.n	80089de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3310      	adds	r3, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fd75 	bl	80094ac <xTaskRemoveFromEventList>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089c8:	f000 feb2 	bl	8009730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dce9      	bgt.n	80089b0 <prvUnlockQueue+0x60>
 80089dc:	e000      	b.n	80089e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	22ff      	movs	r2, #255	@ 0xff
 80089e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80089e8:	f001 fd60 	bl	800a4ac <vPortExitCritical>
}
 80089ec:	bf00      	nop
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089fc:	f001 fd24 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d102      	bne.n	8008a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e001      	b.n	8008a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a12:	f001 fd4b 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008a16:	68fb      	ldr	r3, [r7, #12]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a28:	f001 fd0e 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d102      	bne.n	8008a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e001      	b.n	8008a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a42:	f001 fd33 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008a46:	68fb      	ldr	r3, [r7, #12]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	e014      	b.n	8008a8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a60:	4a0f      	ldr	r2, [pc, #60]	@ (8008aa0 <vQueueAddToRegistry+0x50>)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a6c:	490c      	ldr	r1, [pc, #48]	@ (8008aa0 <vQueueAddToRegistry+0x50>)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a76:	4a0a      	ldr	r2, [pc, #40]	@ (8008aa0 <vQueueAddToRegistry+0x50>)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	4413      	add	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a82:	e006      	b.n	8008a92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b07      	cmp	r3, #7
 8008a8e:	d9e7      	bls.n	8008a60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20000d58 	.word	0x20000d58

08008aa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ab4:	f001 fcc8 	bl	800a448 <vPortEnterCritical>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008abe:	b25b      	sxtb	r3, r3
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d103      	bne.n	8008ace <vQueueWaitForMessageRestricted+0x2a>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ada:	d103      	bne.n	8008ae4 <vQueueWaitForMessageRestricted+0x40>
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ae4:	f001 fce2 	bl	800a4ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	3324      	adds	r3, #36	@ 0x24
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fcab 	bl	8009454 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff ff26 	bl	8008950 <prvUnlockQueue>
	}
 8008b04:	bf00      	nop
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08e      	sub	sp, #56	@ 0x38
 8008b10:	af04      	add	r7, sp, #16
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	623b      	str	r3, [r7, #32]
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	e7fd      	b.n	8008b34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10b      	bne.n	8008b56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	61fb      	str	r3, [r7, #28]
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	e7fd      	b.n	8008b52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b56:	23a8      	movs	r3, #168	@ 0xa8
 8008b58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8008b5e:	d00b      	beq.n	8008b78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	61bb      	str	r3, [r7, #24]
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01e      	beq.n	8008bbe <xTaskCreateStatic+0xb2>
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01b      	beq.n	8008bbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f851 	bl	8008c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bb8:	f000 f8f6 	bl	8008da8 <prvAddNewTaskToReadyList>
 8008bbc:	e001      	b.n	8008bc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bc2:	697b      	ldr	r3, [r7, #20]
	}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3728      	adds	r7, #40	@ 0x28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	@ 0x30
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 fd53 	bl	800a68c <pvPortMalloc>
 8008be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00e      	beq.n	8008c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bee:	20a8      	movs	r0, #168	@ 0xa8
 8008bf0:	f001 fd4c 	bl	800a68c <pvPortMalloc>
 8008bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c02:	e005      	b.n	8008c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c04:	6978      	ldr	r0, [r7, #20]
 8008c06:	f001 fe0f 	bl	800a828 <vPortFree>
 8008c0a:	e001      	b.n	8008c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d017      	beq.n	8008c46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	2300      	movs	r3, #0
 8008c22:	9303      	str	r3, [sp, #12]
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	9302      	str	r3, [sp, #8]
 8008c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 f80f 	bl	8008c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c3a:	69f8      	ldr	r0, [r7, #28]
 8008c3c:	f000 f8b4 	bl	8008da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c40:	2301      	movs	r3, #1
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e002      	b.n	8008c4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
	}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	21a5      	movs	r1, #165	@ 0xa5
 8008c72:	f002 fc56 	bl	800b522 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c80:	3b01      	subs	r3, #1
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f023 0307 	bic.w	r3, r3, #7
 8008c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	617b      	str	r3, [r7, #20]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01f      	beq.n	8008cf8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	e012      	b.n	8008ce4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	7819      	ldrb	r1, [r3, #0]
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3334      	adds	r3, #52	@ 0x34
 8008cce:	460a      	mov	r2, r1
 8008cd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d006      	beq.n	8008cec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b0f      	cmp	r3, #15
 8008ce8:	d9e9      	bls.n	8008cbe <prvInitialiseNewTask+0x66>
 8008cea:	e000      	b.n	8008cee <prvInitialiseNewTask+0x96>
			{
				break;
 8008cec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cf6:	e003      	b.n	8008d00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d02:	2b37      	cmp	r3, #55	@ 0x37
 8008d04:	d901      	bls.n	8008d0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d06:	2337      	movs	r3, #55	@ 0x37
 8008d08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	2200      	movs	r2, #0
 8008d1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff f8a7 	bl	8007e74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	3318      	adds	r3, #24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff f8a2 	bl	8007e74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	3354      	adds	r3, #84	@ 0x54
 8008d5a:	224c      	movs	r2, #76	@ 0x4c
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f002 fbdf 	bl	800b522 <memset>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	4a0d      	ldr	r2, [pc, #52]	@ (8008d9c <prvInitialiseNewTask+0x144>)
 8008d68:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8008da0 <prvInitialiseNewTask+0x148>)
 8008d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	4a0c      	ldr	r2, [pc, #48]	@ (8008da4 <prvInitialiseNewTask+0x14c>)
 8008d74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	68f9      	ldr	r1, [r7, #12]
 8008d7a:	69b8      	ldr	r0, [r7, #24]
 8008d7c:	f001 fa34 	bl	800a1e8 <pxPortInitialiseStack>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d92:	bf00      	nop
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20004fec 	.word	0x20004fec
 8008da0:	20005054 	.word	0x20005054
 8008da4:	200050bc 	.word	0x200050bc

08008da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008db0:	f001 fb4a 	bl	800a448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008db4:	4b2d      	ldr	r3, [pc, #180]	@ (8008e6c <prvAddNewTaskToReadyList+0xc4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a2c      	ldr	r2, [pc, #176]	@ (8008e6c <prvAddNewTaskToReadyList+0xc4>)
 8008dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dcc:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <prvAddNewTaskToReadyList+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d110      	bne.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dd4:	f000 fcd0 	bl	8009778 <prvInitialiseTaskLists>
 8008dd8:	e00d      	b.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dda:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <prvAddNewTaskToReadyList+0xcc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008de2:	4b23      	ldr	r3, [pc, #140]	@ (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d802      	bhi.n	8008df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008df0:	4a1f      	ldr	r2, [pc, #124]	@ (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008df6:	4b20      	ldr	r3, [pc, #128]	@ (8008e78 <prvAddNewTaskToReadyList+0xd0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8008e78 <prvAddNewTaskToReadyList+0xd0>)
 8008dfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e00:	4b1d      	ldr	r3, [pc, #116]	@ (8008e78 <prvAddNewTaskToReadyList+0xd0>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008e7c <prvAddNewTaskToReadyList+0xd4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d903      	bls.n	8008e1c <prvAddNewTaskToReadyList+0x74>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e18:	4a18      	ldr	r2, [pc, #96]	@ (8008e7c <prvAddNewTaskToReadyList+0xd4>)
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e20:	4613      	mov	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4a15      	ldr	r2, [pc, #84]	@ (8008e80 <prvAddNewTaskToReadyList+0xd8>)
 8008e2a:	441a      	add	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7ff f82b 	bl	8007e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e38:	f001 fb38 	bl	800a4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <prvAddNewTaskToReadyList+0xcc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00e      	beq.n	8008e62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e44:	4b0a      	ldr	r3, [pc, #40]	@ (8008e70 <prvAddNewTaskToReadyList+0xc8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d207      	bcs.n	8008e62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e52:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <prvAddNewTaskToReadyList+0xdc>)
 8008e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000126c 	.word	0x2000126c
 8008e70:	20000d98 	.word	0x20000d98
 8008e74:	20001278 	.word	0x20001278
 8008e78:	20001288 	.word	0x20001288
 8008e7c:	20001274 	.word	0x20001274
 8008e80:	20000d9c 	.word	0x20000d9c
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d018      	beq.n	8008ecc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e9a:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <vTaskDelay+0x64>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <vTaskDelay+0x32>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008eba:	f000 f88b 	bl	8008fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fdc3 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ec6:	f000 f893 	bl	8008ff0 <xTaskResumeAll>
 8008eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d107      	bne.n	8008ee2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008ed2:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <vTaskDelay+0x68>)
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20001294 	.word	0x20001294
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	@ 0x28
 8008ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f02:	463a      	mov	r2, r7
 8008f04:	1d39      	adds	r1, r7, #4
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fd68 	bl	80079e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	9202      	str	r2, [sp, #8]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	460a      	mov	r2, r1
 8008f22:	4924      	ldr	r1, [pc, #144]	@ (8008fb4 <vTaskStartScheduler+0xc0>)
 8008f24:	4824      	ldr	r0, [pc, #144]	@ (8008fb8 <vTaskStartScheduler+0xc4>)
 8008f26:	f7ff fdf1 	bl	8008b0c <xTaskCreateStatic>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4a23      	ldr	r2, [pc, #140]	@ (8008fbc <vTaskStartScheduler+0xc8>)
 8008f2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f30:	4b22      	ldr	r3, [pc, #136]	@ (8008fbc <vTaskStartScheduler+0xc8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e001      	b.n	8008f42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f48:	f000 fdd4 	bl	8009af4 <xTimerCreateTimerTask>
 8008f4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d11b      	bne.n	8008f8c <vTaskStartScheduler+0x98>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	613b      	str	r3, [r7, #16]
}
 8008f66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f68:	4b15      	ldr	r3, [pc, #84]	@ (8008fc0 <vTaskStartScheduler+0xcc>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3354      	adds	r3, #84	@ 0x54
 8008f6e:	4a15      	ldr	r2, [pc, #84]	@ (8008fc4 <vTaskStartScheduler+0xd0>)
 8008f70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f72:	4b15      	ldr	r3, [pc, #84]	@ (8008fc8 <vTaskStartScheduler+0xd4>)
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f7a:	4b14      	ldr	r3, [pc, #80]	@ (8008fcc <vTaskStartScheduler+0xd8>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f80:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <vTaskStartScheduler+0xdc>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f86:	f001 f9bb 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f8a:	e00f      	b.n	8008fac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d10b      	bne.n	8008fac <vTaskStartScheduler+0xb8>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	e7fd      	b.n	8008fa8 <vTaskStartScheduler+0xb4>
}
 8008fac:	bf00      	nop
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	0800d7d8 	.word	0x0800d7d8
 8008fb8:	08009749 	.word	0x08009749
 8008fbc:	20001290 	.word	0x20001290
 8008fc0:	20000d98 	.word	0x20000d98
 8008fc4:	20000028 	.word	0x20000028
 8008fc8:	2000128c 	.word	0x2000128c
 8008fcc:	20001278 	.word	0x20001278
 8008fd0:	20001270 	.word	0x20001270

08008fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fd8:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <vTaskSuspendAll+0x18>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	4a03      	ldr	r2, [pc, #12]	@ (8008fec <vTaskSuspendAll+0x18>)
 8008fe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008fe2:	bf00      	nop
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	20001294 	.word	0x20001294

08008ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ffe:	4b42      	ldr	r3, [pc, #264]	@ (8009108 <xTaskResumeAll+0x118>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <xTaskResumeAll+0x2e>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	603b      	str	r3, [r7, #0]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800901e:	f001 fa13 	bl	800a448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009022:	4b39      	ldr	r3, [pc, #228]	@ (8009108 <xTaskResumeAll+0x118>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	4a37      	ldr	r2, [pc, #220]	@ (8009108 <xTaskResumeAll+0x118>)
 800902a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800902c:	4b36      	ldr	r3, [pc, #216]	@ (8009108 <xTaskResumeAll+0x118>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d162      	bne.n	80090fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009034:	4b35      	ldr	r3, [pc, #212]	@ (800910c <xTaskResumeAll+0x11c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d05e      	beq.n	80090fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800903c:	e02f      	b.n	800909e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903e:	4b34      	ldr	r3, [pc, #208]	@ (8009110 <xTaskResumeAll+0x120>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3318      	adds	r3, #24
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe ff7c 	bl	8007f48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe ff77 	bl	8007f48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905e:	4b2d      	ldr	r3, [pc, #180]	@ (8009114 <xTaskResumeAll+0x124>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d903      	bls.n	800906e <xTaskResumeAll+0x7e>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	4a2a      	ldr	r2, [pc, #168]	@ (8009114 <xTaskResumeAll+0x124>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a27      	ldr	r2, [pc, #156]	@ (8009118 <xTaskResumeAll+0x128>)
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f7fe ff02 	bl	8007e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908e:	4b23      	ldr	r3, [pc, #140]	@ (800911c <xTaskResumeAll+0x12c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	429a      	cmp	r2, r3
 8009096:	d302      	bcc.n	800909e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009098:	4b21      	ldr	r3, [pc, #132]	@ (8009120 <xTaskResumeAll+0x130>)
 800909a:	2201      	movs	r2, #1
 800909c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800909e:	4b1c      	ldr	r3, [pc, #112]	@ (8009110 <xTaskResumeAll+0x120>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1cb      	bne.n	800903e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090ac:	f000 fc08 	bl	80098c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009124 <xTaskResumeAll+0x134>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d010      	beq.n	80090de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090bc:	f000 f846 	bl	800914c <xTaskIncrementTick>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80090c6:	4b16      	ldr	r3, [pc, #88]	@ (8009120 <xTaskResumeAll+0x130>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f1      	bne.n	80090bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80090d8:	4b12      	ldr	r3, [pc, #72]	@ (8009124 <xTaskResumeAll+0x134>)
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090de:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <xTaskResumeAll+0x130>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090e6:	2301      	movs	r3, #1
 80090e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009128 <xTaskResumeAll+0x138>)
 80090ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090fa:	f001 f9d7 	bl	800a4ac <vPortExitCritical>

	return xAlreadyYielded;
 80090fe:	68bb      	ldr	r3, [r7, #8]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001294 	.word	0x20001294
 800910c:	2000126c 	.word	0x2000126c
 8009110:	2000122c 	.word	0x2000122c
 8009114:	20001274 	.word	0x20001274
 8009118:	20000d9c 	.word	0x20000d9c
 800911c:	20000d98 	.word	0x20000d98
 8009120:	20001280 	.word	0x20001280
 8009124:	2000127c 	.word	0x2000127c
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009132:	4b05      	ldr	r3, [pc, #20]	@ (8009148 <xTaskGetTickCount+0x1c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009138:	687b      	ldr	r3, [r7, #4]
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20001270 	.word	0x20001270

0800914c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009156:	4b4f      	ldr	r3, [pc, #316]	@ (8009294 <xTaskIncrementTick+0x148>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 8090 	bne.w	8009280 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009160:	4b4d      	ldr	r3, [pc, #308]	@ (8009298 <xTaskIncrementTick+0x14c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009168:	4a4b      	ldr	r2, [pc, #300]	@ (8009298 <xTaskIncrementTick+0x14c>)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d121      	bne.n	80091b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009174:	4b49      	ldr	r3, [pc, #292]	@ (800929c <xTaskIncrementTick+0x150>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <xTaskIncrementTick+0x4a>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	603b      	str	r3, [r7, #0]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xTaskIncrementTick+0x46>
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <xTaskIncrementTick+0x150>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	4b40      	ldr	r3, [pc, #256]	@ (80092a0 <xTaskIncrementTick+0x154>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a3e      	ldr	r2, [pc, #248]	@ (800929c <xTaskIncrementTick+0x150>)
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	4a3e      	ldr	r2, [pc, #248]	@ (80092a0 <xTaskIncrementTick+0x154>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	4b3e      	ldr	r3, [pc, #248]	@ (80092a4 <xTaskIncrementTick+0x158>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	4a3c      	ldr	r2, [pc, #240]	@ (80092a4 <xTaskIncrementTick+0x158>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	f000 fb84 	bl	80098c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091b8:	4b3b      	ldr	r3, [pc, #236]	@ (80092a8 <xTaskIncrementTick+0x15c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d349      	bcc.n	8009256 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c2:	4b36      	ldr	r3, [pc, #216]	@ (800929c <xTaskIncrementTick+0x150>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091cc:	4b36      	ldr	r3, [pc, #216]	@ (80092a8 <xTaskIncrementTick+0x15c>)
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	601a      	str	r2, [r3, #0]
					break;
 80091d4:	e03f      	b.n	8009256 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d6:	4b31      	ldr	r3, [pc, #196]	@ (800929c <xTaskIncrementTick+0x150>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091ee:	4a2e      	ldr	r2, [pc, #184]	@ (80092a8 <xTaskIncrementTick+0x15c>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091f4:	e02f      	b.n	8009256 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fea4 	bl	8007f48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	3318      	adds	r3, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fe9b 	bl	8007f48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009216:	4b25      	ldr	r3, [pc, #148]	@ (80092ac <xTaskIncrementTick+0x160>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d903      	bls.n	8009226 <xTaskIncrementTick+0xda>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009222:	4a22      	ldr	r2, [pc, #136]	@ (80092ac <xTaskIncrementTick+0x160>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4a1f      	ldr	r2, [pc, #124]	@ (80092b0 <xTaskIncrementTick+0x164>)
 8009234:	441a      	add	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f7fe fe26 	bl	8007e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009246:	4b1b      	ldr	r3, [pc, #108]	@ (80092b4 <xTaskIncrementTick+0x168>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924c:	429a      	cmp	r2, r3
 800924e:	d3b8      	bcc.n	80091c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009254:	e7b5      	b.n	80091c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009256:	4b17      	ldr	r3, [pc, #92]	@ (80092b4 <xTaskIncrementTick+0x168>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	4914      	ldr	r1, [pc, #80]	@ (80092b0 <xTaskIncrementTick+0x164>)
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d901      	bls.n	8009272 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009272:	4b11      	ldr	r3, [pc, #68]	@ (80092b8 <xTaskIncrementTick+0x16c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	e004      	b.n	800928a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <xTaskIncrementTick+0x170>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	4a0d      	ldr	r2, [pc, #52]	@ (80092bc <xTaskIncrementTick+0x170>)
 8009288:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800928a:	697b      	ldr	r3, [r7, #20]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20001294 	.word	0x20001294
 8009298:	20001270 	.word	0x20001270
 800929c:	20001224 	.word	0x20001224
 80092a0:	20001228 	.word	0x20001228
 80092a4:	20001284 	.word	0x20001284
 80092a8:	2000128c 	.word	0x2000128c
 80092ac:	20001274 	.word	0x20001274
 80092b0:	20000d9c 	.word	0x20000d9c
 80092b4:	20000d98 	.word	0x20000d98
 80092b8:	20001280 	.word	0x20001280
 80092bc:	2000127c 	.word	0x2000127c

080092c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009374 <vTaskSwitchContext+0xb4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009378 <vTaskSwitchContext+0xb8>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d4:	e047      	b.n	8009366 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80092d6:	4b28      	ldr	r3, [pc, #160]	@ (8009378 <vTaskSwitchContext+0xb8>)
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092dc:	4b27      	ldr	r3, [pc, #156]	@ (800937c <vTaskSwitchContext+0xbc>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e011      	b.n	8009308 <vTaskSwitchContext+0x48>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10b      	bne.n	8009302 <vTaskSwitchContext+0x42>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	607b      	str	r3, [r7, #4]
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	e7fd      	b.n	80092fe <vTaskSwitchContext+0x3e>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b01      	subs	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	491d      	ldr	r1, [pc, #116]	@ (8009380 <vTaskSwitchContext+0xc0>)
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0e3      	beq.n	80092e4 <vTaskSwitchContext+0x24>
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4a16      	ldr	r2, [pc, #88]	@ (8009380 <vTaskSwitchContext+0xc0>)
 8009328:	4413      	add	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	605a      	str	r2, [r3, #4]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	3308      	adds	r3, #8
 800933e:	429a      	cmp	r2, r3
 8009340:	d104      	bne.n	800934c <vTaskSwitchContext+0x8c>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	605a      	str	r2, [r3, #4]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	4a0c      	ldr	r2, [pc, #48]	@ (8009384 <vTaskSwitchContext+0xc4>)
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	4a09      	ldr	r2, [pc, #36]	@ (800937c <vTaskSwitchContext+0xbc>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800935c:	4b09      	ldr	r3, [pc, #36]	@ (8009384 <vTaskSwitchContext+0xc4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3354      	adds	r3, #84	@ 0x54
 8009362:	4a09      	ldr	r2, [pc, #36]	@ (8009388 <vTaskSwitchContext+0xc8>)
 8009364:	6013      	str	r3, [r2, #0]
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20001294 	.word	0x20001294
 8009378:	20001280 	.word	0x20001280
 800937c:	20001274 	.word	0x20001274
 8009380:	20000d9c 	.word	0x20000d9c
 8009384:	20000d98 	.word	0x20000d98
 8009388:	20000028 	.word	0x20000028

0800938c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093b4:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <vTaskPlaceOnEventList+0x48>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3318      	adds	r3, #24
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7fe fd8a 	bl	8007ed6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093c2:	2101      	movs	r1, #1
 80093c4:	6838      	ldr	r0, [r7, #0]
 80093c6:	f000 fb41 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000d98 	.word	0x20000d98

080093d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	617b      	str	r3, [r7, #20]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009402:	4b12      	ldr	r3, [pc, #72]	@ (800944c <vTaskPlaceOnUnorderedEventList+0x74>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10b      	bne.n	8009422 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	613b      	str	r3, [r7, #16]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009422:	4b0b      	ldr	r3, [pc, #44]	@ (8009450 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800942c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800942e:	4b08      	ldr	r3, [pc, #32]	@ (8009450 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7fe fd29 	bl	8007e8e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800943c:	2101      	movs	r1, #1
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fb04 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
}
 8009444:	bf00      	nop
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20001294 	.word	0x20001294
 8009450:	20000d98 	.word	0x20000d98

08009454 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	617b      	str	r3, [r7, #20]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800947e:	4b0a      	ldr	r3, [pc, #40]	@ (80094a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3318      	adds	r3, #24
 8009484:	4619      	mov	r1, r3
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7fe fd01 	bl	8007e8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295
 8009496:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	68b8      	ldr	r0, [r7, #8]
 800949c:	f000 fad6 	bl	8009a4c <prvAddCurrentTaskToDelayedList>
	}
 80094a0:	bf00      	nop
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000d98 	.word	0x20000d98

080094ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60fb      	str	r3, [r7, #12]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	3318      	adds	r3, #24
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fd32 	bl	8007f48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e4:	4b1d      	ldr	r3, [pc, #116]	@ (800955c <xTaskRemoveFromEventList+0xb0>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d11d      	bne.n	8009528 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fd29 	bl	8007f48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fa:	4b19      	ldr	r3, [pc, #100]	@ (8009560 <xTaskRemoveFromEventList+0xb4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d903      	bls.n	800950a <xTaskRemoveFromEventList+0x5e>
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009506:	4a16      	ldr	r2, [pc, #88]	@ (8009560 <xTaskRemoveFromEventList+0xb4>)
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4a13      	ldr	r2, [pc, #76]	@ (8009564 <xTaskRemoveFromEventList+0xb8>)
 8009518:	441a      	add	r2, r3
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3304      	adds	r3, #4
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f7fe fcb4 	bl	8007e8e <vListInsertEnd>
 8009526:	e005      	b.n	8009534 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3318      	adds	r3, #24
 800952c:	4619      	mov	r1, r3
 800952e:	480e      	ldr	r0, [pc, #56]	@ (8009568 <xTaskRemoveFromEventList+0xbc>)
 8009530:	f7fe fcad 	bl	8007e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009538:	4b0c      	ldr	r3, [pc, #48]	@ (800956c <xTaskRemoveFromEventList+0xc0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953e:	429a      	cmp	r2, r3
 8009540:	d905      	bls.n	800954e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009546:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <xTaskRemoveFromEventList+0xc4>)
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e001      	b.n	8009552 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20001294 	.word	0x20001294
 8009560:	20001274 	.word	0x20001274
 8009564:	20000d9c 	.word	0x20000d9c
 8009568:	2000122c 	.word	0x2000122c
 800956c:	20000d98 	.word	0x20000d98
 8009570:	20001280 	.word	0x20001280

08009574 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800957e:	4b2a      	ldr	r3, [pc, #168]	@ (8009628 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10b      	bne.n	800959e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	613b      	str	r3, [r7, #16]
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	e7fd      	b.n	800959a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe fcbb 	bl	8007f48 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe fcb6 	bl	8007f48 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e0:	4b12      	ldr	r3, [pc, #72]	@ (800962c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d903      	bls.n	80095f0 <vTaskRemoveFromUnorderedEventList+0x7c>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	4a0f      	ldr	r2, [pc, #60]	@ (800962c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80095fe:	441a      	add	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fc41 	bl	8007e8e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4b08      	ldr	r3, [pc, #32]	@ (8009634 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	429a      	cmp	r2, r3
 8009618:	d902      	bls.n	8009620 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800961a:	4b07      	ldr	r3, [pc, #28]	@ (8009638 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]
	}
}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20001294 	.word	0x20001294
 800962c:	20001274 	.word	0x20001274
 8009630:	20000d9c 	.word	0x20000d9c
 8009634:	20000d98 	.word	0x20000d98
 8009638:	20001280 	.word	0x20001280

0800963c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009644:	4b06      	ldr	r3, [pc, #24]	@ (8009660 <vTaskInternalSetTimeOutState+0x24>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800964c:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <vTaskInternalSetTimeOutState+0x28>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	605a      	str	r2, [r3, #4]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20001284 	.word	0x20001284
 8009664:	20001270 	.word	0x20001270

08009668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10b      	bne.n	8009690 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	613b      	str	r3, [r7, #16]
}
 800968a:	bf00      	nop
 800968c:	bf00      	nop
 800968e:	e7fd      	b.n	800968c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10b      	bne.n	80096ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	60fb      	str	r3, [r7, #12]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80096ae:	f000 fecb 	bl	800a448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009728 <xTaskCheckForTimeOut+0xc0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d102      	bne.n	80096d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61fb      	str	r3, [r7, #28]
 80096d0:	e023      	b.n	800971a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	4b15      	ldr	r3, [pc, #84]	@ (800972c <xTaskCheckForTimeOut+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d007      	beq.n	80096ee <xTaskCheckForTimeOut+0x86>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d302      	bcc.n	80096ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	e015      	b.n	800971a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d20b      	bcs.n	8009710 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	1ad2      	subs	r2, r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ff99 	bl	800963c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800970a:	2300      	movs	r3, #0
 800970c:	61fb      	str	r3, [r7, #28]
 800970e:	e004      	b.n	800971a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009716:	2301      	movs	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800971a:	f000 fec7 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 800971e:	69fb      	ldr	r3, [r7, #28]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3720      	adds	r7, #32
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20001270 	.word	0x20001270
 800972c:	20001284 	.word	0x20001284

08009730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009734:	4b03      	ldr	r3, [pc, #12]	@ (8009744 <vTaskMissedYield+0x14>)
 8009736:	2201      	movs	r2, #1
 8009738:	601a      	str	r2, [r3, #0]
}
 800973a:	bf00      	nop
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	20001280 	.word	0x20001280

08009748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009750:	f000 f852 	bl	80097f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009754:	4b06      	ldr	r3, [pc, #24]	@ (8009770 <prvIdleTask+0x28>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d9f9      	bls.n	8009750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800975c:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <prvIdleTask+0x2c>)
 800975e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800976c:	e7f0      	b.n	8009750 <prvIdleTask+0x8>
 800976e:	bf00      	nop
 8009770:	20000d9c 	.word	0x20000d9c
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800977e:	2300      	movs	r3, #0
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	e00c      	b.n	800979e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4a12      	ldr	r2, [pc, #72]	@ (80097d8 <prvInitialiseTaskLists+0x60>)
 8009790:	4413      	add	r3, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fb4e 	bl	8007e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3301      	adds	r3, #1
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b37      	cmp	r3, #55	@ 0x37
 80097a2:	d9ef      	bls.n	8009784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097a4:	480d      	ldr	r0, [pc, #52]	@ (80097dc <prvInitialiseTaskLists+0x64>)
 80097a6:	f7fe fb45 	bl	8007e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097aa:	480d      	ldr	r0, [pc, #52]	@ (80097e0 <prvInitialiseTaskLists+0x68>)
 80097ac:	f7fe fb42 	bl	8007e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097b0:	480c      	ldr	r0, [pc, #48]	@ (80097e4 <prvInitialiseTaskLists+0x6c>)
 80097b2:	f7fe fb3f 	bl	8007e34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097b6:	480c      	ldr	r0, [pc, #48]	@ (80097e8 <prvInitialiseTaskLists+0x70>)
 80097b8:	f7fe fb3c 	bl	8007e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097bc:	480b      	ldr	r0, [pc, #44]	@ (80097ec <prvInitialiseTaskLists+0x74>)
 80097be:	f7fe fb39 	bl	8007e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097c2:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <prvInitialiseTaskLists+0x78>)
 80097c4:	4a05      	ldr	r2, [pc, #20]	@ (80097dc <prvInitialiseTaskLists+0x64>)
 80097c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097c8:	4b0a      	ldr	r3, [pc, #40]	@ (80097f4 <prvInitialiseTaskLists+0x7c>)
 80097ca:	4a05      	ldr	r2, [pc, #20]	@ (80097e0 <prvInitialiseTaskLists+0x68>)
 80097cc:	601a      	str	r2, [r3, #0]
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000d9c 	.word	0x20000d9c
 80097dc:	200011fc 	.word	0x200011fc
 80097e0:	20001210 	.word	0x20001210
 80097e4:	2000122c 	.word	0x2000122c
 80097e8:	20001240 	.word	0x20001240
 80097ec:	20001258 	.word	0x20001258
 80097f0:	20001224 	.word	0x20001224
 80097f4:	20001228 	.word	0x20001228

080097f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097fe:	e019      	b.n	8009834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009800:	f000 fe22 	bl	800a448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009804:	4b10      	ldr	r3, [pc, #64]	@ (8009848 <prvCheckTasksWaitingTermination+0x50>)
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fb99 	bl	8007f48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <prvCheckTasksWaitingTermination+0x54>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3b01      	subs	r3, #1
 800981c:	4a0b      	ldr	r2, [pc, #44]	@ (800984c <prvCheckTasksWaitingTermination+0x54>)
 800981e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009820:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <prvCheckTasksWaitingTermination+0x58>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3b01      	subs	r3, #1
 8009826:	4a0a      	ldr	r2, [pc, #40]	@ (8009850 <prvCheckTasksWaitingTermination+0x58>)
 8009828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800982a:	f000 fe3f 	bl	800a4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f810 	bl	8009854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009834:	4b06      	ldr	r3, [pc, #24]	@ (8009850 <prvCheckTasksWaitingTermination+0x58>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e1      	bne.n	8009800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800983c:	bf00      	nop
 800983e:	bf00      	nop
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20001240 	.word	0x20001240
 800984c:	2000126c 	.word	0x2000126c
 8009850:	20001254 	.word	0x20001254

08009854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3354      	adds	r3, #84	@ 0x54
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fe7b 	bl	800b55c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800986c:	2b00      	cmp	r3, #0
 800986e:	d108      	bne.n	8009882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	4618      	mov	r0, r3
 8009876:	f000 ffd7 	bl	800a828 <vPortFree>
				vPortFree( pxTCB );
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 ffd4 	bl	800a828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009880:	e019      	b.n	80098b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009888:	2b01      	cmp	r3, #1
 800988a:	d103      	bne.n	8009894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 ffcb 	bl	800a828 <vPortFree>
	}
 8009892:	e010      	b.n	80098b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800989a:	2b02      	cmp	r3, #2
 800989c:	d00b      	beq.n	80098b6 <prvDeleteTCB+0x62>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	e7fd      	b.n	80098b2 <prvDeleteTCB+0x5e>
	}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c6:	4b0c      	ldr	r3, [pc, #48]	@ (80098f8 <prvResetNextTaskUnblockTime+0x38>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <prvResetNextTaskUnblockTime+0x3c>)
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098d8:	e008      	b.n	80098ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098da:	4b07      	ldr	r3, [pc, #28]	@ (80098f8 <prvResetNextTaskUnblockTime+0x38>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	4a04      	ldr	r2, [pc, #16]	@ (80098fc <prvResetNextTaskUnblockTime+0x3c>)
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20001224 	.word	0x20001224
 80098fc:	2000128c 	.word	0x2000128c

08009900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009906:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <xTaskGetSchedulerState+0x34>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800990e:	2301      	movs	r3, #1
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	e008      	b.n	8009926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009914:	4b08      	ldr	r3, [pc, #32]	@ (8009938 <xTaskGetSchedulerState+0x38>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800991c:	2302      	movs	r3, #2
 800991e:	607b      	str	r3, [r7, #4]
 8009920:	e001      	b.n	8009926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009922:	2300      	movs	r3, #0
 8009924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009926:	687b      	ldr	r3, [r7, #4]
	}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	20001278 	.word	0x20001278
 8009938:	20001294 	.word	0x20001294

0800993c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d058      	beq.n	8009a04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009952:	4b2f      	ldr	r3, [pc, #188]	@ (8009a10 <xTaskPriorityDisinherit+0xd4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	429a      	cmp	r2, r3
 800995a:	d00b      	beq.n	8009974 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	60fb      	str	r3, [r7, #12]
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009998:	1e5a      	subs	r2, r3, #1
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d02c      	beq.n	8009a04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d128      	bne.n	8009a04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fac6 	bl	8007f48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009a14 <xTaskPriorityDisinherit+0xd8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d903      	bls.n	80099e4 <xTaskPriorityDisinherit+0xa8>
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009a14 <xTaskPriorityDisinherit+0xd8>)
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4a09      	ldr	r2, [pc, #36]	@ (8009a18 <xTaskPriorityDisinherit+0xdc>)
 80099f2:	441a      	add	r2, r3
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	3304      	adds	r3, #4
 80099f8:	4619      	mov	r1, r3
 80099fa:	4610      	mov	r0, r2
 80099fc:	f7fe fa47 	bl	8007e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a04:	697b      	ldr	r3, [r7, #20]
	}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000d98 	.word	0x20000d98
 8009a14:	20001274 	.word	0x20001274
 8009a18:	20000d9c 	.word	0x20000d9c

08009a1c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009a22:	4b09      	ldr	r3, [pc, #36]	@ (8009a48 <uxTaskResetEventItemValue+0x2c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <uxTaskResetEventItemValue+0x2c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a30:	4b05      	ldr	r3, [pc, #20]	@ (8009a48 <uxTaskResetEventItemValue+0x2c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8009a38:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009a3a:	687b      	ldr	r3, [r7, #4]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	20000d98 	.word	0x20000d98

08009a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a56:	4b21      	ldr	r3, [pc, #132]	@ (8009adc <prvAddCurrentTaskToDelayedList+0x90>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5c:	4b20      	ldr	r3, [pc, #128]	@ (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fa70 	bl	8007f48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d10a      	bne.n	8009a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a76:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4819      	ldr	r0, [pc, #100]	@ (8009ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a80:	f7fe fa05 	bl	8007e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a84:	e026      	b.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a8e:	4b14      	ldr	r3, [pc, #80]	@ (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d209      	bcs.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a9e:	4b12      	ldr	r3, [pc, #72]	@ (8009ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fa13 	bl	8007ed6 <vListInsert>
}
 8009ab0:	e010      	b.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8009aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fa09 	bl	8007ed6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8009af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d202      	bcs.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ace:	4a08      	ldr	r2, [pc, #32]	@ (8009af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6013      	str	r3, [r2, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20001270 	.word	0x20001270
 8009ae0:	20000d98 	.word	0x20000d98
 8009ae4:	20001258 	.word	0x20001258
 8009ae8:	20001228 	.word	0x20001228
 8009aec:	20001224 	.word	0x20001224
 8009af0:	2000128c 	.word	0x2000128c

08009af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	@ 0x28
 8009af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009afe:	f000 fb13 	bl	800a128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b02:	4b1d      	ldr	r3, [pc, #116]	@ (8009b78 <xTimerCreateTimerTask+0x84>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d021      	beq.n	8009b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b12:	1d3a      	adds	r2, r7, #4
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fd ff79 	bl	8007a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	9202      	str	r2, [sp, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2300      	movs	r3, #0
 8009b32:	460a      	mov	r2, r1
 8009b34:	4911      	ldr	r1, [pc, #68]	@ (8009b7c <xTimerCreateTimerTask+0x88>)
 8009b36:	4812      	ldr	r0, [pc, #72]	@ (8009b80 <xTimerCreateTimerTask+0x8c>)
 8009b38:	f7fe ffe8 	bl	8008b0c <xTaskCreateStatic>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <xTimerCreateTimerTask+0x90>)
 8009b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b42:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <xTimerCreateTimerTask+0x90>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10b      	bne.n	8009b6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	613b      	str	r3, [r7, #16]
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b6c:	697b      	ldr	r3, [r7, #20]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200012c8 	.word	0x200012c8
 8009b7c:	0800d7e0 	.word	0x0800d7e0
 8009b80:	08009cc1 	.word	0x08009cc1
 8009b84:	200012cc 	.word	0x200012cc

08009b88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	@ 0x28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10b      	bne.n	8009bb8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	623b      	str	r3, [r7, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bb8:	4b19      	ldr	r3, [pc, #100]	@ (8009c20 <xTimerGenericCommand+0x98>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d02a      	beq.n	8009c16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	dc18      	bgt.n	8009c04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bd2:	f7ff fe95 	bl	8009900 <xTaskGetSchedulerState>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d109      	bne.n	8009bf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bdc:	4b10      	ldr	r3, [pc, #64]	@ (8009c20 <xTimerGenericCommand+0x98>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	f107 0110 	add.w	r1, r7, #16
 8009be4:	2300      	movs	r3, #0
 8009be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009be8:	f7fe fb1e 	bl	8008228 <xQueueGenericSend>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bee:	e012      	b.n	8009c16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <xTimerGenericCommand+0x98>)
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f107 0110 	add.w	r1, r7, #16
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f7fe fb14 	bl	8008228 <xQueueGenericSend>
 8009c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c02:	e008      	b.n	8009c16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c04:	4b06      	ldr	r3, [pc, #24]	@ (8009c20 <xTimerGenericCommand+0x98>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	f107 0110 	add.w	r1, r7, #16
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	f7fe fc0c 	bl	800842c <xQueueGenericSendFromISR>
 8009c14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3728      	adds	r7, #40	@ 0x28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	200012c8 	.word	0x200012c8

08009c24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c2e:	4b23      	ldr	r3, [pc, #140]	@ (8009cbc <prvProcessExpiredTimer+0x98>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe f983 	bl	8007f48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d023      	beq.n	8009c98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	699a      	ldr	r2, [r3, #24]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	18d1      	adds	r1, r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	6978      	ldr	r0, [r7, #20]
 8009c5e:	f000 f8d5 	bl	8009e0c <prvInsertTimerInActiveList>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d020      	beq.n	8009caa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	2100      	movs	r1, #0
 8009c72:	6978      	ldr	r0, [r7, #20]
 8009c74:	f7ff ff88 	bl	8009b88 <xTimerGenericCommand>
 8009c78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d114      	bne.n	8009caa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60fb      	str	r3, [r7, #12]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c9e:	f023 0301 	bic.w	r3, r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	6978      	ldr	r0, [r7, #20]
 8009cb0:	4798      	blx	r3
}
 8009cb2:	bf00      	nop
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200012c0 	.word	0x200012c0

08009cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 f859 	bl	8009d84 <prvGetNextExpireTime>
 8009cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f805 	bl	8009ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cde:	f000 f8d7 	bl	8009e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ce2:	bf00      	nop
 8009ce4:	e7f0      	b.n	8009cc8 <prvTimerTask+0x8>
	...

08009ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cf2:	f7ff f96f 	bl	8008fd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f866 	bl	8009dcc <prvSampleTimeNow>
 8009d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d130      	bne.n	8009d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <prvProcessTimerOrBlockTask+0x3c>
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d806      	bhi.n	8009d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d16:	f7ff f96b 	bl	8008ff0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff ff81 	bl	8009c24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d22:	e024      	b.n	8009d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d008      	beq.n	8009d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d2a:	4b13      	ldr	r3, [pc, #76]	@ (8009d78 <prvProcessTimerOrBlockTask+0x90>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <prvProcessTimerOrBlockTask+0x50>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e000      	b.n	8009d3a <prvProcessTimerOrBlockTask+0x52>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d7c <prvProcessTimerOrBlockTask+0x94>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f7fe feab 	bl	8008aa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d4e:	f7ff f94f 	bl	8008ff0 <xTaskResumeAll>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d58:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <prvProcessTimerOrBlockTask+0x98>)
 8009d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	f3bf 8f6f 	isb	sy
}
 8009d68:	e001      	b.n	8009d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d6a:	f7ff f941 	bl	8008ff0 <xTaskResumeAll>
}
 8009d6e:	bf00      	nop
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	200012c4 	.word	0x200012c4
 8009d7c:	200012c8 	.word	0x200012c8
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc8 <prvGetNextExpireTime+0x44>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <prvGetNextExpireTime+0x16>
 8009d96:	2201      	movs	r2, #1
 8009d98:	e000      	b.n	8009d9c <prvGetNextExpireTime+0x18>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009da8:	4b07      	ldr	r3, [pc, #28]	@ (8009dc8 <prvGetNextExpireTime+0x44>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e001      	b.n	8009db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009db8:	68fb      	ldr	r3, [r7, #12]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	200012c0 	.word	0x200012c0

08009dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dd4:	f7ff f9aa 	bl	800912c <xTaskGetTickCount>
 8009dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dda:	4b0b      	ldr	r3, [pc, #44]	@ (8009e08 <prvSampleTimeNow+0x3c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d205      	bcs.n	8009df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009de4:	f000 f93a 	bl	800a05c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e002      	b.n	8009df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009df6:	4a04      	ldr	r2, [pc, #16]	@ (8009e08 <prvSampleTimeNow+0x3c>)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	200012d0 	.word	0x200012d0

08009e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d812      	bhi.n	8009e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d302      	bcc.n	8009e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e40:	2301      	movs	r3, #1
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e01b      	b.n	8009e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e46:	4b10      	ldr	r3, [pc, #64]	@ (8009e88 <prvInsertTimerInActiveList+0x7c>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7fe f840 	bl	8007ed6 <vListInsert>
 8009e56:	e012      	b.n	8009e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d206      	bcs.n	8009e6e <prvInsertTimerInActiveList+0x62>
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d302      	bcc.n	8009e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	e007      	b.n	8009e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e6e:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <prvInsertTimerInActiveList+0x80>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f7fe f82c 	bl	8007ed6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e7e:	697b      	ldr	r3, [r7, #20]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	200012c4 	.word	0x200012c4
 8009e8c:	200012c0 	.word	0x200012c0

08009e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08e      	sub	sp, #56	@ 0x38
 8009e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e96:	e0ce      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da19      	bge.n	8009ed2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e9e:	1d3b      	adds	r3, r7, #4
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10b      	bne.n	8009ec2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	61fb      	str	r3, [r7, #28]
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	e7fd      	b.n	8009ebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ec8:	6850      	ldr	r0, [r2, #4]
 8009eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ecc:	6892      	ldr	r2, [r2, #8]
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f2c0 80ae 	blt.w	800a036 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d004      	beq.n	8009ef0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe f82c 	bl	8007f48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff ff6a 	bl	8009dcc <prvSampleTimeNow>
 8009ef8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	f200 8097 	bhi.w	800a030 <prvProcessReceivedCommands+0x1a0>
 8009f02:	a201      	add	r2, pc, #4	@ (adr r2, 8009f08 <prvProcessReceivedCommands+0x78>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009fa7 	.word	0x08009fa7
 8009f18:	08009fbb 	.word	0x08009fbb
 8009f1c:	0800a007 	.word	0x0800a007
 8009f20:	08009f31 	.word	0x08009f31
 8009f24:	08009f31 	.word	0x08009f31
 8009f28:	08009fa7 	.word	0x08009fa7
 8009f2c:	08009fbb 	.word	0x08009fbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	18d1      	adds	r1, r2, r3
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f50:	f7ff ff5c 	bl	8009e0c <prvInsertTimerInActiveList>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d06c      	beq.n	800a034 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d061      	beq.n	800a034 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	441a      	add	r2, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	2100      	movs	r1, #0
 8009f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f82:	f7ff fe01 	bl	8009b88 <xTimerGenericCommand>
 8009f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d152      	bne.n	800a034 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	61bb      	str	r3, [r7, #24]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fb8:	e03d      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fc0:	f043 0301 	orr.w	r3, r3, #1
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	617b      	str	r3, [r7, #20]
}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	e7fd      	b.n	8009fee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	18d1      	adds	r1, r2, r3
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a000:	f7ff ff04 	bl	8009e0c <prvInsertTimerInActiveList>
					break;
 800a004:	e017      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a016:	f000 fc07 	bl	800a828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a01a:	e00c      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	b2da      	uxtb	r2, r3
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a02e:	e002      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a030:	bf00      	nop
 800a032:	e000      	b.n	800a036 <prvProcessReceivedCommands+0x1a6>
					break;
 800a034:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a036:	4b08      	ldr	r3, [pc, #32]	@ (800a058 <prvProcessReceivedCommands+0x1c8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1d39      	adds	r1, r7, #4
 800a03c:	2200      	movs	r2, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fa92 	bl	8008568 <xQueueReceive>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	f47f af26 	bne.w	8009e98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	3730      	adds	r7, #48	@ 0x30
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200012c8 	.word	0x200012c8

0800a05c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a062:	e049      	b.n	800a0f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a064:	4b2e      	ldr	r3, [pc, #184]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06e:	4b2c      	ldr	r3, [pc, #176]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd ff63 	bl	8007f48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d02f      	beq.n	800a0f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d90e      	bls.n	800a0c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fd ff08 	bl	8007ed6 <vListInsert>
 800a0c6:	e017      	b.n	800a0f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7ff fd58 	bl	8009b88 <xTimerGenericCommand>
 800a0d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10b      	bne.n	800a0f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	603b      	str	r3, [r7, #0]
}
 800a0f2:	bf00      	nop
 800a0f4:	bf00      	nop
 800a0f6:	e7fd      	b.n	800a0f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0f8:	4b09      	ldr	r3, [pc, #36]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1b0      	bne.n	800a064 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a102:	4b07      	ldr	r3, [pc, #28]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a108:	4b06      	ldr	r3, [pc, #24]	@ (800a124 <prvSwitchTimerLists+0xc8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a04      	ldr	r2, [pc, #16]	@ (800a120 <prvSwitchTimerLists+0xc4>)
 800a10e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a110:	4a04      	ldr	r2, [pc, #16]	@ (800a124 <prvSwitchTimerLists+0xc8>)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	6013      	str	r3, [r2, #0]
}
 800a116:	bf00      	nop
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200012c0 	.word	0x200012c0
 800a124:	200012c4 	.word	0x200012c4

0800a128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a12e:	f000 f98b 	bl	800a448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a132:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <prvCheckForValidListAndQueue+0x60>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d120      	bne.n	800a17c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a13a:	4814      	ldr	r0, [pc, #80]	@ (800a18c <prvCheckForValidListAndQueue+0x64>)
 800a13c:	f7fd fe7a 	bl	8007e34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a140:	4813      	ldr	r0, [pc, #76]	@ (800a190 <prvCheckForValidListAndQueue+0x68>)
 800a142:	f7fd fe77 	bl	8007e34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <prvCheckForValidListAndQueue+0x6c>)
 800a148:	4a10      	ldr	r2, [pc, #64]	@ (800a18c <prvCheckForValidListAndQueue+0x64>)
 800a14a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a14c:	4b12      	ldr	r3, [pc, #72]	@ (800a198 <prvCheckForValidListAndQueue+0x70>)
 800a14e:	4a10      	ldr	r2, [pc, #64]	@ (800a190 <prvCheckForValidListAndQueue+0x68>)
 800a150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a152:	2300      	movs	r3, #0
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	4b11      	ldr	r3, [pc, #68]	@ (800a19c <prvCheckForValidListAndQueue+0x74>)
 800a158:	4a11      	ldr	r2, [pc, #68]	@ (800a1a0 <prvCheckForValidListAndQueue+0x78>)
 800a15a:	2110      	movs	r1, #16
 800a15c:	200a      	movs	r0, #10
 800a15e:	f7fd ff87 	bl	8008070 <xQueueGenericCreateStatic>
 800a162:	4603      	mov	r3, r0
 800a164:	4a08      	ldr	r2, [pc, #32]	@ (800a188 <prvCheckForValidListAndQueue+0x60>)
 800a166:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a168:	4b07      	ldr	r3, [pc, #28]	@ (800a188 <prvCheckForValidListAndQueue+0x60>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d005      	beq.n	800a17c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a170:	4b05      	ldr	r3, [pc, #20]	@ (800a188 <prvCheckForValidListAndQueue+0x60>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	490b      	ldr	r1, [pc, #44]	@ (800a1a4 <prvCheckForValidListAndQueue+0x7c>)
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fc6a 	bl	8008a50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a17c:	f000 f996 	bl	800a4ac <vPortExitCritical>
}
 800a180:	bf00      	nop
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200012c8 	.word	0x200012c8
 800a18c:	20001298 	.word	0x20001298
 800a190:	200012ac 	.word	0x200012ac
 800a194:	200012c0 	.word	0x200012c0
 800a198:	200012c4 	.word	0x200012c4
 800a19c:	20001374 	.word	0x20001374
 800a1a0:	200012d4 	.word	0x200012d4
 800a1a4:	0800d7e8 	.word	0x0800d7e8

0800a1a8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	@ 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a1b6:	f06f 0301 	mvn.w	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1c8:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <xTimerPendFunctionCallFromISR+0x3c>)
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	f107 0114 	add.w	r1, r7, #20
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	f7fe f92a 	bl	800842c <xQueueGenericSendFromISR>
 800a1d8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3728      	adds	r7, #40	@ 0x28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200012c8 	.word	0x200012c8

0800a1e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3b04      	subs	r3, #4
 800a1f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3b04      	subs	r3, #4
 800a206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f023 0201 	bic.w	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b04      	subs	r3, #4
 800a216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a218:	4a0c      	ldr	r2, [pc, #48]	@ (800a24c <pxPortInitialiseStack+0x64>)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b14      	subs	r3, #20
 800a222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3b04      	subs	r3, #4
 800a22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f06f 0202 	mvn.w	r2, #2
 800a236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3b20      	subs	r3, #32
 800a23c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a23e:	68fb      	ldr	r3, [r7, #12]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	0800a251 	.word	0x0800a251

0800a250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <prvTaskExitError+0x58>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a262:	d00b      	beq.n	800a27c <prvTaskExitError+0x2c>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	60fb      	str	r3, [r7, #12]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <prvTaskExitError+0x28>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60bb      	str	r3, [r7, #8]
}
 800a28e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a290:	bf00      	nop
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0fc      	beq.n	800a292 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20000018 	.word	0x20000018
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	20000d98 	.word	0x20000d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	@ (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b47      	ldr	r3, [pc, #284]	@ (800a424 <xPortStartScheduler+0x124>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a47      	ldr	r2, [pc, #284]	@ (800a428 <xPortStartScheduler+0x128>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10b      	bne.n	800a328 <xPortStartScheduler+0x28>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a328:	4b3e      	ldr	r3, [pc, #248]	@ (800a424 <xPortStartScheduler+0x124>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a3f      	ldr	r2, [pc, #252]	@ (800a42c <xPortStartScheduler+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10b      	bne.n	800a34a <xPortStartScheduler+0x4a>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a34a:	4b39      	ldr	r3, [pc, #228]	@ (800a430 <xPortStartScheduler+0x130>)
 800a34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	22ff      	movs	r2, #255	@ 0xff
 800a35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <xPortStartScheduler+0x134>)
 800a370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a372:	4b31      	ldr	r3, [pc, #196]	@ (800a438 <xPortStartScheduler+0x138>)
 800a374:	2207      	movs	r2, #7
 800a376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a378:	e009      	b.n	800a38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a37a:	4b2f      	ldr	r3, [pc, #188]	@ (800a438 <xPortStartScheduler+0x138>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4a2d      	ldr	r2, [pc, #180]	@ (800a438 <xPortStartScheduler+0x138>)
 800a382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a396:	2b80      	cmp	r3, #128	@ 0x80
 800a398:	d0ef      	beq.n	800a37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a39a:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <xPortStartScheduler+0x138>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f1c3 0307 	rsb	r3, r3, #7
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d00b      	beq.n	800a3be <xPortStartScheduler+0xbe>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60bb      	str	r3, [r7, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3be:	4b1e      	ldr	r3, [pc, #120]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3dc:	4b17      	ldr	r3, [pc, #92]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a16      	ldr	r2, [pc, #88]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3e8:	4b14      	ldr	r3, [pc, #80]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a13      	ldr	r2, [pc, #76]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3f4:	f000 f8da 	bl	800a5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <xPortStartScheduler+0x140>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3fe:	f000 f8f9 	bl	800a5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <xPortStartScheduler+0x144>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a0f      	ldr	r2, [pc, #60]	@ (800a444 <xPortStartScheduler+0x144>)
 800a408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a40e:	f7ff ff63 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a412:	f7fe ff55 	bl	80092c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a416:	f7ff ff1b 	bl	800a250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	e000ed00 	.word	0xe000ed00
 800a428:	410fc271 	.word	0x410fc271
 800a42c:	410fc270 	.word	0x410fc270
 800a430:	e000e400 	.word	0xe000e400
 800a434:	200013c4 	.word	0x200013c4
 800a438:	200013c8 	.word	0x200013c8
 800a43c:	e000ed20 	.word	0xe000ed20
 800a440:	20000018 	.word	0x20000018
 800a444:	e000ef34 	.word	0xe000ef34

0800a448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <vPortEnterCritical+0x60>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <vPortEnterCritical+0x4e>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	603b      	str	r3, [r7, #0]
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	e7fd      	b.n	800a492 <vPortEnterCritical+0x4a>
	}
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000018 	.word	0x20000018
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4b2:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	607b      	str	r3, [r7, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	4a08      	ldr	r2, [pc, #32]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <vPortExitCritical+0x44>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
}
 800a4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20000018 	.word	0x20000018

0800a500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a500:	f3ef 8009 	mrs	r0, PSP
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <pxCurrentTCBConst>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f01e 0f10 	tst.w	lr, #16
 800a510:	bf08      	it	eq
 800a512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a524:	f380 8811 	msr	BASEPRI, r0
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f7fe fec6 	bl	80092c0 <vTaskSwitchContext>
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f380 8811 	msr	BASEPRI, r0
 800a53c:	bc09      	pop	{r0, r3}
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	6808      	ldr	r0, [r1, #0]
 800a542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a546:	f01e 0f10 	tst.w	lr, #16
 800a54a:	bf08      	it	eq
 800a54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a550:	f380 8809 	msr	PSP, r0
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst>:
 800a560:	20000d98 	.word	0x20000d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
}
 800a580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a582:	f7fe fde3 	bl	800914c <xTaskIncrementTick>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58c:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <xPortSysTickHandler+0x40>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <vPortSetupTimerInterrupt+0x38>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ec <vPortSetupTimerInterrupt+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <vPortSetupTimerInterrupt+0x44>)
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e010 	.word	0xe000e010
 800a5e4:	e000e018 	.word	0xe000e018
 800a5e8:	2000000c 	.word	0x2000000c
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	e000e014 	.word	0xe000e014

0800a5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a604 <vPortEnableVFP+0x10>
 800a5f8:	6801      	ldr	r1, [r0, #0]
 800a5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5fe:	6001      	str	r1, [r0, #0]
 800a600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a602:	bf00      	nop
 800a604:	e000ed88 	.word	0xe000ed88

0800a608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a60e:	f3ef 8305 	mrs	r3, IPSR
 800a612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d915      	bls.n	800a646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a61a:	4a18      	ldr	r2, [pc, #96]	@ (800a67c <vPortValidateInterruptPriority+0x74>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a624:	4b16      	ldr	r3, [pc, #88]	@ (800a680 <vPortValidateInterruptPriority+0x78>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	7afa      	ldrb	r2, [r7, #11]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20b      	bcs.n	800a646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a646:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <vPortValidateInterruptPriority+0x7c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a64e:	4b0e      	ldr	r3, [pc, #56]	@ (800a688 <vPortValidateInterruptPriority+0x80>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d90b      	bls.n	800a66e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	603b      	str	r3, [r7, #0]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <vPortValidateInterruptPriority+0x62>
	}
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	e000e3f0 	.word	0xe000e3f0
 800a680:	200013c4 	.word	0x200013c4
 800a684:	e000ed0c 	.word	0xe000ed0c
 800a688:	200013c8 	.word	0x200013c8

0800a68c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	@ 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a698:	f7fe fc9c 	bl	8008fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a69c:	4b5c      	ldr	r3, [pc, #368]	@ (800a810 <pvPortMalloc+0x184>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6a4:	f000 f924 	bl	800a8f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <pvPortMalloc+0x188>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 8095 	bne.w	800a7e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01e      	beq.n	800a6fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6bc:	2208      	movs	r2, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d015      	beq.n	800a6fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <pvPortMalloc+0x6e>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06f      	beq.n	800a7e0 <pvPortMalloc+0x154>
 800a700:	4b45      	ldr	r3, [pc, #276]	@ (800a818 <pvPortMalloc+0x18c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d86a      	bhi.n	800a7e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a70a:	4b44      	ldr	r3, [pc, #272]	@ (800a81c <pvPortMalloc+0x190>)
 800a70c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a70e:	4b43      	ldr	r3, [pc, #268]	@ (800a81c <pvPortMalloc+0x190>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a714:	e004      	b.n	800a720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	429a      	cmp	r2, r3
 800a728:	d903      	bls.n	800a732 <pvPortMalloc+0xa6>
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f1      	bne.n	800a716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a732:	4b37      	ldr	r3, [pc, #220]	@ (800a810 <pvPortMalloc+0x184>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a738:	429a      	cmp	r2, r3
 800a73a:	d051      	beq.n	800a7e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2208      	movs	r2, #8
 800a742:	4413      	add	r3, r2
 800a744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	2308      	movs	r3, #8
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d920      	bls.n	800a7a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <pvPortMalloc+0xfc>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a79a:	69b8      	ldr	r0, [r7, #24]
 800a79c:	f000 f90a 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a820 <pvPortMalloc+0x194>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d203      	bcs.n	800a7c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ba:	4b17      	ldr	r3, [pc, #92]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a18      	ldr	r2, [pc, #96]	@ (800a820 <pvPortMalloc+0x194>)
 800a7c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <pvPortMalloc+0x188>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7d6:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <pvPortMalloc+0x198>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4a11      	ldr	r2, [pc, #68]	@ (800a824 <pvPortMalloc+0x198>)
 800a7de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7e0:	f7fe fc06 	bl	8008ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <pvPortMalloc+0x17a>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <pvPortMalloc+0x176>
	return pvReturn;
 800a806:	69fb      	ldr	r3, [r7, #28]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3728      	adds	r7, #40	@ 0x28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20004fd4 	.word	0x20004fd4
 800a814:	20004fe8 	.word	0x20004fe8
 800a818:	20004fd8 	.word	0x20004fd8
 800a81c:	20004fcc 	.word	0x20004fcc
 800a820:	20004fdc 	.word	0x20004fdc
 800a824:	20004fe0 	.word	0x20004fe0

0800a828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d04f      	beq.n	800a8da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a83a:	2308      	movs	r3, #8
 800a83c:	425b      	negs	r3, r3
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4413      	add	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	4b25      	ldr	r3, [pc, #148]	@ (800a8e4 <vPortFree+0xbc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4013      	ands	r3, r2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10b      	bne.n	800a86e <vPortFree+0x46>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	60fb      	str	r3, [r7, #12]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <vPortFree+0x66>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	4b14      	ldr	r3, [pc, #80]	@ (800a8e4 <vPortFree+0xbc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4013      	ands	r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01e      	beq.n	800a8da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11a      	bne.n	800a8da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <vPortFree+0xbc>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	401a      	ands	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8b4:	f7fe fb8e 	bl	8008fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <vPortFree+0xc0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <vPortFree+0xc0>)
 800a8c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f000 f874 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8cc:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <vPortFree+0xc4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	4a06      	ldr	r2, [pc, #24]	@ (800a8ec <vPortFree+0xc4>)
 800a8d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8d6:	f7fe fb8b 	bl	8008ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8da:	bf00      	nop
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20004fe8 	.word	0x20004fe8
 800a8e8:	20004fd8 	.word	0x20004fd8
 800a8ec:	20004fe4 	.word	0x20004fe4

0800a8f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a8fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8fc:	4b27      	ldr	r3, [pc, #156]	@ (800a99c <prvHeapInit+0xac>)
 800a8fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00c      	beq.n	800a924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3307      	adds	r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0307 	bic.w	r3, r3, #7
 800a916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	4a1f      	ldr	r2, [pc, #124]	@ (800a99c <prvHeapInit+0xac>)
 800a920:	4413      	add	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a92e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a930:	2200      	movs	r2, #0
 800a932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4413      	add	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a93c:	2208      	movs	r2, #8
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a15      	ldr	r2, [pc, #84]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a952:	4b14      	ldr	r3, [pc, #80]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a95a:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	1ad2      	subs	r2, r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a970:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a8 <prvHeapInit+0xb8>)
 800a97e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a09      	ldr	r2, [pc, #36]	@ (800a9ac <prvHeapInit+0xbc>)
 800a986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a988:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <prvHeapInit+0xc0>)
 800a98a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	200013cc 	.word	0x200013cc
 800a9a0:	20004fcc 	.word	0x20004fcc
 800a9a4:	20004fd4 	.word	0x20004fd4
 800a9a8:	20004fdc 	.word	0x20004fdc
 800a9ac:	20004fd8 	.word	0x20004fd8
 800a9b0:	20004fe8 	.word	0x20004fe8

0800a9b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9bc:	4b28      	ldr	r3, [pc, #160]	@ (800aa60 <prvInsertBlockIntoFreeList+0xac>)
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e002      	b.n	800a9c8 <prvInsertBlockIntoFreeList+0x14>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d8f7      	bhi.n	800a9c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4413      	add	r3, r2
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d108      	bne.n	800a9f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	441a      	add	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d118      	bne.n	800aa3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4b15      	ldr	r3, [pc, #84]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d00d      	beq.n	800aa32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	e008      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e003      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d002      	beq.n	800aa52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20004fcc 	.word	0x20004fcc
 800aa64:	20004fd4 	.word	0x20004fd4

0800aa68 <__cvt>:
 800aa68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	ec57 6b10 	vmov	r6, r7, d0
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	460c      	mov	r4, r1
 800aa74:	4619      	mov	r1, r3
 800aa76:	463b      	mov	r3, r7
 800aa78:	bfbb      	ittet	lt
 800aa7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa7e:	461f      	movlt	r7, r3
 800aa80:	2300      	movge	r3, #0
 800aa82:	232d      	movlt	r3, #45	@ 0x2d
 800aa84:	700b      	strb	r3, [r1, #0]
 800aa86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa8c:	4691      	mov	r9, r2
 800aa8e:	f023 0820 	bic.w	r8, r3, #32
 800aa92:	bfbc      	itt	lt
 800aa94:	4632      	movlt	r2, r6
 800aa96:	4616      	movlt	r6, r2
 800aa98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa9c:	d005      	beq.n	800aaaa <__cvt+0x42>
 800aa9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aaa2:	d100      	bne.n	800aaa6 <__cvt+0x3e>
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	e000      	b.n	800aaac <__cvt+0x44>
 800aaaa:	2103      	movs	r1, #3
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	ab02      	add	r3, sp, #8
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	ec47 6b10 	vmov	d0, r6, r7
 800aab8:	4653      	mov	r3, sl
 800aaba:	4622      	mov	r2, r4
 800aabc:	f000 fea0 	bl	800b800 <_dtoa_r>
 800aac0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aac4:	4605      	mov	r5, r0
 800aac6:	d119      	bne.n	800aafc <__cvt+0x94>
 800aac8:	f019 0f01 	tst.w	r9, #1
 800aacc:	d00e      	beq.n	800aaec <__cvt+0x84>
 800aace:	eb00 0904 	add.w	r9, r0, r4
 800aad2:	2200      	movs	r2, #0
 800aad4:	2300      	movs	r3, #0
 800aad6:	4630      	mov	r0, r6
 800aad8:	4639      	mov	r1, r7
 800aada:	f7f5 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 800aade:	b108      	cbz	r0, 800aae4 <__cvt+0x7c>
 800aae0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aae4:	2230      	movs	r2, #48	@ 0x30
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	454b      	cmp	r3, r9
 800aaea:	d31e      	bcc.n	800ab2a <__cvt+0xc2>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaf0:	1b5b      	subs	r3, r3, r5
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	b004      	add	sp, #16
 800aaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab00:	eb00 0904 	add.w	r9, r0, r4
 800ab04:	d1e5      	bne.n	800aad2 <__cvt+0x6a>
 800ab06:	7803      	ldrb	r3, [r0, #0]
 800ab08:	2b30      	cmp	r3, #48	@ 0x30
 800ab0a:	d10a      	bne.n	800ab22 <__cvt+0xba>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab18:	b918      	cbnz	r0, 800ab22 <__cvt+0xba>
 800ab1a:	f1c4 0401 	rsb	r4, r4, #1
 800ab1e:	f8ca 4000 	str.w	r4, [sl]
 800ab22:	f8da 3000 	ldr.w	r3, [sl]
 800ab26:	4499      	add	r9, r3
 800ab28:	e7d3      	b.n	800aad2 <__cvt+0x6a>
 800ab2a:	1c59      	adds	r1, r3, #1
 800ab2c:	9103      	str	r1, [sp, #12]
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	e7d9      	b.n	800aae6 <__cvt+0x7e>

0800ab32 <__exponent>:
 800ab32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab34:	2900      	cmp	r1, #0
 800ab36:	bfba      	itte	lt
 800ab38:	4249      	neglt	r1, r1
 800ab3a:	232d      	movlt	r3, #45	@ 0x2d
 800ab3c:	232b      	movge	r3, #43	@ 0x2b
 800ab3e:	2909      	cmp	r1, #9
 800ab40:	7002      	strb	r2, [r0, #0]
 800ab42:	7043      	strb	r3, [r0, #1]
 800ab44:	dd29      	ble.n	800ab9a <__exponent+0x68>
 800ab46:	f10d 0307 	add.w	r3, sp, #7
 800ab4a:	461d      	mov	r5, r3
 800ab4c:	270a      	movs	r7, #10
 800ab4e:	461a      	mov	r2, r3
 800ab50:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab54:	fb07 1416 	mls	r4, r7, r6, r1
 800ab58:	3430      	adds	r4, #48	@ 0x30
 800ab5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab5e:	460c      	mov	r4, r1
 800ab60:	2c63      	cmp	r4, #99	@ 0x63
 800ab62:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab66:	4631      	mov	r1, r6
 800ab68:	dcf1      	bgt.n	800ab4e <__exponent+0x1c>
 800ab6a:	3130      	adds	r1, #48	@ 0x30
 800ab6c:	1e94      	subs	r4, r2, #2
 800ab6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab72:	1c41      	adds	r1, r0, #1
 800ab74:	4623      	mov	r3, r4
 800ab76:	42ab      	cmp	r3, r5
 800ab78:	d30a      	bcc.n	800ab90 <__exponent+0x5e>
 800ab7a:	f10d 0309 	add.w	r3, sp, #9
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	42ac      	cmp	r4, r5
 800ab82:	bf88      	it	hi
 800ab84:	2300      	movhi	r3, #0
 800ab86:	3302      	adds	r3, #2
 800ab88:	4403      	add	r3, r0
 800ab8a:	1a18      	subs	r0, r3, r0
 800ab8c:	b003      	add	sp, #12
 800ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab90:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab94:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab98:	e7ed      	b.n	800ab76 <__exponent+0x44>
 800ab9a:	2330      	movs	r3, #48	@ 0x30
 800ab9c:	3130      	adds	r1, #48	@ 0x30
 800ab9e:	7083      	strb	r3, [r0, #2]
 800aba0:	70c1      	strb	r1, [r0, #3]
 800aba2:	1d03      	adds	r3, r0, #4
 800aba4:	e7f1      	b.n	800ab8a <__exponent+0x58>
	...

0800aba8 <_printf_float>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	b08d      	sub	sp, #52	@ 0x34
 800abae:	460c      	mov	r4, r1
 800abb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800abb4:	4616      	mov	r6, r2
 800abb6:	461f      	mov	r7, r3
 800abb8:	4605      	mov	r5, r0
 800abba:	f000 fcbb 	bl	800b534 <_localeconv_r>
 800abbe:	6803      	ldr	r3, [r0, #0]
 800abc0:	9304      	str	r3, [sp, #16]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f5 fb5c 	bl	8000280 <strlen>
 800abc8:	2300      	movs	r3, #0
 800abca:	930a      	str	r3, [sp, #40]	@ 0x28
 800abcc:	f8d8 3000 	ldr.w	r3, [r8]
 800abd0:	9005      	str	r0, [sp, #20]
 800abd2:	3307      	adds	r3, #7
 800abd4:	f023 0307 	bic.w	r3, r3, #7
 800abd8:	f103 0208 	add.w	r2, r3, #8
 800abdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800abe0:	f8d4 b000 	ldr.w	fp, [r4]
 800abe4:	f8c8 2000 	str.w	r2, [r8]
 800abe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	f8cd 8018 	str.w	r8, [sp, #24]
 800abf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800abfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abfe:	4b9c      	ldr	r3, [pc, #624]	@ (800ae70 <_printf_float+0x2c8>)
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	f7f5 ff9a 	bl	8000b3c <__aeabi_dcmpun>
 800ac08:	bb70      	cbnz	r0, 800ac68 <_printf_float+0xc0>
 800ac0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac0e:	4b98      	ldr	r3, [pc, #608]	@ (800ae70 <_printf_float+0x2c8>)
 800ac10:	f04f 32ff 	mov.w	r2, #4294967295
 800ac14:	f7f5 ff74 	bl	8000b00 <__aeabi_dcmple>
 800ac18:	bb30      	cbnz	r0, 800ac68 <_printf_float+0xc0>
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 ff63 	bl	8000aec <__aeabi_dcmplt>
 800ac26:	b110      	cbz	r0, 800ac2e <_printf_float+0x86>
 800ac28:	232d      	movs	r3, #45	@ 0x2d
 800ac2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac2e:	4a91      	ldr	r2, [pc, #580]	@ (800ae74 <_printf_float+0x2cc>)
 800ac30:	4b91      	ldr	r3, [pc, #580]	@ (800ae78 <_printf_float+0x2d0>)
 800ac32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac36:	bf94      	ite	ls
 800ac38:	4690      	movls	r8, r2
 800ac3a:	4698      	movhi	r8, r3
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	6123      	str	r3, [r4, #16]
 800ac40:	f02b 0304 	bic.w	r3, fp, #4
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	f04f 0900 	mov.w	r9, #0
 800ac4a:	9700      	str	r7, [sp, #0]
 800ac4c:	4633      	mov	r3, r6
 800ac4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac50:	4621      	mov	r1, r4
 800ac52:	4628      	mov	r0, r5
 800ac54:	f000 f9d2 	bl	800affc <_printf_common>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	f040 808d 	bne.w	800ad78 <_printf_float+0x1d0>
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac62:	b00d      	add	sp, #52	@ 0x34
 800ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7f5 ff64 	bl	8000b3c <__aeabi_dcmpun>
 800ac74:	b140      	cbz	r0, 800ac88 <_printf_float+0xe0>
 800ac76:	464b      	mov	r3, r9
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bfbc      	itt	lt
 800ac7c:	232d      	movlt	r3, #45	@ 0x2d
 800ac7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac82:	4a7e      	ldr	r2, [pc, #504]	@ (800ae7c <_printf_float+0x2d4>)
 800ac84:	4b7e      	ldr	r3, [pc, #504]	@ (800ae80 <_printf_float+0x2d8>)
 800ac86:	e7d4      	b.n	800ac32 <_printf_float+0x8a>
 800ac88:	6863      	ldr	r3, [r4, #4]
 800ac8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac8e:	9206      	str	r2, [sp, #24]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	d13b      	bne.n	800ad0c <_printf_float+0x164>
 800ac94:	2306      	movs	r3, #6
 800ac96:	6063      	str	r3, [r4, #4]
 800ac98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6022      	str	r2, [r4, #0]
 800aca0:	9303      	str	r3, [sp, #12]
 800aca2:	ab0a      	add	r3, sp, #40	@ 0x28
 800aca4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aca8:	ab09      	add	r3, sp, #36	@ 0x24
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	6861      	ldr	r1, [r4, #4]
 800acae:	ec49 8b10 	vmov	d0, r8, r9
 800acb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800acb6:	4628      	mov	r0, r5
 800acb8:	f7ff fed6 	bl	800aa68 <__cvt>
 800acbc:	9b06      	ldr	r3, [sp, #24]
 800acbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acc0:	2b47      	cmp	r3, #71	@ 0x47
 800acc2:	4680      	mov	r8, r0
 800acc4:	d129      	bne.n	800ad1a <_printf_float+0x172>
 800acc6:	1cc8      	adds	r0, r1, #3
 800acc8:	db02      	blt.n	800acd0 <_printf_float+0x128>
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	4299      	cmp	r1, r3
 800acce:	dd41      	ble.n	800ad54 <_printf_float+0x1ac>
 800acd0:	f1aa 0a02 	sub.w	sl, sl, #2
 800acd4:	fa5f fa8a 	uxtb.w	sl, sl
 800acd8:	3901      	subs	r1, #1
 800acda:	4652      	mov	r2, sl
 800acdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ace0:	9109      	str	r1, [sp, #36]	@ 0x24
 800ace2:	f7ff ff26 	bl	800ab32 <__exponent>
 800ace6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ace8:	1813      	adds	r3, r2, r0
 800acea:	2a01      	cmp	r2, #1
 800acec:	4681      	mov	r9, r0
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	dc02      	bgt.n	800acf8 <_printf_float+0x150>
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	07d2      	lsls	r2, r2, #31
 800acf6:	d501      	bpl.n	800acfc <_printf_float+0x154>
 800acf8:	3301      	adds	r3, #1
 800acfa:	6123      	str	r3, [r4, #16]
 800acfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0a2      	beq.n	800ac4a <_printf_float+0xa2>
 800ad04:	232d      	movs	r3, #45	@ 0x2d
 800ad06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad0a:	e79e      	b.n	800ac4a <_printf_float+0xa2>
 800ad0c:	9a06      	ldr	r2, [sp, #24]
 800ad0e:	2a47      	cmp	r2, #71	@ 0x47
 800ad10:	d1c2      	bne.n	800ac98 <_printf_float+0xf0>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1c0      	bne.n	800ac98 <_printf_float+0xf0>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e7bd      	b.n	800ac96 <_printf_float+0xee>
 800ad1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad1e:	d9db      	bls.n	800acd8 <_printf_float+0x130>
 800ad20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad24:	d118      	bne.n	800ad58 <_printf_float+0x1b0>
 800ad26:	2900      	cmp	r1, #0
 800ad28:	6863      	ldr	r3, [r4, #4]
 800ad2a:	dd0b      	ble.n	800ad44 <_printf_float+0x19c>
 800ad2c:	6121      	str	r1, [r4, #16]
 800ad2e:	b913      	cbnz	r3, 800ad36 <_printf_float+0x18e>
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	07d0      	lsls	r0, r2, #31
 800ad34:	d502      	bpl.n	800ad3c <_printf_float+0x194>
 800ad36:	3301      	adds	r3, #1
 800ad38:	440b      	add	r3, r1
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad3e:	f04f 0900 	mov.w	r9, #0
 800ad42:	e7db      	b.n	800acfc <_printf_float+0x154>
 800ad44:	b913      	cbnz	r3, 800ad4c <_printf_float+0x1a4>
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	07d2      	lsls	r2, r2, #31
 800ad4a:	d501      	bpl.n	800ad50 <_printf_float+0x1a8>
 800ad4c:	3302      	adds	r3, #2
 800ad4e:	e7f4      	b.n	800ad3a <_printf_float+0x192>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7f2      	b.n	800ad3a <_printf_float+0x192>
 800ad54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad5a:	4299      	cmp	r1, r3
 800ad5c:	db05      	blt.n	800ad6a <_printf_float+0x1c2>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	6121      	str	r1, [r4, #16]
 800ad62:	07d8      	lsls	r0, r3, #31
 800ad64:	d5ea      	bpl.n	800ad3c <_printf_float+0x194>
 800ad66:	1c4b      	adds	r3, r1, #1
 800ad68:	e7e7      	b.n	800ad3a <_printf_float+0x192>
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	bfd4      	ite	le
 800ad6e:	f1c1 0202 	rsble	r2, r1, #2
 800ad72:	2201      	movgt	r2, #1
 800ad74:	4413      	add	r3, r2
 800ad76:	e7e0      	b.n	800ad3a <_printf_float+0x192>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	055a      	lsls	r2, r3, #21
 800ad7c:	d407      	bmi.n	800ad8e <_printf_float+0x1e6>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	4642      	mov	r2, r8
 800ad82:	4631      	mov	r1, r6
 800ad84:	4628      	mov	r0, r5
 800ad86:	47b8      	blx	r7
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d12b      	bne.n	800ade4 <_printf_float+0x23c>
 800ad8c:	e767      	b.n	800ac5e <_printf_float+0xb6>
 800ad8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad92:	f240 80dd 	bls.w	800af50 <_printf_float+0x3a8>
 800ad96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f7f5 fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d033      	beq.n	800ae0e <_printf_float+0x266>
 800ada6:	4a37      	ldr	r2, [pc, #220]	@ (800ae84 <_printf_float+0x2dc>)
 800ada8:	2301      	movs	r3, #1
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f af54 	beq.w	800ac5e <_printf_float+0xb6>
 800adb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800adba:	4543      	cmp	r3, r8
 800adbc:	db02      	blt.n	800adc4 <_printf_float+0x21c>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	07d8      	lsls	r0, r3, #31
 800adc2:	d50f      	bpl.n	800ade4 <_printf_float+0x23c>
 800adc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f af45 	beq.w	800ac5e <_printf_float+0xb6>
 800add4:	f04f 0900 	mov.w	r9, #0
 800add8:	f108 38ff 	add.w	r8, r8, #4294967295
 800addc:	f104 0a1a 	add.w	sl, r4, #26
 800ade0:	45c8      	cmp	r8, r9
 800ade2:	dc09      	bgt.n	800adf8 <_printf_float+0x250>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	079b      	lsls	r3, r3, #30
 800ade8:	f100 8103 	bmi.w	800aff2 <_printf_float+0x44a>
 800adec:	68e0      	ldr	r0, [r4, #12]
 800adee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adf0:	4298      	cmp	r0, r3
 800adf2:	bfb8      	it	lt
 800adf4:	4618      	movlt	r0, r3
 800adf6:	e734      	b.n	800ac62 <_printf_float+0xba>
 800adf8:	2301      	movs	r3, #1
 800adfa:	4652      	mov	r2, sl
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	f43f af2b 	beq.w	800ac5e <_printf_float+0xb6>
 800ae08:	f109 0901 	add.w	r9, r9, #1
 800ae0c:	e7e8      	b.n	800ade0 <_printf_float+0x238>
 800ae0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dc39      	bgt.n	800ae88 <_printf_float+0x2e0>
 800ae14:	4a1b      	ldr	r2, [pc, #108]	@ (800ae84 <_printf_float+0x2dc>)
 800ae16:	2301      	movs	r3, #1
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	f43f af1d 	beq.w	800ac5e <_printf_float+0xb6>
 800ae24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae28:	ea59 0303 	orrs.w	r3, r9, r3
 800ae2c:	d102      	bne.n	800ae34 <_printf_float+0x28c>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	07d9      	lsls	r1, r3, #31
 800ae32:	d5d7      	bpl.n	800ade4 <_printf_float+0x23c>
 800ae34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b8      	blx	r7
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f43f af0d 	beq.w	800ac5e <_printf_float+0xb6>
 800ae44:	f04f 0a00 	mov.w	sl, #0
 800ae48:	f104 0b1a 	add.w	fp, r4, #26
 800ae4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae4e:	425b      	negs	r3, r3
 800ae50:	4553      	cmp	r3, sl
 800ae52:	dc01      	bgt.n	800ae58 <_printf_float+0x2b0>
 800ae54:	464b      	mov	r3, r9
 800ae56:	e793      	b.n	800ad80 <_printf_float+0x1d8>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	465a      	mov	r2, fp
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f aefb 	beq.w	800ac5e <_printf_float+0xb6>
 800ae68:	f10a 0a01 	add.w	sl, sl, #1
 800ae6c:	e7ee      	b.n	800ae4c <_printf_float+0x2a4>
 800ae6e:	bf00      	nop
 800ae70:	7fefffff 	.word	0x7fefffff
 800ae74:	0800d924 	.word	0x0800d924
 800ae78:	0800d928 	.word	0x0800d928
 800ae7c:	0800d92c 	.word	0x0800d92c
 800ae80:	0800d930 	.word	0x0800d930
 800ae84:	0800d934 	.word	0x0800d934
 800ae88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae8e:	4553      	cmp	r3, sl
 800ae90:	bfa8      	it	ge
 800ae92:	4653      	movge	r3, sl
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	4699      	mov	r9, r3
 800ae98:	dc36      	bgt.n	800af08 <_printf_float+0x360>
 800ae9a:	f04f 0b00 	mov.w	fp, #0
 800ae9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aea2:	f104 021a 	add.w	r2, r4, #26
 800aea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	eba3 0309 	sub.w	r3, r3, r9
 800aeae:	455b      	cmp	r3, fp
 800aeb0:	dc31      	bgt.n	800af16 <_printf_float+0x36e>
 800aeb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb4:	459a      	cmp	sl, r3
 800aeb6:	dc3a      	bgt.n	800af2e <_printf_float+0x386>
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	07da      	lsls	r2, r3, #31
 800aebc:	d437      	bmi.n	800af2e <_printf_float+0x386>
 800aebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec0:	ebaa 0903 	sub.w	r9, sl, r3
 800aec4:	9b06      	ldr	r3, [sp, #24]
 800aec6:	ebaa 0303 	sub.w	r3, sl, r3
 800aeca:	4599      	cmp	r9, r3
 800aecc:	bfa8      	it	ge
 800aece:	4699      	movge	r9, r3
 800aed0:	f1b9 0f00 	cmp.w	r9, #0
 800aed4:	dc33      	bgt.n	800af3e <_printf_float+0x396>
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aede:	f104 0b1a 	add.w	fp, r4, #26
 800aee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee4:	ebaa 0303 	sub.w	r3, sl, r3
 800aee8:	eba3 0309 	sub.w	r3, r3, r9
 800aeec:	4543      	cmp	r3, r8
 800aeee:	f77f af79 	ble.w	800ade4 <_printf_float+0x23c>
 800aef2:	2301      	movs	r3, #1
 800aef4:	465a      	mov	r2, fp
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	f43f aeae 	beq.w	800ac5e <_printf_float+0xb6>
 800af02:	f108 0801 	add.w	r8, r8, #1
 800af06:	e7ec      	b.n	800aee2 <_printf_float+0x33a>
 800af08:	4642      	mov	r2, r8
 800af0a:	4631      	mov	r1, r6
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b8      	blx	r7
 800af10:	3001      	adds	r0, #1
 800af12:	d1c2      	bne.n	800ae9a <_printf_float+0x2f2>
 800af14:	e6a3      	b.n	800ac5e <_printf_float+0xb6>
 800af16:	2301      	movs	r3, #1
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	9206      	str	r2, [sp, #24]
 800af1e:	47b8      	blx	r7
 800af20:	3001      	adds	r0, #1
 800af22:	f43f ae9c 	beq.w	800ac5e <_printf_float+0xb6>
 800af26:	9a06      	ldr	r2, [sp, #24]
 800af28:	f10b 0b01 	add.w	fp, fp, #1
 800af2c:	e7bb      	b.n	800aea6 <_printf_float+0x2fe>
 800af2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	d1c0      	bne.n	800aebe <_printf_float+0x316>
 800af3c:	e68f      	b.n	800ac5e <_printf_float+0xb6>
 800af3e:	9a06      	ldr	r2, [sp, #24]
 800af40:	464b      	mov	r3, r9
 800af42:	4442      	add	r2, r8
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	47b8      	blx	r7
 800af4a:	3001      	adds	r0, #1
 800af4c:	d1c3      	bne.n	800aed6 <_printf_float+0x32e>
 800af4e:	e686      	b.n	800ac5e <_printf_float+0xb6>
 800af50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af54:	f1ba 0f01 	cmp.w	sl, #1
 800af58:	dc01      	bgt.n	800af5e <_printf_float+0x3b6>
 800af5a:	07db      	lsls	r3, r3, #31
 800af5c:	d536      	bpl.n	800afcc <_printf_float+0x424>
 800af5e:	2301      	movs	r3, #1
 800af60:	4642      	mov	r2, r8
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	f43f ae78 	beq.w	800ac5e <_printf_float+0xb6>
 800af6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af72:	4631      	mov	r1, r6
 800af74:	4628      	mov	r0, r5
 800af76:	47b8      	blx	r7
 800af78:	3001      	adds	r0, #1
 800af7a:	f43f ae70 	beq.w	800ac5e <_printf_float+0xb6>
 800af7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af82:	2200      	movs	r2, #0
 800af84:	2300      	movs	r3, #0
 800af86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af8a:	f7f5 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 800af8e:	b9c0      	cbnz	r0, 800afc2 <_printf_float+0x41a>
 800af90:	4653      	mov	r3, sl
 800af92:	f108 0201 	add.w	r2, r8, #1
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	d10c      	bne.n	800afba <_printf_float+0x412>
 800afa0:	e65d      	b.n	800ac5e <_printf_float+0xb6>
 800afa2:	2301      	movs	r3, #1
 800afa4:	465a      	mov	r2, fp
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	f43f ae56 	beq.w	800ac5e <_printf_float+0xb6>
 800afb2:	f108 0801 	add.w	r8, r8, #1
 800afb6:	45d0      	cmp	r8, sl
 800afb8:	dbf3      	blt.n	800afa2 <_printf_float+0x3fa>
 800afba:	464b      	mov	r3, r9
 800afbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800afc0:	e6df      	b.n	800ad82 <_printf_float+0x1da>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	f104 0b1a 	add.w	fp, r4, #26
 800afca:	e7f4      	b.n	800afb6 <_printf_float+0x40e>
 800afcc:	2301      	movs	r3, #1
 800afce:	4642      	mov	r2, r8
 800afd0:	e7e1      	b.n	800af96 <_printf_float+0x3ee>
 800afd2:	2301      	movs	r3, #1
 800afd4:	464a      	mov	r2, r9
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f ae3e 	beq.w	800ac5e <_printf_float+0xb6>
 800afe2:	f108 0801 	add.w	r8, r8, #1
 800afe6:	68e3      	ldr	r3, [r4, #12]
 800afe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afea:	1a5b      	subs	r3, r3, r1
 800afec:	4543      	cmp	r3, r8
 800afee:	dcf0      	bgt.n	800afd2 <_printf_float+0x42a>
 800aff0:	e6fc      	b.n	800adec <_printf_float+0x244>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 0919 	add.w	r9, r4, #25
 800affa:	e7f4      	b.n	800afe6 <_printf_float+0x43e>

0800affc <_printf_common>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	4616      	mov	r6, r2
 800b002:	4698      	mov	r8, r3
 800b004:	688a      	ldr	r2, [r1, #8]
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b00c:	4293      	cmp	r3, r2
 800b00e:	bfb8      	it	lt
 800b010:	4613      	movlt	r3, r2
 800b012:	6033      	str	r3, [r6, #0]
 800b014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b018:	4607      	mov	r7, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	b10a      	cbz	r2, 800b022 <_printf_common+0x26>
 800b01e:	3301      	adds	r3, #1
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	0699      	lsls	r1, r3, #26
 800b026:	bf42      	ittt	mi
 800b028:	6833      	ldrmi	r3, [r6, #0]
 800b02a:	3302      	addmi	r3, #2
 800b02c:	6033      	strmi	r3, [r6, #0]
 800b02e:	6825      	ldr	r5, [r4, #0]
 800b030:	f015 0506 	ands.w	r5, r5, #6
 800b034:	d106      	bne.n	800b044 <_printf_common+0x48>
 800b036:	f104 0a19 	add.w	sl, r4, #25
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	6832      	ldr	r2, [r6, #0]
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc26      	bgt.n	800b092 <_printf_common+0x96>
 800b044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	3b00      	subs	r3, #0
 800b04c:	bf18      	it	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	0692      	lsls	r2, r2, #26
 800b052:	d42b      	bmi.n	800b0ac <_printf_common+0xb0>
 800b054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b058:	4641      	mov	r1, r8
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c8      	blx	r9
 800b05e:	3001      	adds	r0, #1
 800b060:	d01e      	beq.n	800b0a0 <_printf_common+0xa4>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	f003 0306 	and.w	r3, r3, #6
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	bf02      	ittt	eq
 800b06e:	68e5      	ldreq	r5, [r4, #12]
 800b070:	6833      	ldreq	r3, [r6, #0]
 800b072:	1aed      	subeq	r5, r5, r3
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	bf0c      	ite	eq
 800b078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b07c:	2500      	movne	r5, #0
 800b07e:	4293      	cmp	r3, r2
 800b080:	bfc4      	itt	gt
 800b082:	1a9b      	subgt	r3, r3, r2
 800b084:	18ed      	addgt	r5, r5, r3
 800b086:	2600      	movs	r6, #0
 800b088:	341a      	adds	r4, #26
 800b08a:	42b5      	cmp	r5, r6
 800b08c:	d11a      	bne.n	800b0c4 <_printf_common+0xc8>
 800b08e:	2000      	movs	r0, #0
 800b090:	e008      	b.n	800b0a4 <_printf_common+0xa8>
 800b092:	2301      	movs	r3, #1
 800b094:	4652      	mov	r2, sl
 800b096:	4641      	mov	r1, r8
 800b098:	4638      	mov	r0, r7
 800b09a:	47c8      	blx	r9
 800b09c:	3001      	adds	r0, #1
 800b09e:	d103      	bne.n	800b0a8 <_printf_common+0xac>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	e7c6      	b.n	800b03a <_printf_common+0x3e>
 800b0ac:	18e1      	adds	r1, r4, r3
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	2030      	movs	r0, #48	@ 0x30
 800b0b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0b6:	4422      	add	r2, r4
 800b0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0c0:	3302      	adds	r3, #2
 800b0c2:	e7c7      	b.n	800b054 <_printf_common+0x58>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	47c8      	blx	r9
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d0e6      	beq.n	800b0a0 <_printf_common+0xa4>
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	e7d9      	b.n	800b08a <_printf_common+0x8e>
	...

0800b0d8 <_printf_i>:
 800b0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0dc:	7e0f      	ldrb	r7, [r1, #24]
 800b0de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0e0:	2f78      	cmp	r7, #120	@ 0x78
 800b0e2:	4691      	mov	r9, r2
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	469a      	mov	sl, r3
 800b0ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0ee:	d807      	bhi.n	800b100 <_printf_i+0x28>
 800b0f0:	2f62      	cmp	r7, #98	@ 0x62
 800b0f2:	d80a      	bhi.n	800b10a <_printf_i+0x32>
 800b0f4:	2f00      	cmp	r7, #0
 800b0f6:	f000 80d2 	beq.w	800b29e <_printf_i+0x1c6>
 800b0fa:	2f58      	cmp	r7, #88	@ 0x58
 800b0fc:	f000 80b9 	beq.w	800b272 <_printf_i+0x19a>
 800b100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b108:	e03a      	b.n	800b180 <_printf_i+0xa8>
 800b10a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b10e:	2b15      	cmp	r3, #21
 800b110:	d8f6      	bhi.n	800b100 <_printf_i+0x28>
 800b112:	a101      	add	r1, pc, #4	@ (adr r1, 800b118 <_printf_i+0x40>)
 800b114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b118:	0800b171 	.word	0x0800b171
 800b11c:	0800b185 	.word	0x0800b185
 800b120:	0800b101 	.word	0x0800b101
 800b124:	0800b101 	.word	0x0800b101
 800b128:	0800b101 	.word	0x0800b101
 800b12c:	0800b101 	.word	0x0800b101
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b101 	.word	0x0800b101
 800b138:	0800b101 	.word	0x0800b101
 800b13c:	0800b101 	.word	0x0800b101
 800b140:	0800b101 	.word	0x0800b101
 800b144:	0800b285 	.word	0x0800b285
 800b148:	0800b1af 	.word	0x0800b1af
 800b14c:	0800b23f 	.word	0x0800b23f
 800b150:	0800b101 	.word	0x0800b101
 800b154:	0800b101 	.word	0x0800b101
 800b158:	0800b2a7 	.word	0x0800b2a7
 800b15c:	0800b101 	.word	0x0800b101
 800b160:	0800b1af 	.word	0x0800b1af
 800b164:	0800b101 	.word	0x0800b101
 800b168:	0800b101 	.word	0x0800b101
 800b16c:	0800b247 	.word	0x0800b247
 800b170:	6833      	ldr	r3, [r6, #0]
 800b172:	1d1a      	adds	r2, r3, #4
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6032      	str	r2, [r6, #0]
 800b178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b17c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b180:	2301      	movs	r3, #1
 800b182:	e09d      	b.n	800b2c0 <_printf_i+0x1e8>
 800b184:	6833      	ldr	r3, [r6, #0]
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	1d19      	adds	r1, r3, #4
 800b18a:	6031      	str	r1, [r6, #0]
 800b18c:	0606      	lsls	r6, r0, #24
 800b18e:	d501      	bpl.n	800b194 <_printf_i+0xbc>
 800b190:	681d      	ldr	r5, [r3, #0]
 800b192:	e003      	b.n	800b19c <_printf_i+0xc4>
 800b194:	0645      	lsls	r5, r0, #25
 800b196:	d5fb      	bpl.n	800b190 <_printf_i+0xb8>
 800b198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b19c:	2d00      	cmp	r5, #0
 800b19e:	da03      	bge.n	800b1a8 <_printf_i+0xd0>
 800b1a0:	232d      	movs	r3, #45	@ 0x2d
 800b1a2:	426d      	negs	r5, r5
 800b1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1a8:	4859      	ldr	r0, [pc, #356]	@ (800b310 <_printf_i+0x238>)
 800b1aa:	230a      	movs	r3, #10
 800b1ac:	e011      	b.n	800b1d2 <_printf_i+0xfa>
 800b1ae:	6821      	ldr	r1, [r4, #0]
 800b1b0:	6833      	ldr	r3, [r6, #0]
 800b1b2:	0608      	lsls	r0, r1, #24
 800b1b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1b8:	d402      	bmi.n	800b1c0 <_printf_i+0xe8>
 800b1ba:	0649      	lsls	r1, r1, #25
 800b1bc:	bf48      	it	mi
 800b1be:	b2ad      	uxthmi	r5, r5
 800b1c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1c2:	4853      	ldr	r0, [pc, #332]	@ (800b310 <_printf_i+0x238>)
 800b1c4:	6033      	str	r3, [r6, #0]
 800b1c6:	bf14      	ite	ne
 800b1c8:	230a      	movne	r3, #10
 800b1ca:	2308      	moveq	r3, #8
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1d2:	6866      	ldr	r6, [r4, #4]
 800b1d4:	60a6      	str	r6, [r4, #8]
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	bfa2      	ittt	ge
 800b1da:	6821      	ldrge	r1, [r4, #0]
 800b1dc:	f021 0104 	bicge.w	r1, r1, #4
 800b1e0:	6021      	strge	r1, [r4, #0]
 800b1e2:	b90d      	cbnz	r5, 800b1e8 <_printf_i+0x110>
 800b1e4:	2e00      	cmp	r6, #0
 800b1e6:	d04b      	beq.n	800b280 <_printf_i+0x1a8>
 800b1e8:	4616      	mov	r6, r2
 800b1ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1ee:	fb03 5711 	mls	r7, r3, r1, r5
 800b1f2:	5dc7      	ldrb	r7, [r0, r7]
 800b1f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1f8:	462f      	mov	r7, r5
 800b1fa:	42bb      	cmp	r3, r7
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	d9f4      	bls.n	800b1ea <_printf_i+0x112>
 800b200:	2b08      	cmp	r3, #8
 800b202:	d10b      	bne.n	800b21c <_printf_i+0x144>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	07df      	lsls	r7, r3, #31
 800b208:	d508      	bpl.n	800b21c <_printf_i+0x144>
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	6861      	ldr	r1, [r4, #4]
 800b20e:	4299      	cmp	r1, r3
 800b210:	bfde      	ittt	le
 800b212:	2330      	movle	r3, #48	@ 0x30
 800b214:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b21c:	1b92      	subs	r2, r2, r6
 800b21e:	6122      	str	r2, [r4, #16]
 800b220:	f8cd a000 	str.w	sl, [sp]
 800b224:	464b      	mov	r3, r9
 800b226:	aa03      	add	r2, sp, #12
 800b228:	4621      	mov	r1, r4
 800b22a:	4640      	mov	r0, r8
 800b22c:	f7ff fee6 	bl	800affc <_printf_common>
 800b230:	3001      	adds	r0, #1
 800b232:	d14a      	bne.n	800b2ca <_printf_i+0x1f2>
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	b004      	add	sp, #16
 800b23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	f043 0320 	orr.w	r3, r3, #32
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	4833      	ldr	r0, [pc, #204]	@ (800b314 <_printf_i+0x23c>)
 800b248:	2778      	movs	r7, #120	@ 0x78
 800b24a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	6831      	ldr	r1, [r6, #0]
 800b252:	061f      	lsls	r7, r3, #24
 800b254:	f851 5b04 	ldr.w	r5, [r1], #4
 800b258:	d402      	bmi.n	800b260 <_printf_i+0x188>
 800b25a:	065f      	lsls	r7, r3, #25
 800b25c:	bf48      	it	mi
 800b25e:	b2ad      	uxthmi	r5, r5
 800b260:	6031      	str	r1, [r6, #0]
 800b262:	07d9      	lsls	r1, r3, #31
 800b264:	bf44      	itt	mi
 800b266:	f043 0320 	orrmi.w	r3, r3, #32
 800b26a:	6023      	strmi	r3, [r4, #0]
 800b26c:	b11d      	cbz	r5, 800b276 <_printf_i+0x19e>
 800b26e:	2310      	movs	r3, #16
 800b270:	e7ac      	b.n	800b1cc <_printf_i+0xf4>
 800b272:	4827      	ldr	r0, [pc, #156]	@ (800b310 <_printf_i+0x238>)
 800b274:	e7e9      	b.n	800b24a <_printf_i+0x172>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	f023 0320 	bic.w	r3, r3, #32
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	e7f6      	b.n	800b26e <_printf_i+0x196>
 800b280:	4616      	mov	r6, r2
 800b282:	e7bd      	b.n	800b200 <_printf_i+0x128>
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	6961      	ldr	r1, [r4, #20]
 800b28a:	1d18      	adds	r0, r3, #4
 800b28c:	6030      	str	r0, [r6, #0]
 800b28e:	062e      	lsls	r6, r5, #24
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	d501      	bpl.n	800b298 <_printf_i+0x1c0>
 800b294:	6019      	str	r1, [r3, #0]
 800b296:	e002      	b.n	800b29e <_printf_i+0x1c6>
 800b298:	0668      	lsls	r0, r5, #25
 800b29a:	d5fb      	bpl.n	800b294 <_printf_i+0x1bc>
 800b29c:	8019      	strh	r1, [r3, #0]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	6123      	str	r3, [r4, #16]
 800b2a2:	4616      	mov	r6, r2
 800b2a4:	e7bc      	b.n	800b220 <_printf_i+0x148>
 800b2a6:	6833      	ldr	r3, [r6, #0]
 800b2a8:	1d1a      	adds	r2, r3, #4
 800b2aa:	6032      	str	r2, [r6, #0]
 800b2ac:	681e      	ldr	r6, [r3, #0]
 800b2ae:	6862      	ldr	r2, [r4, #4]
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7f4 ff94 	bl	80001e0 <memchr>
 800b2b8:	b108      	cbz	r0, 800b2be <_printf_i+0x1e6>
 800b2ba:	1b80      	subs	r0, r0, r6
 800b2bc:	6060      	str	r0, [r4, #4]
 800b2be:	6863      	ldr	r3, [r4, #4]
 800b2c0:	6123      	str	r3, [r4, #16]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c8:	e7aa      	b.n	800b220 <_printf_i+0x148>
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	47d0      	blx	sl
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d0ad      	beq.n	800b234 <_printf_i+0x15c>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	079b      	lsls	r3, r3, #30
 800b2dc:	d413      	bmi.n	800b306 <_printf_i+0x22e>
 800b2de:	68e0      	ldr	r0, [r4, #12]
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	bfb8      	it	lt
 800b2e6:	4618      	movlt	r0, r3
 800b2e8:	e7a6      	b.n	800b238 <_printf_i+0x160>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	47d0      	blx	sl
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d09d      	beq.n	800b234 <_printf_i+0x15c>
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	68e3      	ldr	r3, [r4, #12]
 800b2fc:	9903      	ldr	r1, [sp, #12]
 800b2fe:	1a5b      	subs	r3, r3, r1
 800b300:	42ab      	cmp	r3, r5
 800b302:	dcf2      	bgt.n	800b2ea <_printf_i+0x212>
 800b304:	e7eb      	b.n	800b2de <_printf_i+0x206>
 800b306:	2500      	movs	r5, #0
 800b308:	f104 0619 	add.w	r6, r4, #25
 800b30c:	e7f5      	b.n	800b2fa <_printf_i+0x222>
 800b30e:	bf00      	nop
 800b310:	0800d936 	.word	0x0800d936
 800b314:	0800d947 	.word	0x0800d947

0800b318 <std>:
 800b318:	2300      	movs	r3, #0
 800b31a:	b510      	push	{r4, lr}
 800b31c:	4604      	mov	r4, r0
 800b31e:	e9c0 3300 	strd	r3, r3, [r0]
 800b322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b326:	6083      	str	r3, [r0, #8]
 800b328:	8181      	strh	r1, [r0, #12]
 800b32a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b32c:	81c2      	strh	r2, [r0, #14]
 800b32e:	6183      	str	r3, [r0, #24]
 800b330:	4619      	mov	r1, r3
 800b332:	2208      	movs	r2, #8
 800b334:	305c      	adds	r0, #92	@ 0x5c
 800b336:	f000 f8f4 	bl	800b522 <memset>
 800b33a:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <std+0x58>)
 800b33c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <std+0x5c>)
 800b340:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <std+0x60>)
 800b344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b346:	4b0d      	ldr	r3, [pc, #52]	@ (800b37c <std+0x64>)
 800b348:	6323      	str	r3, [r4, #48]	@ 0x30
 800b34a:	4b0d      	ldr	r3, [pc, #52]	@ (800b380 <std+0x68>)
 800b34c:	6224      	str	r4, [r4, #32]
 800b34e:	429c      	cmp	r4, r3
 800b350:	d006      	beq.n	800b360 <std+0x48>
 800b352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b356:	4294      	cmp	r4, r2
 800b358:	d002      	beq.n	800b360 <std+0x48>
 800b35a:	33d0      	adds	r3, #208	@ 0xd0
 800b35c:	429c      	cmp	r4, r3
 800b35e:	d105      	bne.n	800b36c <std+0x54>
 800b360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b368:	f000 b9ae 	b.w	800b6c8 <__retarget_lock_init_recursive>
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	0800b49d 	.word	0x0800b49d
 800b374:	0800b4bf 	.word	0x0800b4bf
 800b378:	0800b4f7 	.word	0x0800b4f7
 800b37c:	0800b51b 	.word	0x0800b51b
 800b380:	20004fec 	.word	0x20004fec

0800b384 <stdio_exit_handler>:
 800b384:	4a02      	ldr	r2, [pc, #8]	@ (800b390 <stdio_exit_handler+0xc>)
 800b386:	4903      	ldr	r1, [pc, #12]	@ (800b394 <stdio_exit_handler+0x10>)
 800b388:	4803      	ldr	r0, [pc, #12]	@ (800b398 <stdio_exit_handler+0x14>)
 800b38a:	f000 b869 	b.w	800b460 <_fwalk_sglue>
 800b38e:	bf00      	nop
 800b390:	2000001c 	.word	0x2000001c
 800b394:	0800cd95 	.word	0x0800cd95
 800b398:	2000002c 	.word	0x2000002c

0800b39c <cleanup_stdio>:
 800b39c:	6841      	ldr	r1, [r0, #4]
 800b39e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d0 <cleanup_stdio+0x34>)
 800b3a0:	4299      	cmp	r1, r3
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	d001      	beq.n	800b3ac <cleanup_stdio+0x10>
 800b3a8:	f001 fcf4 	bl	800cd94 <_fflush_r>
 800b3ac:	68a1      	ldr	r1, [r4, #8]
 800b3ae:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <cleanup_stdio+0x38>)
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d002      	beq.n	800b3ba <cleanup_stdio+0x1e>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f001 fced 	bl	800cd94 <_fflush_r>
 800b3ba:	68e1      	ldr	r1, [r4, #12]
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <cleanup_stdio+0x3c>)
 800b3be:	4299      	cmp	r1, r3
 800b3c0:	d004      	beq.n	800b3cc <cleanup_stdio+0x30>
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c8:	f001 bce4 	b.w	800cd94 <_fflush_r>
 800b3cc:	bd10      	pop	{r4, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20004fec 	.word	0x20004fec
 800b3d4:	20005054 	.word	0x20005054
 800b3d8:	200050bc 	.word	0x200050bc

0800b3dc <global_stdio_init.part.0>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4b0b      	ldr	r3, [pc, #44]	@ (800b40c <global_stdio_init.part.0+0x30>)
 800b3e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b410 <global_stdio_init.part.0+0x34>)
 800b3e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b414 <global_stdio_init.part.0+0x38>)
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2104      	movs	r1, #4
 800b3ec:	f7ff ff94 	bl	800b318 <std>
 800b3f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	2109      	movs	r1, #9
 800b3f8:	f7ff ff8e 	bl	800b318 <std>
 800b3fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b400:	2202      	movs	r2, #2
 800b402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b406:	2112      	movs	r1, #18
 800b408:	f7ff bf86 	b.w	800b318 <std>
 800b40c:	20005124 	.word	0x20005124
 800b410:	20004fec 	.word	0x20004fec
 800b414:	0800b385 	.word	0x0800b385

0800b418 <__sfp_lock_acquire>:
 800b418:	4801      	ldr	r0, [pc, #4]	@ (800b420 <__sfp_lock_acquire+0x8>)
 800b41a:	f000 b956 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800b41e:	bf00      	nop
 800b420:	2000512d 	.word	0x2000512d

0800b424 <__sfp_lock_release>:
 800b424:	4801      	ldr	r0, [pc, #4]	@ (800b42c <__sfp_lock_release+0x8>)
 800b426:	f000 b951 	b.w	800b6cc <__retarget_lock_release_recursive>
 800b42a:	bf00      	nop
 800b42c:	2000512d 	.word	0x2000512d

0800b430 <__sinit>:
 800b430:	b510      	push	{r4, lr}
 800b432:	4604      	mov	r4, r0
 800b434:	f7ff fff0 	bl	800b418 <__sfp_lock_acquire>
 800b438:	6a23      	ldr	r3, [r4, #32]
 800b43a:	b11b      	cbz	r3, 800b444 <__sinit+0x14>
 800b43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b440:	f7ff bff0 	b.w	800b424 <__sfp_lock_release>
 800b444:	4b04      	ldr	r3, [pc, #16]	@ (800b458 <__sinit+0x28>)
 800b446:	6223      	str	r3, [r4, #32]
 800b448:	4b04      	ldr	r3, [pc, #16]	@ (800b45c <__sinit+0x2c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1f5      	bne.n	800b43c <__sinit+0xc>
 800b450:	f7ff ffc4 	bl	800b3dc <global_stdio_init.part.0>
 800b454:	e7f2      	b.n	800b43c <__sinit+0xc>
 800b456:	bf00      	nop
 800b458:	0800b39d 	.word	0x0800b39d
 800b45c:	20005124 	.word	0x20005124

0800b460 <_fwalk_sglue>:
 800b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b464:	4607      	mov	r7, r0
 800b466:	4688      	mov	r8, r1
 800b468:	4614      	mov	r4, r2
 800b46a:	2600      	movs	r6, #0
 800b46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b470:	f1b9 0901 	subs.w	r9, r9, #1
 800b474:	d505      	bpl.n	800b482 <_fwalk_sglue+0x22>
 800b476:	6824      	ldr	r4, [r4, #0]
 800b478:	2c00      	cmp	r4, #0
 800b47a:	d1f7      	bne.n	800b46c <_fwalk_sglue+0xc>
 800b47c:	4630      	mov	r0, r6
 800b47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d907      	bls.n	800b498 <_fwalk_sglue+0x38>
 800b488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b48c:	3301      	adds	r3, #1
 800b48e:	d003      	beq.n	800b498 <_fwalk_sglue+0x38>
 800b490:	4629      	mov	r1, r5
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	4306      	orrs	r6, r0
 800b498:	3568      	adds	r5, #104	@ 0x68
 800b49a:	e7e9      	b.n	800b470 <_fwalk_sglue+0x10>

0800b49c <__sread>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	460c      	mov	r4, r1
 800b4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a4:	f000 f8c2 	bl	800b62c <_read_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	bfab      	itete	ge
 800b4ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b4b0:	181b      	addge	r3, r3, r0
 800b4b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4b6:	bfac      	ite	ge
 800b4b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4ba:	81a3      	strhlt	r3, [r4, #12]
 800b4bc:	bd10      	pop	{r4, pc}

0800b4be <__swrite>:
 800b4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c2:	461f      	mov	r7, r3
 800b4c4:	898b      	ldrh	r3, [r1, #12]
 800b4c6:	05db      	lsls	r3, r3, #23
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	d505      	bpl.n	800b4dc <__swrite+0x1e>
 800b4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f000 f896 	bl	800b608 <_lseek_r>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	4632      	mov	r2, r6
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f2:	f000 b8ad 	b.w	800b650 <_write_r>

0800b4f6 <__sseek>:
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fe:	f000 f883 	bl	800b608 <_lseek_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	bf15      	itete	ne
 800b508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b50a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b50e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b512:	81a3      	strheq	r3, [r4, #12]
 800b514:	bf18      	it	ne
 800b516:	81a3      	strhne	r3, [r4, #12]
 800b518:	bd10      	pop	{r4, pc}

0800b51a <__sclose>:
 800b51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51e:	f000 b80d 	b.w	800b53c <_close_r>

0800b522 <memset>:
 800b522:	4402      	add	r2, r0
 800b524:	4603      	mov	r3, r0
 800b526:	4293      	cmp	r3, r2
 800b528:	d100      	bne.n	800b52c <memset+0xa>
 800b52a:	4770      	bx	lr
 800b52c:	f803 1b01 	strb.w	r1, [r3], #1
 800b530:	e7f9      	b.n	800b526 <memset+0x4>
	...

0800b534 <_localeconv_r>:
 800b534:	4800      	ldr	r0, [pc, #0]	@ (800b538 <_localeconv_r+0x4>)
 800b536:	4770      	bx	lr
 800b538:	20000168 	.word	0x20000168

0800b53c <_close_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	@ (800b558 <_close_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7f8 f8b2 	bl	80036b0 <_close>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_close_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_close_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20005128 	.word	0x20005128

0800b55c <_reclaim_reent>:
 800b55c:	4b29      	ldr	r3, [pc, #164]	@ (800b604 <_reclaim_reent+0xa8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4283      	cmp	r3, r0
 800b562:	b570      	push	{r4, r5, r6, lr}
 800b564:	4604      	mov	r4, r0
 800b566:	d04b      	beq.n	800b600 <_reclaim_reent+0xa4>
 800b568:	69c3      	ldr	r3, [r0, #28]
 800b56a:	b1ab      	cbz	r3, 800b598 <_reclaim_reent+0x3c>
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	b16b      	cbz	r3, 800b58c <_reclaim_reent+0x30>
 800b570:	2500      	movs	r5, #0
 800b572:	69e3      	ldr	r3, [r4, #28]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	5959      	ldr	r1, [r3, r5]
 800b578:	2900      	cmp	r1, #0
 800b57a:	d13b      	bne.n	800b5f4 <_reclaim_reent+0x98>
 800b57c:	3504      	adds	r5, #4
 800b57e:	2d80      	cmp	r5, #128	@ 0x80
 800b580:	d1f7      	bne.n	800b572 <_reclaim_reent+0x16>
 800b582:	69e3      	ldr	r3, [r4, #28]
 800b584:	4620      	mov	r0, r4
 800b586:	68d9      	ldr	r1, [r3, #12]
 800b588:	f000 fefe 	bl	800c388 <_free_r>
 800b58c:	69e3      	ldr	r3, [r4, #28]
 800b58e:	6819      	ldr	r1, [r3, #0]
 800b590:	b111      	cbz	r1, 800b598 <_reclaim_reent+0x3c>
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fef8 	bl	800c388 <_free_r>
 800b598:	6961      	ldr	r1, [r4, #20]
 800b59a:	b111      	cbz	r1, 800b5a2 <_reclaim_reent+0x46>
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fef3 	bl	800c388 <_free_r>
 800b5a2:	69e1      	ldr	r1, [r4, #28]
 800b5a4:	b111      	cbz	r1, 800b5ac <_reclaim_reent+0x50>
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 feee 	bl	800c388 <_free_r>
 800b5ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b5ae:	b111      	cbz	r1, 800b5b6 <_reclaim_reent+0x5a>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 fee9 	bl	800c388 <_free_r>
 800b5b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5b8:	b111      	cbz	r1, 800b5c0 <_reclaim_reent+0x64>
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 fee4 	bl	800c388 <_free_r>
 800b5c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b5c2:	b111      	cbz	r1, 800b5ca <_reclaim_reent+0x6e>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 fedf 	bl	800c388 <_free_r>
 800b5ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b5cc:	b111      	cbz	r1, 800b5d4 <_reclaim_reent+0x78>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 feda 	bl	800c388 <_free_r>
 800b5d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b5d6:	b111      	cbz	r1, 800b5de <_reclaim_reent+0x82>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 fed5 	bl	800c388 <_free_r>
 800b5de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b5e0:	b111      	cbz	r1, 800b5e8 <_reclaim_reent+0x8c>
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fed0 	bl	800c388 <_free_r>
 800b5e8:	6a23      	ldr	r3, [r4, #32]
 800b5ea:	b14b      	cbz	r3, 800b600 <_reclaim_reent+0xa4>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5f2:	4718      	bx	r3
 800b5f4:	680e      	ldr	r6, [r1, #0]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 fec6 	bl	800c388 <_free_r>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	e7bb      	b.n	800b578 <_reclaim_reent+0x1c>
 800b600:	bd70      	pop	{r4, r5, r6, pc}
 800b602:	bf00      	nop
 800b604:	20000028 	.word	0x20000028

0800b608 <_lseek_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	@ (800b628 <_lseek_r+0x20>)
 800b60c:	4604      	mov	r4, r0
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	2200      	movs	r2, #0
 800b614:	602a      	str	r2, [r5, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	f7f8 f871 	bl	80036fe <_lseek>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_lseek_r+0x1e>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_lseek_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20005128 	.word	0x20005128

0800b62c <_read_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	@ (800b64c <_read_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f7 ffff 	bl	800363e <_read>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_read_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_read_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20005128 	.word	0x20005128

0800b650 <_write_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	@ (800b670 <_write_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7f8 f80a 	bl	8003678 <_write>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_write_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_write_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20005128 	.word	0x20005128

0800b674 <__errno>:
 800b674:	4b01      	ldr	r3, [pc, #4]	@ (800b67c <__errno+0x8>)
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000028 	.word	0x20000028

0800b680 <__libc_init_array>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4d0d      	ldr	r5, [pc, #52]	@ (800b6b8 <__libc_init_array+0x38>)
 800b684:	4c0d      	ldr	r4, [pc, #52]	@ (800b6bc <__libc_init_array+0x3c>)
 800b686:	1b64      	subs	r4, r4, r5
 800b688:	10a4      	asrs	r4, r4, #2
 800b68a:	2600      	movs	r6, #0
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	d109      	bne.n	800b6a4 <__libc_init_array+0x24>
 800b690:	4d0b      	ldr	r5, [pc, #44]	@ (800b6c0 <__libc_init_array+0x40>)
 800b692:	4c0c      	ldr	r4, [pc, #48]	@ (800b6c4 <__libc_init_array+0x44>)
 800b694:	f002 f85e 	bl	800d754 <_init>
 800b698:	1b64      	subs	r4, r4, r5
 800b69a:	10a4      	asrs	r4, r4, #2
 800b69c:	2600      	movs	r6, #0
 800b69e:	42a6      	cmp	r6, r4
 800b6a0:	d105      	bne.n	800b6ae <__libc_init_array+0x2e>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a8:	4798      	blx	r3
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7ee      	b.n	800b68c <__libc_init_array+0xc>
 800b6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b2:	4798      	blx	r3
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	e7f2      	b.n	800b69e <__libc_init_array+0x1e>
 800b6b8:	0800dcd8 	.word	0x0800dcd8
 800b6bc:	0800dcd8 	.word	0x0800dcd8
 800b6c0:	0800dcd8 	.word	0x0800dcd8
 800b6c4:	0800dcdc 	.word	0x0800dcdc

0800b6c8 <__retarget_lock_init_recursive>:
 800b6c8:	4770      	bx	lr

0800b6ca <__retarget_lock_acquire_recursive>:
 800b6ca:	4770      	bx	lr

0800b6cc <__retarget_lock_release_recursive>:
 800b6cc:	4770      	bx	lr

0800b6ce <memcpy>:
 800b6ce:	440a      	add	r2, r1
 800b6d0:	4291      	cmp	r1, r2
 800b6d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d6:	d100      	bne.n	800b6da <memcpy+0xc>
 800b6d8:	4770      	bx	lr
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e4:	4291      	cmp	r1, r2
 800b6e6:	d1f9      	bne.n	800b6dc <memcpy+0xe>
 800b6e8:	bd10      	pop	{r4, pc}

0800b6ea <quorem>:
 800b6ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ee:	6903      	ldr	r3, [r0, #16]
 800b6f0:	690c      	ldr	r4, [r1, #16]
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	db7e      	blt.n	800b7f6 <quorem+0x10c>
 800b6f8:	3c01      	subs	r4, #1
 800b6fa:	f101 0814 	add.w	r8, r1, #20
 800b6fe:	00a3      	lsls	r3, r4, #2
 800b700:	f100 0514 	add.w	r5, r0, #20
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b714:	3301      	adds	r3, #1
 800b716:	429a      	cmp	r2, r3
 800b718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b71c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b720:	d32e      	bcc.n	800b780 <quorem+0x96>
 800b722:	f04f 0a00 	mov.w	sl, #0
 800b726:	46c4      	mov	ip, r8
 800b728:	46ae      	mov	lr, r5
 800b72a:	46d3      	mov	fp, sl
 800b72c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b730:	b298      	uxth	r0, r3
 800b732:	fb06 a000 	mla	r0, r6, r0, sl
 800b736:	0c02      	lsrs	r2, r0, #16
 800b738:	0c1b      	lsrs	r3, r3, #16
 800b73a:	fb06 2303 	mla	r3, r6, r3, r2
 800b73e:	f8de 2000 	ldr.w	r2, [lr]
 800b742:	b280      	uxth	r0, r0
 800b744:	b292      	uxth	r2, r2
 800b746:	1a12      	subs	r2, r2, r0
 800b748:	445a      	add	r2, fp
 800b74a:	f8de 0000 	ldr.w	r0, [lr]
 800b74e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b752:	b29b      	uxth	r3, r3
 800b754:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b758:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b75c:	b292      	uxth	r2, r2
 800b75e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b762:	45e1      	cmp	r9, ip
 800b764:	f84e 2b04 	str.w	r2, [lr], #4
 800b768:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b76c:	d2de      	bcs.n	800b72c <quorem+0x42>
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	58eb      	ldr	r3, [r5, r3]
 800b772:	b92b      	cbnz	r3, 800b780 <quorem+0x96>
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	3b04      	subs	r3, #4
 800b778:	429d      	cmp	r5, r3
 800b77a:	461a      	mov	r2, r3
 800b77c:	d32f      	bcc.n	800b7de <quorem+0xf4>
 800b77e:	613c      	str	r4, [r7, #16]
 800b780:	4638      	mov	r0, r7
 800b782:	f001 f97b 	bl	800ca7c <__mcmp>
 800b786:	2800      	cmp	r0, #0
 800b788:	db25      	blt.n	800b7d6 <quorem+0xec>
 800b78a:	4629      	mov	r1, r5
 800b78c:	2000      	movs	r0, #0
 800b78e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b792:	f8d1 c000 	ldr.w	ip, [r1]
 800b796:	fa1f fe82 	uxth.w	lr, r2
 800b79a:	fa1f f38c 	uxth.w	r3, ip
 800b79e:	eba3 030e 	sub.w	r3, r3, lr
 800b7a2:	4403      	add	r3, r0
 800b7a4:	0c12      	lsrs	r2, r2, #16
 800b7a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7b4:	45c1      	cmp	r9, r8
 800b7b6:	f841 3b04 	str.w	r3, [r1], #4
 800b7ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7be:	d2e6      	bcs.n	800b78e <quorem+0xa4>
 800b7c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7c8:	b922      	cbnz	r2, 800b7d4 <quorem+0xea>
 800b7ca:	3b04      	subs	r3, #4
 800b7cc:	429d      	cmp	r5, r3
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	d30b      	bcc.n	800b7ea <quorem+0x100>
 800b7d2:	613c      	str	r4, [r7, #16]
 800b7d4:	3601      	adds	r6, #1
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	b003      	add	sp, #12
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	6812      	ldr	r2, [r2, #0]
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	d1cb      	bne.n	800b77e <quorem+0x94>
 800b7e6:	3c01      	subs	r4, #1
 800b7e8:	e7c6      	b.n	800b778 <quorem+0x8e>
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	2a00      	cmp	r2, #0
 800b7f0:	d1ef      	bne.n	800b7d2 <quorem+0xe8>
 800b7f2:	3c01      	subs	r4, #1
 800b7f4:	e7ea      	b.n	800b7cc <quorem+0xe2>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e7ee      	b.n	800b7d8 <quorem+0xee>
 800b7fa:	0000      	movs	r0, r0
 800b7fc:	0000      	movs	r0, r0
	...

0800b800 <_dtoa_r>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	69c7      	ldr	r7, [r0, #28]
 800b806:	b099      	sub	sp, #100	@ 0x64
 800b808:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b80c:	ec55 4b10 	vmov	r4, r5, d0
 800b810:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b812:	9109      	str	r1, [sp, #36]	@ 0x24
 800b814:	4683      	mov	fp, r0
 800b816:	920e      	str	r2, [sp, #56]	@ 0x38
 800b818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b81a:	b97f      	cbnz	r7, 800b83c <_dtoa_r+0x3c>
 800b81c:	2010      	movs	r0, #16
 800b81e:	f000 fdfd 	bl	800c41c <malloc>
 800b822:	4602      	mov	r2, r0
 800b824:	f8cb 001c 	str.w	r0, [fp, #28]
 800b828:	b920      	cbnz	r0, 800b834 <_dtoa_r+0x34>
 800b82a:	4ba7      	ldr	r3, [pc, #668]	@ (800bac8 <_dtoa_r+0x2c8>)
 800b82c:	21ef      	movs	r1, #239	@ 0xef
 800b82e:	48a7      	ldr	r0, [pc, #668]	@ (800bacc <_dtoa_r+0x2cc>)
 800b830:	f001 fae8 	bl	800ce04 <__assert_func>
 800b834:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b838:	6007      	str	r7, [r0, #0]
 800b83a:	60c7      	str	r7, [r0, #12]
 800b83c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	b159      	cbz	r1, 800b85c <_dtoa_r+0x5c>
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	604a      	str	r2, [r1, #4]
 800b848:	2301      	movs	r3, #1
 800b84a:	4093      	lsls	r3, r2
 800b84c:	608b      	str	r3, [r1, #8]
 800b84e:	4658      	mov	r0, fp
 800b850:	f000 feda 	bl	800c608 <_Bfree>
 800b854:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	1e2b      	subs	r3, r5, #0
 800b85e:	bfb9      	ittee	lt
 800b860:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b864:	9303      	strlt	r3, [sp, #12]
 800b866:	2300      	movge	r3, #0
 800b868:	6033      	strge	r3, [r6, #0]
 800b86a:	9f03      	ldr	r7, [sp, #12]
 800b86c:	4b98      	ldr	r3, [pc, #608]	@ (800bad0 <_dtoa_r+0x2d0>)
 800b86e:	bfbc      	itt	lt
 800b870:	2201      	movlt	r2, #1
 800b872:	6032      	strlt	r2, [r6, #0]
 800b874:	43bb      	bics	r3, r7
 800b876:	d112      	bne.n	800b89e <_dtoa_r+0x9e>
 800b878:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b87a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b884:	4323      	orrs	r3, r4
 800b886:	f000 854d 	beq.w	800c324 <_dtoa_r+0xb24>
 800b88a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b88c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bae4 <_dtoa_r+0x2e4>
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 854f 	beq.w	800c334 <_dtoa_r+0xb34>
 800b896:	f10a 0303 	add.w	r3, sl, #3
 800b89a:	f000 bd49 	b.w	800c330 <_dtoa_r+0xb30>
 800b89e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	ec51 0b17 	vmov	r0, r1, d7
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8ae:	f7f5 f913 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8b2:	4680      	mov	r8, r0
 800b8b4:	b158      	cbz	r0, 800b8ce <_dtoa_r+0xce>
 800b8b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8be:	b113      	cbz	r3, 800b8c6 <_dtoa_r+0xc6>
 800b8c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8c2:	4b84      	ldr	r3, [pc, #528]	@ (800bad4 <_dtoa_r+0x2d4>)
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bae8 <_dtoa_r+0x2e8>
 800b8ca:	f000 bd33 	b.w	800c334 <_dtoa_r+0xb34>
 800b8ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8d2:	aa16      	add	r2, sp, #88	@ 0x58
 800b8d4:	a917      	add	r1, sp, #92	@ 0x5c
 800b8d6:	4658      	mov	r0, fp
 800b8d8:	f001 f980 	bl	800cbdc <__d2b>
 800b8dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8e0:	4681      	mov	r9, r0
 800b8e2:	2e00      	cmp	r6, #0
 800b8e4:	d077      	beq.n	800b9d6 <_dtoa_r+0x1d6>
 800b8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b8f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b8fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b900:	4619      	mov	r1, r3
 800b902:	2200      	movs	r2, #0
 800b904:	4b74      	ldr	r3, [pc, #464]	@ (800bad8 <_dtoa_r+0x2d8>)
 800b906:	f7f4 fcc7 	bl	8000298 <__aeabi_dsub>
 800b90a:	a369      	add	r3, pc, #420	@ (adr r3, 800bab0 <_dtoa_r+0x2b0>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fe7a 	bl	8000608 <__aeabi_dmul>
 800b914:	a368      	add	r3, pc, #416	@ (adr r3, 800bab8 <_dtoa_r+0x2b8>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fcbf 	bl	800029c <__adddf3>
 800b91e:	4604      	mov	r4, r0
 800b920:	4630      	mov	r0, r6
 800b922:	460d      	mov	r5, r1
 800b924:	f7f4 fe06 	bl	8000534 <__aeabi_i2d>
 800b928:	a365      	add	r3, pc, #404	@ (adr r3, 800bac0 <_dtoa_r+0x2c0>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f4 fcaf 	bl	800029c <__adddf3>
 800b93e:	4604      	mov	r4, r0
 800b940:	460d      	mov	r5, r1
 800b942:	f7f5 f911 	bl	8000b68 <__aeabi_d2iz>
 800b946:	2200      	movs	r2, #0
 800b948:	4607      	mov	r7, r0
 800b94a:	2300      	movs	r3, #0
 800b94c:	4620      	mov	r0, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f5 f8cc 	bl	8000aec <__aeabi_dcmplt>
 800b954:	b140      	cbz	r0, 800b968 <_dtoa_r+0x168>
 800b956:	4638      	mov	r0, r7
 800b958:	f7f4 fdec 	bl	8000534 <__aeabi_i2d>
 800b95c:	4622      	mov	r2, r4
 800b95e:	462b      	mov	r3, r5
 800b960:	f7f5 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800b964:	b900      	cbnz	r0, 800b968 <_dtoa_r+0x168>
 800b966:	3f01      	subs	r7, #1
 800b968:	2f16      	cmp	r7, #22
 800b96a:	d851      	bhi.n	800ba10 <_dtoa_r+0x210>
 800b96c:	4b5b      	ldr	r3, [pc, #364]	@ (800badc <_dtoa_r+0x2dc>)
 800b96e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97a:	f7f5 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d048      	beq.n	800ba14 <_dtoa_r+0x214>
 800b982:	3f01      	subs	r7, #1
 800b984:	2300      	movs	r3, #0
 800b986:	9312      	str	r3, [sp, #72]	@ 0x48
 800b988:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b98a:	1b9b      	subs	r3, r3, r6
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	bf44      	itt	mi
 800b990:	f1c3 0801 	rsbmi	r8, r3, #1
 800b994:	2300      	movmi	r3, #0
 800b996:	9208      	str	r2, [sp, #32]
 800b998:	bf54      	ite	pl
 800b99a:	f04f 0800 	movpl.w	r8, #0
 800b99e:	9308      	strmi	r3, [sp, #32]
 800b9a0:	2f00      	cmp	r7, #0
 800b9a2:	db39      	blt.n	800ba18 <_dtoa_r+0x218>
 800b9a4:	9b08      	ldr	r3, [sp, #32]
 800b9a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9a8:	443b      	add	r3, r7
 800b9aa:	9308      	str	r3, [sp, #32]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b2:	2b09      	cmp	r3, #9
 800b9b4:	d864      	bhi.n	800ba80 <_dtoa_r+0x280>
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	bfc4      	itt	gt
 800b9ba:	3b04      	subgt	r3, #4
 800b9bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9c4:	bfcc      	ite	gt
 800b9c6:	2400      	movgt	r4, #0
 800b9c8:	2401      	movle	r4, #1
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d863      	bhi.n	800ba96 <_dtoa_r+0x296>
 800b9ce:	e8df f003 	tbb	[pc, r3]
 800b9d2:	372a      	.short	0x372a
 800b9d4:	5535      	.short	0x5535
 800b9d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9da:	441e      	add	r6, r3
 800b9dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	bfc1      	itttt	gt
 800b9e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9e8:	409f      	lslgt	r7, r3
 800b9ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9f2:	bfd6      	itet	le
 800b9f4:	f1c3 0320 	rsble	r3, r3, #32
 800b9f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b9fc:	fa04 f003 	lslle.w	r0, r4, r3
 800ba00:	f7f4 fd88 	bl	8000514 <__aeabi_ui2d>
 800ba04:	2201      	movs	r2, #1
 800ba06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba0a:	3e01      	subs	r6, #1
 800ba0c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba0e:	e777      	b.n	800b900 <_dtoa_r+0x100>
 800ba10:	2301      	movs	r3, #1
 800ba12:	e7b8      	b.n	800b986 <_dtoa_r+0x186>
 800ba14:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba16:	e7b7      	b.n	800b988 <_dtoa_r+0x188>
 800ba18:	427b      	negs	r3, r7
 800ba1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	eba8 0807 	sub.w	r8, r8, r7
 800ba22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba24:	e7c4      	b.n	800b9b0 <_dtoa_r+0x1b0>
 800ba26:	2300      	movs	r3, #0
 800ba28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	dc35      	bgt.n	800ba9c <_dtoa_r+0x29c>
 800ba30:	2301      	movs	r3, #1
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	9307      	str	r3, [sp, #28]
 800ba36:	461a      	mov	r2, r3
 800ba38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba3a:	e00b      	b.n	800ba54 <_dtoa_r+0x254>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e7f3      	b.n	800ba28 <_dtoa_r+0x228>
 800ba40:	2300      	movs	r3, #0
 800ba42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba46:	18fb      	adds	r3, r7, r3
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	9307      	str	r3, [sp, #28]
 800ba50:	bfb8      	it	lt
 800ba52:	2301      	movlt	r3, #1
 800ba54:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba58:	2100      	movs	r1, #0
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	f102 0514 	add.w	r5, r2, #20
 800ba60:	429d      	cmp	r5, r3
 800ba62:	d91f      	bls.n	800baa4 <_dtoa_r+0x2a4>
 800ba64:	6041      	str	r1, [r0, #4]
 800ba66:	4658      	mov	r0, fp
 800ba68:	f000 fd8e 	bl	800c588 <_Balloc>
 800ba6c:	4682      	mov	sl, r0
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d13c      	bne.n	800baec <_dtoa_r+0x2ec>
 800ba72:	4b1b      	ldr	r3, [pc, #108]	@ (800bae0 <_dtoa_r+0x2e0>)
 800ba74:	4602      	mov	r2, r0
 800ba76:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba7a:	e6d8      	b.n	800b82e <_dtoa_r+0x2e>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e7e0      	b.n	800ba42 <_dtoa_r+0x242>
 800ba80:	2401      	movs	r4, #1
 800ba82:	2300      	movs	r3, #0
 800ba84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba86:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	9307      	str	r3, [sp, #28]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2312      	movs	r3, #18
 800ba94:	e7d0      	b.n	800ba38 <_dtoa_r+0x238>
 800ba96:	2301      	movs	r3, #1
 800ba98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba9a:	e7f5      	b.n	800ba88 <_dtoa_r+0x288>
 800ba9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	9307      	str	r3, [sp, #28]
 800baa2:	e7d7      	b.n	800ba54 <_dtoa_r+0x254>
 800baa4:	3101      	adds	r1, #1
 800baa6:	0052      	lsls	r2, r2, #1
 800baa8:	e7d8      	b.n	800ba5c <_dtoa_r+0x25c>
 800baaa:	bf00      	nop
 800baac:	f3af 8000 	nop.w
 800bab0:	636f4361 	.word	0x636f4361
 800bab4:	3fd287a7 	.word	0x3fd287a7
 800bab8:	8b60c8b3 	.word	0x8b60c8b3
 800babc:	3fc68a28 	.word	0x3fc68a28
 800bac0:	509f79fb 	.word	0x509f79fb
 800bac4:	3fd34413 	.word	0x3fd34413
 800bac8:	0800d965 	.word	0x0800d965
 800bacc:	0800d97c 	.word	0x0800d97c
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	0800d935 	.word	0x0800d935
 800bad8:	3ff80000 	.word	0x3ff80000
 800badc:	0800da78 	.word	0x0800da78
 800bae0:	0800d9d4 	.word	0x0800d9d4
 800bae4:	0800d961 	.word	0x0800d961
 800bae8:	0800d934 	.word	0x0800d934
 800baec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baf0:	6018      	str	r0, [r3, #0]
 800baf2:	9b07      	ldr	r3, [sp, #28]
 800baf4:	2b0e      	cmp	r3, #14
 800baf6:	f200 80a4 	bhi.w	800bc42 <_dtoa_r+0x442>
 800bafa:	2c00      	cmp	r4, #0
 800bafc:	f000 80a1 	beq.w	800bc42 <_dtoa_r+0x442>
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	dd33      	ble.n	800bb6c <_dtoa_r+0x36c>
 800bb04:	4bad      	ldr	r3, [pc, #692]	@ (800bdbc <_dtoa_r+0x5bc>)
 800bb06:	f007 020f 	and.w	r2, r7, #15
 800bb0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb0e:	ed93 7b00 	vldr	d7, [r3]
 800bb12:	05f8      	lsls	r0, r7, #23
 800bb14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb1c:	d516      	bpl.n	800bb4c <_dtoa_r+0x34c>
 800bb1e:	4ba8      	ldr	r3, [pc, #672]	@ (800bdc0 <_dtoa_r+0x5c0>)
 800bb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb28:	f7f4 fe98 	bl	800085c <__aeabi_ddiv>
 800bb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb30:	f004 040f 	and.w	r4, r4, #15
 800bb34:	2603      	movs	r6, #3
 800bb36:	4da2      	ldr	r5, [pc, #648]	@ (800bdc0 <_dtoa_r+0x5c0>)
 800bb38:	b954      	cbnz	r4, 800bb50 <_dtoa_r+0x350>
 800bb3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb42:	f7f4 fe8b 	bl	800085c <__aeabi_ddiv>
 800bb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb4a:	e028      	b.n	800bb9e <_dtoa_r+0x39e>
 800bb4c:	2602      	movs	r6, #2
 800bb4e:	e7f2      	b.n	800bb36 <_dtoa_r+0x336>
 800bb50:	07e1      	lsls	r1, r4, #31
 800bb52:	d508      	bpl.n	800bb66 <_dtoa_r+0x366>
 800bb54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb5c:	f7f4 fd54 	bl	8000608 <__aeabi_dmul>
 800bb60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb64:	3601      	adds	r6, #1
 800bb66:	1064      	asrs	r4, r4, #1
 800bb68:	3508      	adds	r5, #8
 800bb6a:	e7e5      	b.n	800bb38 <_dtoa_r+0x338>
 800bb6c:	f000 80d2 	beq.w	800bd14 <_dtoa_r+0x514>
 800bb70:	427c      	negs	r4, r7
 800bb72:	4b92      	ldr	r3, [pc, #584]	@ (800bdbc <_dtoa_r+0x5bc>)
 800bb74:	4d92      	ldr	r5, [pc, #584]	@ (800bdc0 <_dtoa_r+0x5c0>)
 800bb76:	f004 020f 	and.w	r2, r4, #15
 800bb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb86:	f7f4 fd3f 	bl	8000608 <__aeabi_dmul>
 800bb8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb8e:	1124      	asrs	r4, r4, #4
 800bb90:	2300      	movs	r3, #0
 800bb92:	2602      	movs	r6, #2
 800bb94:	2c00      	cmp	r4, #0
 800bb96:	f040 80b2 	bne.w	800bcfe <_dtoa_r+0x4fe>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1d3      	bne.n	800bb46 <_dtoa_r+0x346>
 800bb9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bba0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80b7 	beq.w	800bd18 <_dtoa_r+0x518>
 800bbaa:	4b86      	ldr	r3, [pc, #536]	@ (800bdc4 <_dtoa_r+0x5c4>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 ff9b 	bl	8000aec <__aeabi_dcmplt>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f000 80ae 	beq.w	800bd18 <_dtoa_r+0x518>
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 80aa 	beq.w	800bd18 <_dtoa_r+0x518>
 800bbc4:	9b00      	ldr	r3, [sp, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dd37      	ble.n	800bc3a <_dtoa_r+0x43a>
 800bbca:	1e7b      	subs	r3, r7, #1
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4b7d      	ldr	r3, [pc, #500]	@ (800bdc8 <_dtoa_r+0x5c8>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f7f4 fd17 	bl	8000608 <__aeabi_dmul>
 800bbda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbde:	9c00      	ldr	r4, [sp, #0]
 800bbe0:	3601      	adds	r6, #1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7f4 fca6 	bl	8000534 <__aeabi_i2d>
 800bbe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbec:	f7f4 fd0c 	bl	8000608 <__aeabi_dmul>
 800bbf0:	4b76      	ldr	r3, [pc, #472]	@ (800bdcc <_dtoa_r+0x5cc>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f7f4 fb52 	bl	800029c <__adddf3>
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bbfe:	2c00      	cmp	r4, #0
 800bc00:	f040 808d 	bne.w	800bd1e <_dtoa_r+0x51e>
 800bc04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc08:	4b71      	ldr	r3, [pc, #452]	@ (800bdd0 <_dtoa_r+0x5d0>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f7f4 fb44 	bl	8000298 <__aeabi_dsub>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4633      	mov	r3, r6
 800bc1c:	f7f4 ff84 	bl	8000b28 <__aeabi_dcmpgt>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	f040 828b 	bne.w	800c13c <_dtoa_r+0x93c>
 800bc26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc30:	f7f4 ff5c 	bl	8000aec <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f040 8128 	bne.w	800be8a <_dtoa_r+0x68a>
 800bc3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f2c0 815a 	blt.w	800befe <_dtoa_r+0x6fe>
 800bc4a:	2f0e      	cmp	r7, #14
 800bc4c:	f300 8157 	bgt.w	800befe <_dtoa_r+0x6fe>
 800bc50:	4b5a      	ldr	r3, [pc, #360]	@ (800bdbc <_dtoa_r+0x5bc>)
 800bc52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc56:	ed93 7b00 	vldr	d7, [r3]
 800bc5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	ed8d 7b00 	vstr	d7, [sp]
 800bc62:	da03      	bge.n	800bc6c <_dtoa_r+0x46c>
 800bc64:	9b07      	ldr	r3, [sp, #28]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f340 8101 	ble.w	800be6e <_dtoa_r+0x66e>
 800bc6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc70:	4656      	mov	r6, sl
 800bc72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fdef 	bl	800085c <__aeabi_ddiv>
 800bc7e:	f7f4 ff73 	bl	8000b68 <__aeabi_d2iz>
 800bc82:	4680      	mov	r8, r0
 800bc84:	f7f4 fc56 	bl	8000534 <__aeabi_i2d>
 800bc88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc8c:	f7f4 fcbc 	bl	8000608 <__aeabi_dmul>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc9c:	f7f4 fafc 	bl	8000298 <__aeabi_dsub>
 800bca0:	f806 4b01 	strb.w	r4, [r6], #1
 800bca4:	9d07      	ldr	r5, [sp, #28]
 800bca6:	eba6 040a 	sub.w	r4, r6, sl
 800bcaa:	42a5      	cmp	r5, r4
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	f040 8117 	bne.w	800bee2 <_dtoa_r+0x6e2>
 800bcb4:	f7f4 faf2 	bl	800029c <__adddf3>
 800bcb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	460d      	mov	r5, r1
 800bcc0:	f7f4 ff32 	bl	8000b28 <__aeabi_dcmpgt>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f040 80f9 	bne.w	800bebc <_dtoa_r+0x6bc>
 800bcca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f4 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcd6:	b118      	cbz	r0, 800bce0 <_dtoa_r+0x4e0>
 800bcd8:	f018 0f01 	tst.w	r8, #1
 800bcdc:	f040 80ee 	bne.w	800bebc <_dtoa_r+0x6bc>
 800bce0:	4649      	mov	r1, r9
 800bce2:	4658      	mov	r0, fp
 800bce4:	f000 fc90 	bl	800c608 <_Bfree>
 800bce8:	2300      	movs	r3, #0
 800bcea:	7033      	strb	r3, [r6, #0]
 800bcec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcee:	3701      	adds	r7, #1
 800bcf0:	601f      	str	r7, [r3, #0]
 800bcf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 831d 	beq.w	800c334 <_dtoa_r+0xb34>
 800bcfa:	601e      	str	r6, [r3, #0]
 800bcfc:	e31a      	b.n	800c334 <_dtoa_r+0xb34>
 800bcfe:	07e2      	lsls	r2, r4, #31
 800bd00:	d505      	bpl.n	800bd0e <_dtoa_r+0x50e>
 800bd02:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd06:	f7f4 fc7f 	bl	8000608 <__aeabi_dmul>
 800bd0a:	3601      	adds	r6, #1
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	1064      	asrs	r4, r4, #1
 800bd10:	3508      	adds	r5, #8
 800bd12:	e73f      	b.n	800bb94 <_dtoa_r+0x394>
 800bd14:	2602      	movs	r6, #2
 800bd16:	e742      	b.n	800bb9e <_dtoa_r+0x39e>
 800bd18:	9c07      	ldr	r4, [sp, #28]
 800bd1a:	9704      	str	r7, [sp, #16]
 800bd1c:	e761      	b.n	800bbe2 <_dtoa_r+0x3e2>
 800bd1e:	4b27      	ldr	r3, [pc, #156]	@ (800bdbc <_dtoa_r+0x5bc>)
 800bd20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd2a:	4454      	add	r4, sl
 800bd2c:	2900      	cmp	r1, #0
 800bd2e:	d053      	beq.n	800bdd8 <_dtoa_r+0x5d8>
 800bd30:	4928      	ldr	r1, [pc, #160]	@ (800bdd4 <_dtoa_r+0x5d4>)
 800bd32:	2000      	movs	r0, #0
 800bd34:	f7f4 fd92 	bl	800085c <__aeabi_ddiv>
 800bd38:	4633      	mov	r3, r6
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	f7f4 faac 	bl	8000298 <__aeabi_dsub>
 800bd40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd44:	4656      	mov	r6, sl
 800bd46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd4a:	f7f4 ff0d 	bl	8000b68 <__aeabi_d2iz>
 800bd4e:	4605      	mov	r5, r0
 800bd50:	f7f4 fbf0 	bl	8000534 <__aeabi_i2d>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5c:	f7f4 fa9c 	bl	8000298 <__aeabi_dsub>
 800bd60:	3530      	adds	r5, #48	@ 0x30
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd6a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd72:	f7f4 febb 	bl	8000aec <__aeabi_dcmplt>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d171      	bne.n	800be5e <_dtoa_r+0x65e>
 800bd7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd7e:	4911      	ldr	r1, [pc, #68]	@ (800bdc4 <_dtoa_r+0x5c4>)
 800bd80:	2000      	movs	r0, #0
 800bd82:	f7f4 fa89 	bl	8000298 <__aeabi_dsub>
 800bd86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd8a:	f7f4 feaf 	bl	8000aec <__aeabi_dcmplt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f040 8095 	bne.w	800bebe <_dtoa_r+0x6be>
 800bd94:	42a6      	cmp	r6, r4
 800bd96:	f43f af50 	beq.w	800bc3a <_dtoa_r+0x43a>
 800bd9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc8 <_dtoa_r+0x5c8>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	4b08      	ldr	r3, [pc, #32]	@ (800bdc8 <_dtoa_r+0x5c8>)
 800bda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdac:	2200      	movs	r2, #0
 800bdae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb2:	f7f4 fc29 	bl	8000608 <__aeabi_dmul>
 800bdb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdba:	e7c4      	b.n	800bd46 <_dtoa_r+0x546>
 800bdbc:	0800da78 	.word	0x0800da78
 800bdc0:	0800da50 	.word	0x0800da50
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	401c0000 	.word	0x401c0000
 800bdd0:	40140000 	.word	0x40140000
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4628      	mov	r0, r5
 800bddc:	f7f4 fc14 	bl	8000608 <__aeabi_dmul>
 800bde0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bde4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bde6:	4656      	mov	r6, sl
 800bde8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdec:	f7f4 febc 	bl	8000b68 <__aeabi_d2iz>
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	f7f4 fb9f 	bl	8000534 <__aeabi_i2d>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfe:	f7f4 fa4b 	bl	8000298 <__aeabi_dsub>
 800be02:	3530      	adds	r5, #48	@ 0x30
 800be04:	f806 5b01 	strb.w	r5, [r6], #1
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	42a6      	cmp	r6, r4
 800be0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be12:	f04f 0200 	mov.w	r2, #0
 800be16:	d124      	bne.n	800be62 <_dtoa_r+0x662>
 800be18:	4bac      	ldr	r3, [pc, #688]	@ (800c0cc <_dtoa_r+0x8cc>)
 800be1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be1e:	f7f4 fa3d 	bl	800029c <__adddf3>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be2a:	f7f4 fe7d 	bl	8000b28 <__aeabi_dcmpgt>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d145      	bne.n	800bebe <_dtoa_r+0x6be>
 800be32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be36:	49a5      	ldr	r1, [pc, #660]	@ (800c0cc <_dtoa_r+0x8cc>)
 800be38:	2000      	movs	r0, #0
 800be3a:	f7f4 fa2d 	bl	8000298 <__aeabi_dsub>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be46:	f7f4 fe51 	bl	8000aec <__aeabi_dcmplt>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	f43f aef5 	beq.w	800bc3a <_dtoa_r+0x43a>
 800be50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be52:	1e73      	subs	r3, r6, #1
 800be54:	9315      	str	r3, [sp, #84]	@ 0x54
 800be56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be5a:	2b30      	cmp	r3, #48	@ 0x30
 800be5c:	d0f8      	beq.n	800be50 <_dtoa_r+0x650>
 800be5e:	9f04      	ldr	r7, [sp, #16]
 800be60:	e73e      	b.n	800bce0 <_dtoa_r+0x4e0>
 800be62:	4b9b      	ldr	r3, [pc, #620]	@ (800c0d0 <_dtoa_r+0x8d0>)
 800be64:	f7f4 fbd0 	bl	8000608 <__aeabi_dmul>
 800be68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6c:	e7bc      	b.n	800bde8 <_dtoa_r+0x5e8>
 800be6e:	d10c      	bne.n	800be8a <_dtoa_r+0x68a>
 800be70:	4b98      	ldr	r3, [pc, #608]	@ (800c0d4 <_dtoa_r+0x8d4>)
 800be72:	2200      	movs	r2, #0
 800be74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be78:	f7f4 fbc6 	bl	8000608 <__aeabi_dmul>
 800be7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be80:	f7f4 fe48 	bl	8000b14 <__aeabi_dcmpge>
 800be84:	2800      	cmp	r0, #0
 800be86:	f000 8157 	beq.w	800c138 <_dtoa_r+0x938>
 800be8a:	2400      	movs	r4, #0
 800be8c:	4625      	mov	r5, r4
 800be8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be90:	43db      	mvns	r3, r3
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	4656      	mov	r6, sl
 800be96:	2700      	movs	r7, #0
 800be98:	4621      	mov	r1, r4
 800be9a:	4658      	mov	r0, fp
 800be9c:	f000 fbb4 	bl	800c608 <_Bfree>
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	d0dc      	beq.n	800be5e <_dtoa_r+0x65e>
 800bea4:	b12f      	cbz	r7, 800beb2 <_dtoa_r+0x6b2>
 800bea6:	42af      	cmp	r7, r5
 800bea8:	d003      	beq.n	800beb2 <_dtoa_r+0x6b2>
 800beaa:	4639      	mov	r1, r7
 800beac:	4658      	mov	r0, fp
 800beae:	f000 fbab 	bl	800c608 <_Bfree>
 800beb2:	4629      	mov	r1, r5
 800beb4:	4658      	mov	r0, fp
 800beb6:	f000 fba7 	bl	800c608 <_Bfree>
 800beba:	e7d0      	b.n	800be5e <_dtoa_r+0x65e>
 800bebc:	9704      	str	r7, [sp, #16]
 800bebe:	4633      	mov	r3, r6
 800bec0:	461e      	mov	r6, r3
 800bec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bec6:	2a39      	cmp	r2, #57	@ 0x39
 800bec8:	d107      	bne.n	800beda <_dtoa_r+0x6da>
 800beca:	459a      	cmp	sl, r3
 800becc:	d1f8      	bne.n	800bec0 <_dtoa_r+0x6c0>
 800bece:	9a04      	ldr	r2, [sp, #16]
 800bed0:	3201      	adds	r2, #1
 800bed2:	9204      	str	r2, [sp, #16]
 800bed4:	2230      	movs	r2, #48	@ 0x30
 800bed6:	f88a 2000 	strb.w	r2, [sl]
 800beda:	781a      	ldrb	r2, [r3, #0]
 800bedc:	3201      	adds	r2, #1
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e7bd      	b.n	800be5e <_dtoa_r+0x65e>
 800bee2:	4b7b      	ldr	r3, [pc, #492]	@ (800c0d0 <_dtoa_r+0x8d0>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	f7f4 fb8f 	bl	8000608 <__aeabi_dmul>
 800beea:	2200      	movs	r2, #0
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	f7f4 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f43f aebb 	beq.w	800bc72 <_dtoa_r+0x472>
 800befc:	e6f0      	b.n	800bce0 <_dtoa_r+0x4e0>
 800befe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	f000 80db 	beq.w	800c0bc <_dtoa_r+0x8bc>
 800bf06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf08:	2a01      	cmp	r2, #1
 800bf0a:	f300 80bf 	bgt.w	800c08c <_dtoa_r+0x88c>
 800bf0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	f000 80b7 	beq.w	800c084 <_dtoa_r+0x884>
 800bf16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf1c:	4646      	mov	r6, r8
 800bf1e:	9a08      	ldr	r2, [sp, #32]
 800bf20:	2101      	movs	r1, #1
 800bf22:	441a      	add	r2, r3
 800bf24:	4658      	mov	r0, fp
 800bf26:	4498      	add	r8, r3
 800bf28:	9208      	str	r2, [sp, #32]
 800bf2a:	f000 fc21 	bl	800c770 <__i2b>
 800bf2e:	4605      	mov	r5, r0
 800bf30:	b15e      	cbz	r6, 800bf4a <_dtoa_r+0x74a>
 800bf32:	9b08      	ldr	r3, [sp, #32]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd08      	ble.n	800bf4a <_dtoa_r+0x74a>
 800bf38:	42b3      	cmp	r3, r6
 800bf3a:	9a08      	ldr	r2, [sp, #32]
 800bf3c:	bfa8      	it	ge
 800bf3e:	4633      	movge	r3, r6
 800bf40:	eba8 0803 	sub.w	r8, r8, r3
 800bf44:	1af6      	subs	r6, r6, r3
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	9308      	str	r3, [sp, #32]
 800bf4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf4c:	b1f3      	cbz	r3, 800bf8c <_dtoa_r+0x78c>
 800bf4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 80b7 	beq.w	800c0c4 <_dtoa_r+0x8c4>
 800bf56:	b18c      	cbz	r4, 800bf7c <_dtoa_r+0x77c>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	4658      	mov	r0, fp
 800bf5e:	f000 fcc7 	bl	800c8f0 <__pow5mult>
 800bf62:	464a      	mov	r2, r9
 800bf64:	4601      	mov	r1, r0
 800bf66:	4605      	mov	r5, r0
 800bf68:	4658      	mov	r0, fp
 800bf6a:	f000 fc17 	bl	800c79c <__multiply>
 800bf6e:	4649      	mov	r1, r9
 800bf70:	9004      	str	r0, [sp, #16]
 800bf72:	4658      	mov	r0, fp
 800bf74:	f000 fb48 	bl	800c608 <_Bfree>
 800bf78:	9b04      	ldr	r3, [sp, #16]
 800bf7a:	4699      	mov	r9, r3
 800bf7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf7e:	1b1a      	subs	r2, r3, r4
 800bf80:	d004      	beq.n	800bf8c <_dtoa_r+0x78c>
 800bf82:	4649      	mov	r1, r9
 800bf84:	4658      	mov	r0, fp
 800bf86:	f000 fcb3 	bl	800c8f0 <__pow5mult>
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	4658      	mov	r0, fp
 800bf90:	f000 fbee 	bl	800c770 <__i2b>
 800bf94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf96:	4604      	mov	r4, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 81cf 	beq.w	800c33c <_dtoa_r+0xb3c>
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	4601      	mov	r1, r0
 800bfa2:	4658      	mov	r0, fp
 800bfa4:	f000 fca4 	bl	800c8f0 <__pow5mult>
 800bfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	4604      	mov	r4, r0
 800bfae:	f300 8095 	bgt.w	800c0dc <_dtoa_r+0x8dc>
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f040 8087 	bne.w	800c0c8 <_dtoa_r+0x8c8>
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f040 8089 	bne.w	800c0d8 <_dtoa_r+0x8d8>
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfcc:	0d1b      	lsrs	r3, r3, #20
 800bfce:	051b      	lsls	r3, r3, #20
 800bfd0:	b12b      	cbz	r3, 800bfde <_dtoa_r+0x7de>
 800bfd2:	9b08      	ldr	r3, [sp, #32]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	9308      	str	r3, [sp, #32]
 800bfd8:	f108 0801 	add.w	r8, r8, #1
 800bfdc:	2301      	movs	r3, #1
 800bfde:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 81b0 	beq.w	800c348 <_dtoa_r+0xb48>
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfee:	6918      	ldr	r0, [r3, #16]
 800bff0:	f000 fb72 	bl	800c6d8 <__hi0bits>
 800bff4:	f1c0 0020 	rsb	r0, r0, #32
 800bff8:	9b08      	ldr	r3, [sp, #32]
 800bffa:	4418      	add	r0, r3
 800bffc:	f010 001f 	ands.w	r0, r0, #31
 800c000:	d077      	beq.n	800c0f2 <_dtoa_r+0x8f2>
 800c002:	f1c0 0320 	rsb	r3, r0, #32
 800c006:	2b04      	cmp	r3, #4
 800c008:	dd6b      	ble.n	800c0e2 <_dtoa_r+0x8e2>
 800c00a:	9b08      	ldr	r3, [sp, #32]
 800c00c:	f1c0 001c 	rsb	r0, r0, #28
 800c010:	4403      	add	r3, r0
 800c012:	4480      	add	r8, r0
 800c014:	4406      	add	r6, r0
 800c016:	9308      	str	r3, [sp, #32]
 800c018:	f1b8 0f00 	cmp.w	r8, #0
 800c01c:	dd05      	ble.n	800c02a <_dtoa_r+0x82a>
 800c01e:	4649      	mov	r1, r9
 800c020:	4642      	mov	r2, r8
 800c022:	4658      	mov	r0, fp
 800c024:	f000 fcbe 	bl	800c9a4 <__lshift>
 800c028:	4681      	mov	r9, r0
 800c02a:	9b08      	ldr	r3, [sp, #32]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd05      	ble.n	800c03c <_dtoa_r+0x83c>
 800c030:	4621      	mov	r1, r4
 800c032:	461a      	mov	r2, r3
 800c034:	4658      	mov	r0, fp
 800c036:	f000 fcb5 	bl	800c9a4 <__lshift>
 800c03a:	4604      	mov	r4, r0
 800c03c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d059      	beq.n	800c0f6 <_dtoa_r+0x8f6>
 800c042:	4621      	mov	r1, r4
 800c044:	4648      	mov	r0, r9
 800c046:	f000 fd19 	bl	800ca7c <__mcmp>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	da53      	bge.n	800c0f6 <_dtoa_r+0x8f6>
 800c04e:	1e7b      	subs	r3, r7, #1
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	4649      	mov	r1, r9
 800c054:	2300      	movs	r3, #0
 800c056:	220a      	movs	r2, #10
 800c058:	4658      	mov	r0, fp
 800c05a:	f000 faf7 	bl	800c64c <__multadd>
 800c05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c060:	4681      	mov	r9, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 8172 	beq.w	800c34c <_dtoa_r+0xb4c>
 800c068:	2300      	movs	r3, #0
 800c06a:	4629      	mov	r1, r5
 800c06c:	220a      	movs	r2, #10
 800c06e:	4658      	mov	r0, fp
 800c070:	f000 faec 	bl	800c64c <__multadd>
 800c074:	9b00      	ldr	r3, [sp, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	4605      	mov	r5, r0
 800c07a:	dc67      	bgt.n	800c14c <_dtoa_r+0x94c>
 800c07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dc41      	bgt.n	800c106 <_dtoa_r+0x906>
 800c082:	e063      	b.n	800c14c <_dtoa_r+0x94c>
 800c084:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c086:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c08a:	e746      	b.n	800bf1a <_dtoa_r+0x71a>
 800c08c:	9b07      	ldr	r3, [sp, #28]
 800c08e:	1e5c      	subs	r4, r3, #1
 800c090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c092:	42a3      	cmp	r3, r4
 800c094:	bfbf      	itttt	lt
 800c096:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c098:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c09a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c09c:	1ae3      	sublt	r3, r4, r3
 800c09e:	bfb4      	ite	lt
 800c0a0:	18d2      	addlt	r2, r2, r3
 800c0a2:	1b1c      	subge	r4, r3, r4
 800c0a4:	9b07      	ldr	r3, [sp, #28]
 800c0a6:	bfbc      	itt	lt
 800c0a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0aa:	2400      	movlt	r4, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bfb5      	itete	lt
 800c0b0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0b4:	9b07      	ldrge	r3, [sp, #28]
 800c0b6:	2300      	movlt	r3, #0
 800c0b8:	4646      	movge	r6, r8
 800c0ba:	e730      	b.n	800bf1e <_dtoa_r+0x71e>
 800c0bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0c0:	4646      	mov	r6, r8
 800c0c2:	e735      	b.n	800bf30 <_dtoa_r+0x730>
 800c0c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0c6:	e75c      	b.n	800bf82 <_dtoa_r+0x782>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e788      	b.n	800bfde <_dtoa_r+0x7de>
 800c0cc:	3fe00000 	.word	0x3fe00000
 800c0d0:	40240000 	.word	0x40240000
 800c0d4:	40140000 	.word	0x40140000
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	e780      	b.n	800bfde <_dtoa_r+0x7de>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e0:	e782      	b.n	800bfe8 <_dtoa_r+0x7e8>
 800c0e2:	d099      	beq.n	800c018 <_dtoa_r+0x818>
 800c0e4:	9a08      	ldr	r2, [sp, #32]
 800c0e6:	331c      	adds	r3, #28
 800c0e8:	441a      	add	r2, r3
 800c0ea:	4498      	add	r8, r3
 800c0ec:	441e      	add	r6, r3
 800c0ee:	9208      	str	r2, [sp, #32]
 800c0f0:	e792      	b.n	800c018 <_dtoa_r+0x818>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	e7f6      	b.n	800c0e4 <_dtoa_r+0x8e4>
 800c0f6:	9b07      	ldr	r3, [sp, #28]
 800c0f8:	9704      	str	r7, [sp, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dc20      	bgt.n	800c140 <_dtoa_r+0x940>
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c102:	2b02      	cmp	r3, #2
 800c104:	dd1e      	ble.n	800c144 <_dtoa_r+0x944>
 800c106:	9b00      	ldr	r3, [sp, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f47f aec0 	bne.w	800be8e <_dtoa_r+0x68e>
 800c10e:	4621      	mov	r1, r4
 800c110:	2205      	movs	r2, #5
 800c112:	4658      	mov	r0, fp
 800c114:	f000 fa9a 	bl	800c64c <__multadd>
 800c118:	4601      	mov	r1, r0
 800c11a:	4604      	mov	r4, r0
 800c11c:	4648      	mov	r0, r9
 800c11e:	f000 fcad 	bl	800ca7c <__mcmp>
 800c122:	2800      	cmp	r0, #0
 800c124:	f77f aeb3 	ble.w	800be8e <_dtoa_r+0x68e>
 800c128:	4656      	mov	r6, sl
 800c12a:	2331      	movs	r3, #49	@ 0x31
 800c12c:	f806 3b01 	strb.w	r3, [r6], #1
 800c130:	9b04      	ldr	r3, [sp, #16]
 800c132:	3301      	adds	r3, #1
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	e6ae      	b.n	800be96 <_dtoa_r+0x696>
 800c138:	9c07      	ldr	r4, [sp, #28]
 800c13a:	9704      	str	r7, [sp, #16]
 800c13c:	4625      	mov	r5, r4
 800c13e:	e7f3      	b.n	800c128 <_dtoa_r+0x928>
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 8104 	beq.w	800c354 <_dtoa_r+0xb54>
 800c14c:	2e00      	cmp	r6, #0
 800c14e:	dd05      	ble.n	800c15c <_dtoa_r+0x95c>
 800c150:	4629      	mov	r1, r5
 800c152:	4632      	mov	r2, r6
 800c154:	4658      	mov	r0, fp
 800c156:	f000 fc25 	bl	800c9a4 <__lshift>
 800c15a:	4605      	mov	r5, r0
 800c15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d05a      	beq.n	800c218 <_dtoa_r+0xa18>
 800c162:	6869      	ldr	r1, [r5, #4]
 800c164:	4658      	mov	r0, fp
 800c166:	f000 fa0f 	bl	800c588 <_Balloc>
 800c16a:	4606      	mov	r6, r0
 800c16c:	b928      	cbnz	r0, 800c17a <_dtoa_r+0x97a>
 800c16e:	4b84      	ldr	r3, [pc, #528]	@ (800c380 <_dtoa_r+0xb80>)
 800c170:	4602      	mov	r2, r0
 800c172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c176:	f7ff bb5a 	b.w	800b82e <_dtoa_r+0x2e>
 800c17a:	692a      	ldr	r2, [r5, #16]
 800c17c:	3202      	adds	r2, #2
 800c17e:	0092      	lsls	r2, r2, #2
 800c180:	f105 010c 	add.w	r1, r5, #12
 800c184:	300c      	adds	r0, #12
 800c186:	f7ff faa2 	bl	800b6ce <memcpy>
 800c18a:	2201      	movs	r2, #1
 800c18c:	4631      	mov	r1, r6
 800c18e:	4658      	mov	r0, fp
 800c190:	f000 fc08 	bl	800c9a4 <__lshift>
 800c194:	f10a 0301 	add.w	r3, sl, #1
 800c198:	9307      	str	r3, [sp, #28]
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	4453      	add	r3, sl
 800c19e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a0:	9b02      	ldr	r3, [sp, #8]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	462f      	mov	r7, r5
 800c1a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	9b07      	ldr	r3, [sp, #28]
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	f7ff fa98 	bl	800b6ea <quorem>
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	9002      	str	r0, [sp, #8]
 800c1be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1c2:	4648      	mov	r0, r9
 800c1c4:	f000 fc5a 	bl	800ca7c <__mcmp>
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	9008      	str	r0, [sp, #32]
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4658      	mov	r0, fp
 800c1d0:	f000 fc70 	bl	800cab4 <__mdiff>
 800c1d4:	68c2      	ldr	r2, [r0, #12]
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	bb02      	cbnz	r2, 800c21c <_dtoa_r+0xa1c>
 800c1da:	4601      	mov	r1, r0
 800c1dc:	4648      	mov	r0, r9
 800c1de:	f000 fc4d 	bl	800ca7c <__mcmp>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4658      	mov	r0, fp
 800c1e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1ea:	f000 fa0d 	bl	800c608 <_Bfree>
 800c1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f2:	9e07      	ldr	r6, [sp, #28]
 800c1f4:	ea43 0102 	orr.w	r1, r3, r2
 800c1f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1fa:	4319      	orrs	r1, r3
 800c1fc:	d110      	bne.n	800c220 <_dtoa_r+0xa20>
 800c1fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c202:	d029      	beq.n	800c258 <_dtoa_r+0xa58>
 800c204:	9b08      	ldr	r3, [sp, #32]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd02      	ble.n	800c210 <_dtoa_r+0xa10>
 800c20a:	9b02      	ldr	r3, [sp, #8]
 800c20c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c210:	9b00      	ldr	r3, [sp, #0]
 800c212:	f883 8000 	strb.w	r8, [r3]
 800c216:	e63f      	b.n	800be98 <_dtoa_r+0x698>
 800c218:	4628      	mov	r0, r5
 800c21a:	e7bb      	b.n	800c194 <_dtoa_r+0x994>
 800c21c:	2201      	movs	r2, #1
 800c21e:	e7e1      	b.n	800c1e4 <_dtoa_r+0x9e4>
 800c220:	9b08      	ldr	r3, [sp, #32]
 800c222:	2b00      	cmp	r3, #0
 800c224:	db04      	blt.n	800c230 <_dtoa_r+0xa30>
 800c226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c228:	430b      	orrs	r3, r1
 800c22a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c22c:	430b      	orrs	r3, r1
 800c22e:	d120      	bne.n	800c272 <_dtoa_r+0xa72>
 800c230:	2a00      	cmp	r2, #0
 800c232:	dded      	ble.n	800c210 <_dtoa_r+0xa10>
 800c234:	4649      	mov	r1, r9
 800c236:	2201      	movs	r2, #1
 800c238:	4658      	mov	r0, fp
 800c23a:	f000 fbb3 	bl	800c9a4 <__lshift>
 800c23e:	4621      	mov	r1, r4
 800c240:	4681      	mov	r9, r0
 800c242:	f000 fc1b 	bl	800ca7c <__mcmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	dc03      	bgt.n	800c252 <_dtoa_r+0xa52>
 800c24a:	d1e1      	bne.n	800c210 <_dtoa_r+0xa10>
 800c24c:	f018 0f01 	tst.w	r8, #1
 800c250:	d0de      	beq.n	800c210 <_dtoa_r+0xa10>
 800c252:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c256:	d1d8      	bne.n	800c20a <_dtoa_r+0xa0a>
 800c258:	9a00      	ldr	r2, [sp, #0]
 800c25a:	2339      	movs	r3, #57	@ 0x39
 800c25c:	7013      	strb	r3, [r2, #0]
 800c25e:	4633      	mov	r3, r6
 800c260:	461e      	mov	r6, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c268:	2a39      	cmp	r2, #57	@ 0x39
 800c26a:	d052      	beq.n	800c312 <_dtoa_r+0xb12>
 800c26c:	3201      	adds	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]
 800c270:	e612      	b.n	800be98 <_dtoa_r+0x698>
 800c272:	2a00      	cmp	r2, #0
 800c274:	dd07      	ble.n	800c286 <_dtoa_r+0xa86>
 800c276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c27a:	d0ed      	beq.n	800c258 <_dtoa_r+0xa58>
 800c27c:	9a00      	ldr	r2, [sp, #0]
 800c27e:	f108 0301 	add.w	r3, r8, #1
 800c282:	7013      	strb	r3, [r2, #0]
 800c284:	e608      	b.n	800be98 <_dtoa_r+0x698>
 800c286:	9b07      	ldr	r3, [sp, #28]
 800c288:	9a07      	ldr	r2, [sp, #28]
 800c28a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c290:	4293      	cmp	r3, r2
 800c292:	d028      	beq.n	800c2e6 <_dtoa_r+0xae6>
 800c294:	4649      	mov	r1, r9
 800c296:	2300      	movs	r3, #0
 800c298:	220a      	movs	r2, #10
 800c29a:	4658      	mov	r0, fp
 800c29c:	f000 f9d6 	bl	800c64c <__multadd>
 800c2a0:	42af      	cmp	r7, r5
 800c2a2:	4681      	mov	r9, r0
 800c2a4:	f04f 0300 	mov.w	r3, #0
 800c2a8:	f04f 020a 	mov.w	r2, #10
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	4658      	mov	r0, fp
 800c2b0:	d107      	bne.n	800c2c2 <_dtoa_r+0xac2>
 800c2b2:	f000 f9cb 	bl	800c64c <__multadd>
 800c2b6:	4607      	mov	r7, r0
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	9b07      	ldr	r3, [sp, #28]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	9307      	str	r3, [sp, #28]
 800c2c0:	e774      	b.n	800c1ac <_dtoa_r+0x9ac>
 800c2c2:	f000 f9c3 	bl	800c64c <__multadd>
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	220a      	movs	r2, #10
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f000 f9bc 	bl	800c64c <__multadd>
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	e7f0      	b.n	800c2ba <_dtoa_r+0xaba>
 800c2d8:	9b00      	ldr	r3, [sp, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	bfcc      	ite	gt
 800c2de:	461e      	movgt	r6, r3
 800c2e0:	2601      	movle	r6, #1
 800c2e2:	4456      	add	r6, sl
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4658      	mov	r0, fp
 800c2ec:	f000 fb5a 	bl	800c9a4 <__lshift>
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	f000 fbc2 	bl	800ca7c <__mcmp>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	dcb0      	bgt.n	800c25e <_dtoa_r+0xa5e>
 800c2fc:	d102      	bne.n	800c304 <_dtoa_r+0xb04>
 800c2fe:	f018 0f01 	tst.w	r8, #1
 800c302:	d1ac      	bne.n	800c25e <_dtoa_r+0xa5e>
 800c304:	4633      	mov	r3, r6
 800c306:	461e      	mov	r6, r3
 800c308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c30c:	2a30      	cmp	r2, #48	@ 0x30
 800c30e:	d0fa      	beq.n	800c306 <_dtoa_r+0xb06>
 800c310:	e5c2      	b.n	800be98 <_dtoa_r+0x698>
 800c312:	459a      	cmp	sl, r3
 800c314:	d1a4      	bne.n	800c260 <_dtoa_r+0xa60>
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	3301      	adds	r3, #1
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	2331      	movs	r3, #49	@ 0x31
 800c31e:	f88a 3000 	strb.w	r3, [sl]
 800c322:	e5b9      	b.n	800be98 <_dtoa_r+0x698>
 800c324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c326:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c384 <_dtoa_r+0xb84>
 800c32a:	b11b      	cbz	r3, 800c334 <_dtoa_r+0xb34>
 800c32c:	f10a 0308 	add.w	r3, sl, #8
 800c330:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	4650      	mov	r0, sl
 800c336:	b019      	add	sp, #100	@ 0x64
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c33e:	2b01      	cmp	r3, #1
 800c340:	f77f ae37 	ble.w	800bfb2 <_dtoa_r+0x7b2>
 800c344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c346:	930a      	str	r3, [sp, #40]	@ 0x28
 800c348:	2001      	movs	r0, #1
 800c34a:	e655      	b.n	800bff8 <_dtoa_r+0x7f8>
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f77f aed6 	ble.w	800c100 <_dtoa_r+0x900>
 800c354:	4656      	mov	r6, sl
 800c356:	4621      	mov	r1, r4
 800c358:	4648      	mov	r0, r9
 800c35a:	f7ff f9c6 	bl	800b6ea <quorem>
 800c35e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c362:	f806 8b01 	strb.w	r8, [r6], #1
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	eba6 020a 	sub.w	r2, r6, sl
 800c36c:	4293      	cmp	r3, r2
 800c36e:	ddb3      	ble.n	800c2d8 <_dtoa_r+0xad8>
 800c370:	4649      	mov	r1, r9
 800c372:	2300      	movs	r3, #0
 800c374:	220a      	movs	r2, #10
 800c376:	4658      	mov	r0, fp
 800c378:	f000 f968 	bl	800c64c <__multadd>
 800c37c:	4681      	mov	r9, r0
 800c37e:	e7ea      	b.n	800c356 <_dtoa_r+0xb56>
 800c380:	0800d9d4 	.word	0x0800d9d4
 800c384:	0800d958 	.word	0x0800d958

0800c388 <_free_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4605      	mov	r5, r0
 800c38c:	2900      	cmp	r1, #0
 800c38e:	d041      	beq.n	800c414 <_free_r+0x8c>
 800c390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c394:	1f0c      	subs	r4, r1, #4
 800c396:	2b00      	cmp	r3, #0
 800c398:	bfb8      	it	lt
 800c39a:	18e4      	addlt	r4, r4, r3
 800c39c:	f000 f8e8 	bl	800c570 <__malloc_lock>
 800c3a0:	4a1d      	ldr	r2, [pc, #116]	@ (800c418 <_free_r+0x90>)
 800c3a2:	6813      	ldr	r3, [r2, #0]
 800c3a4:	b933      	cbnz	r3, 800c3b4 <_free_r+0x2c>
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	6014      	str	r4, [r2, #0]
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b0:	f000 b8e4 	b.w	800c57c <__malloc_unlock>
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	d908      	bls.n	800c3ca <_free_r+0x42>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	1821      	adds	r1, r4, r0
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	bf01      	itttt	eq
 800c3c0:	6819      	ldreq	r1, [r3, #0]
 800c3c2:	685b      	ldreq	r3, [r3, #4]
 800c3c4:	1809      	addeq	r1, r1, r0
 800c3c6:	6021      	streq	r1, [r4, #0]
 800c3c8:	e7ed      	b.n	800c3a6 <_free_r+0x1e>
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	b10b      	cbz	r3, 800c3d4 <_free_r+0x4c>
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	d9fa      	bls.n	800c3ca <_free_r+0x42>
 800c3d4:	6811      	ldr	r1, [r2, #0]
 800c3d6:	1850      	adds	r0, r2, r1
 800c3d8:	42a0      	cmp	r0, r4
 800c3da:	d10b      	bne.n	800c3f4 <_free_r+0x6c>
 800c3dc:	6820      	ldr	r0, [r4, #0]
 800c3de:	4401      	add	r1, r0
 800c3e0:	1850      	adds	r0, r2, r1
 800c3e2:	4283      	cmp	r3, r0
 800c3e4:	6011      	str	r1, [r2, #0]
 800c3e6:	d1e0      	bne.n	800c3aa <_free_r+0x22>
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	6053      	str	r3, [r2, #4]
 800c3ee:	4408      	add	r0, r1
 800c3f0:	6010      	str	r0, [r2, #0]
 800c3f2:	e7da      	b.n	800c3aa <_free_r+0x22>
 800c3f4:	d902      	bls.n	800c3fc <_free_r+0x74>
 800c3f6:	230c      	movs	r3, #12
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	e7d6      	b.n	800c3aa <_free_r+0x22>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	1821      	adds	r1, r4, r0
 800c400:	428b      	cmp	r3, r1
 800c402:	bf04      	itt	eq
 800c404:	6819      	ldreq	r1, [r3, #0]
 800c406:	685b      	ldreq	r3, [r3, #4]
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	bf04      	itt	eq
 800c40c:	1809      	addeq	r1, r1, r0
 800c40e:	6021      	streq	r1, [r4, #0]
 800c410:	6054      	str	r4, [r2, #4]
 800c412:	e7ca      	b.n	800c3aa <_free_r+0x22>
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	20005134 	.word	0x20005134

0800c41c <malloc>:
 800c41c:	4b02      	ldr	r3, [pc, #8]	@ (800c428 <malloc+0xc>)
 800c41e:	4601      	mov	r1, r0
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	f000 b825 	b.w	800c470 <_malloc_r>
 800c426:	bf00      	nop
 800c428:	20000028 	.word	0x20000028

0800c42c <sbrk_aligned>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	4e0f      	ldr	r6, [pc, #60]	@ (800c46c <sbrk_aligned+0x40>)
 800c430:	460c      	mov	r4, r1
 800c432:	6831      	ldr	r1, [r6, #0]
 800c434:	4605      	mov	r5, r0
 800c436:	b911      	cbnz	r1, 800c43e <sbrk_aligned+0x12>
 800c438:	f000 fcd4 	bl	800cde4 <_sbrk_r>
 800c43c:	6030      	str	r0, [r6, #0]
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f000 fccf 	bl	800cde4 <_sbrk_r>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	d103      	bne.n	800c452 <sbrk_aligned+0x26>
 800c44a:	f04f 34ff 	mov.w	r4, #4294967295
 800c44e:	4620      	mov	r0, r4
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	1cc4      	adds	r4, r0, #3
 800c454:	f024 0403 	bic.w	r4, r4, #3
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d0f8      	beq.n	800c44e <sbrk_aligned+0x22>
 800c45c:	1a21      	subs	r1, r4, r0
 800c45e:	4628      	mov	r0, r5
 800c460:	f000 fcc0 	bl	800cde4 <_sbrk_r>
 800c464:	3001      	adds	r0, #1
 800c466:	d1f2      	bne.n	800c44e <sbrk_aligned+0x22>
 800c468:	e7ef      	b.n	800c44a <sbrk_aligned+0x1e>
 800c46a:	bf00      	nop
 800c46c:	20005130 	.word	0x20005130

0800c470 <_malloc_r>:
 800c470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c474:	1ccd      	adds	r5, r1, #3
 800c476:	f025 0503 	bic.w	r5, r5, #3
 800c47a:	3508      	adds	r5, #8
 800c47c:	2d0c      	cmp	r5, #12
 800c47e:	bf38      	it	cc
 800c480:	250c      	movcc	r5, #12
 800c482:	2d00      	cmp	r5, #0
 800c484:	4606      	mov	r6, r0
 800c486:	db01      	blt.n	800c48c <_malloc_r+0x1c>
 800c488:	42a9      	cmp	r1, r5
 800c48a:	d904      	bls.n	800c496 <_malloc_r+0x26>
 800c48c:	230c      	movs	r3, #12
 800c48e:	6033      	str	r3, [r6, #0]
 800c490:	2000      	movs	r0, #0
 800c492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c56c <_malloc_r+0xfc>
 800c49a:	f000 f869 	bl	800c570 <__malloc_lock>
 800c49e:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	bb44      	cbnz	r4, 800c4f8 <_malloc_r+0x88>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7ff ffbf 	bl	800c42c <sbrk_aligned>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	d158      	bne.n	800c566 <_malloc_r+0xf6>
 800c4b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c4b8:	4627      	mov	r7, r4
 800c4ba:	2f00      	cmp	r7, #0
 800c4bc:	d143      	bne.n	800c546 <_malloc_r+0xd6>
 800c4be:	2c00      	cmp	r4, #0
 800c4c0:	d04b      	beq.n	800c55a <_malloc_r+0xea>
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	eb04 0903 	add.w	r9, r4, r3
 800c4cc:	f000 fc8a 	bl	800cde4 <_sbrk_r>
 800c4d0:	4581      	cmp	r9, r0
 800c4d2:	d142      	bne.n	800c55a <_malloc_r+0xea>
 800c4d4:	6821      	ldr	r1, [r4, #0]
 800c4d6:	1a6d      	subs	r5, r5, r1
 800c4d8:	4629      	mov	r1, r5
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7ff ffa6 	bl	800c42c <sbrk_aligned>
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d03a      	beq.n	800c55a <_malloc_r+0xea>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	442b      	add	r3, r5
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	bb62      	cbnz	r2, 800c54c <_malloc_r+0xdc>
 800c4f2:	f8c8 7000 	str.w	r7, [r8]
 800c4f6:	e00f      	b.n	800c518 <_malloc_r+0xa8>
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	1b52      	subs	r2, r2, r5
 800c4fc:	d420      	bmi.n	800c540 <_malloc_r+0xd0>
 800c4fe:	2a0b      	cmp	r2, #11
 800c500:	d917      	bls.n	800c532 <_malloc_r+0xc2>
 800c502:	1961      	adds	r1, r4, r5
 800c504:	42a3      	cmp	r3, r4
 800c506:	6025      	str	r5, [r4, #0]
 800c508:	bf18      	it	ne
 800c50a:	6059      	strne	r1, [r3, #4]
 800c50c:	6863      	ldr	r3, [r4, #4]
 800c50e:	bf08      	it	eq
 800c510:	f8c8 1000 	streq.w	r1, [r8]
 800c514:	5162      	str	r2, [r4, r5]
 800c516:	604b      	str	r3, [r1, #4]
 800c518:	4630      	mov	r0, r6
 800c51a:	f000 f82f 	bl	800c57c <__malloc_unlock>
 800c51e:	f104 000b 	add.w	r0, r4, #11
 800c522:	1d23      	adds	r3, r4, #4
 800c524:	f020 0007 	bic.w	r0, r0, #7
 800c528:	1ac2      	subs	r2, r0, r3
 800c52a:	bf1c      	itt	ne
 800c52c:	1a1b      	subne	r3, r3, r0
 800c52e:	50a3      	strne	r3, [r4, r2]
 800c530:	e7af      	b.n	800c492 <_malloc_r+0x22>
 800c532:	6862      	ldr	r2, [r4, #4]
 800c534:	42a3      	cmp	r3, r4
 800c536:	bf0c      	ite	eq
 800c538:	f8c8 2000 	streq.w	r2, [r8]
 800c53c:	605a      	strne	r2, [r3, #4]
 800c53e:	e7eb      	b.n	800c518 <_malloc_r+0xa8>
 800c540:	4623      	mov	r3, r4
 800c542:	6864      	ldr	r4, [r4, #4]
 800c544:	e7ae      	b.n	800c4a4 <_malloc_r+0x34>
 800c546:	463c      	mov	r4, r7
 800c548:	687f      	ldr	r7, [r7, #4]
 800c54a:	e7b6      	b.n	800c4ba <_malloc_r+0x4a>
 800c54c:	461a      	mov	r2, r3
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	42a3      	cmp	r3, r4
 800c552:	d1fb      	bne.n	800c54c <_malloc_r+0xdc>
 800c554:	2300      	movs	r3, #0
 800c556:	6053      	str	r3, [r2, #4]
 800c558:	e7de      	b.n	800c518 <_malloc_r+0xa8>
 800c55a:	230c      	movs	r3, #12
 800c55c:	6033      	str	r3, [r6, #0]
 800c55e:	4630      	mov	r0, r6
 800c560:	f000 f80c 	bl	800c57c <__malloc_unlock>
 800c564:	e794      	b.n	800c490 <_malloc_r+0x20>
 800c566:	6005      	str	r5, [r0, #0]
 800c568:	e7d6      	b.n	800c518 <_malloc_r+0xa8>
 800c56a:	bf00      	nop
 800c56c:	20005134 	.word	0x20005134

0800c570 <__malloc_lock>:
 800c570:	4801      	ldr	r0, [pc, #4]	@ (800c578 <__malloc_lock+0x8>)
 800c572:	f7ff b8aa 	b.w	800b6ca <__retarget_lock_acquire_recursive>
 800c576:	bf00      	nop
 800c578:	2000512c 	.word	0x2000512c

0800c57c <__malloc_unlock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	@ (800c584 <__malloc_unlock+0x8>)
 800c57e:	f7ff b8a5 	b.w	800b6cc <__retarget_lock_release_recursive>
 800c582:	bf00      	nop
 800c584:	2000512c 	.word	0x2000512c

0800c588 <_Balloc>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	69c6      	ldr	r6, [r0, #28]
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	b976      	cbnz	r6, 800c5b0 <_Balloc+0x28>
 800c592:	2010      	movs	r0, #16
 800c594:	f7ff ff42 	bl	800c41c <malloc>
 800c598:	4602      	mov	r2, r0
 800c59a:	61e0      	str	r0, [r4, #28]
 800c59c:	b920      	cbnz	r0, 800c5a8 <_Balloc+0x20>
 800c59e:	4b18      	ldr	r3, [pc, #96]	@ (800c600 <_Balloc+0x78>)
 800c5a0:	4818      	ldr	r0, [pc, #96]	@ (800c604 <_Balloc+0x7c>)
 800c5a2:	216b      	movs	r1, #107	@ 0x6b
 800c5a4:	f000 fc2e 	bl	800ce04 <__assert_func>
 800c5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5ac:	6006      	str	r6, [r0, #0]
 800c5ae:	60c6      	str	r6, [r0, #12]
 800c5b0:	69e6      	ldr	r6, [r4, #28]
 800c5b2:	68f3      	ldr	r3, [r6, #12]
 800c5b4:	b183      	cbz	r3, 800c5d8 <_Balloc+0x50>
 800c5b6:	69e3      	ldr	r3, [r4, #28]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5be:	b9b8      	cbnz	r0, 800c5f0 <_Balloc+0x68>
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5c6:	1d72      	adds	r2, r6, #5
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 fc38 	bl	800ce40 <_calloc_r>
 800c5d0:	b160      	cbz	r0, 800c5ec <_Balloc+0x64>
 800c5d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5d6:	e00e      	b.n	800c5f6 <_Balloc+0x6e>
 800c5d8:	2221      	movs	r2, #33	@ 0x21
 800c5da:	2104      	movs	r1, #4
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 fc2f 	bl	800ce40 <_calloc_r>
 800c5e2:	69e3      	ldr	r3, [r4, #28]
 800c5e4:	60f0      	str	r0, [r6, #12]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e4      	bne.n	800c5b6 <_Balloc+0x2e>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	6802      	ldr	r2, [r0, #0]
 800c5f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5fc:	e7f7      	b.n	800c5ee <_Balloc+0x66>
 800c5fe:	bf00      	nop
 800c600:	0800d965 	.word	0x0800d965
 800c604:	0800d9e5 	.word	0x0800d9e5

0800c608 <_Bfree>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	69c6      	ldr	r6, [r0, #28]
 800c60c:	4605      	mov	r5, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b976      	cbnz	r6, 800c630 <_Bfree+0x28>
 800c612:	2010      	movs	r0, #16
 800c614:	f7ff ff02 	bl	800c41c <malloc>
 800c618:	4602      	mov	r2, r0
 800c61a:	61e8      	str	r0, [r5, #28]
 800c61c:	b920      	cbnz	r0, 800c628 <_Bfree+0x20>
 800c61e:	4b09      	ldr	r3, [pc, #36]	@ (800c644 <_Bfree+0x3c>)
 800c620:	4809      	ldr	r0, [pc, #36]	@ (800c648 <_Bfree+0x40>)
 800c622:	218f      	movs	r1, #143	@ 0x8f
 800c624:	f000 fbee 	bl	800ce04 <__assert_func>
 800c628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c62c:	6006      	str	r6, [r0, #0]
 800c62e:	60c6      	str	r6, [r0, #12]
 800c630:	b13c      	cbz	r4, 800c642 <_Bfree+0x3a>
 800c632:	69eb      	ldr	r3, [r5, #28]
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c63c:	6021      	str	r1, [r4, #0]
 800c63e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	0800d965 	.word	0x0800d965
 800c648:	0800d9e5 	.word	0x0800d9e5

0800c64c <__multadd>:
 800c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	690d      	ldr	r5, [r1, #16]
 800c652:	4607      	mov	r7, r0
 800c654:	460c      	mov	r4, r1
 800c656:	461e      	mov	r6, r3
 800c658:	f101 0c14 	add.w	ip, r1, #20
 800c65c:	2000      	movs	r0, #0
 800c65e:	f8dc 3000 	ldr.w	r3, [ip]
 800c662:	b299      	uxth	r1, r3
 800c664:	fb02 6101 	mla	r1, r2, r1, r6
 800c668:	0c1e      	lsrs	r6, r3, #16
 800c66a:	0c0b      	lsrs	r3, r1, #16
 800c66c:	fb02 3306 	mla	r3, r2, r6, r3
 800c670:	b289      	uxth	r1, r1
 800c672:	3001      	adds	r0, #1
 800c674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c678:	4285      	cmp	r5, r0
 800c67a:	f84c 1b04 	str.w	r1, [ip], #4
 800c67e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c682:	dcec      	bgt.n	800c65e <__multadd+0x12>
 800c684:	b30e      	cbz	r6, 800c6ca <__multadd+0x7e>
 800c686:	68a3      	ldr	r3, [r4, #8]
 800c688:	42ab      	cmp	r3, r5
 800c68a:	dc19      	bgt.n	800c6c0 <__multadd+0x74>
 800c68c:	6861      	ldr	r1, [r4, #4]
 800c68e:	4638      	mov	r0, r7
 800c690:	3101      	adds	r1, #1
 800c692:	f7ff ff79 	bl	800c588 <_Balloc>
 800c696:	4680      	mov	r8, r0
 800c698:	b928      	cbnz	r0, 800c6a6 <__multadd+0x5a>
 800c69a:	4602      	mov	r2, r0
 800c69c:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d0 <__multadd+0x84>)
 800c69e:	480d      	ldr	r0, [pc, #52]	@ (800c6d4 <__multadd+0x88>)
 800c6a0:	21ba      	movs	r1, #186	@ 0xba
 800c6a2:	f000 fbaf 	bl	800ce04 <__assert_func>
 800c6a6:	6922      	ldr	r2, [r4, #16]
 800c6a8:	3202      	adds	r2, #2
 800c6aa:	f104 010c 	add.w	r1, r4, #12
 800c6ae:	0092      	lsls	r2, r2, #2
 800c6b0:	300c      	adds	r0, #12
 800c6b2:	f7ff f80c 	bl	800b6ce <memcpy>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff ffa5 	bl	800c608 <_Bfree>
 800c6be:	4644      	mov	r4, r8
 800c6c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	615e      	str	r6, [r3, #20]
 800c6c8:	6125      	str	r5, [r4, #16]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d0:	0800d9d4 	.word	0x0800d9d4
 800c6d4:	0800d9e5 	.word	0x0800d9e5

0800c6d8 <__hi0bits>:
 800c6d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6dc:	4603      	mov	r3, r0
 800c6de:	bf36      	itet	cc
 800c6e0:	0403      	lslcc	r3, r0, #16
 800c6e2:	2000      	movcs	r0, #0
 800c6e4:	2010      	movcc	r0, #16
 800c6e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6ea:	bf3c      	itt	cc
 800c6ec:	021b      	lslcc	r3, r3, #8
 800c6ee:	3008      	addcc	r0, #8
 800c6f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6f4:	bf3c      	itt	cc
 800c6f6:	011b      	lslcc	r3, r3, #4
 800c6f8:	3004      	addcc	r0, #4
 800c6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6fe:	bf3c      	itt	cc
 800c700:	009b      	lslcc	r3, r3, #2
 800c702:	3002      	addcc	r0, #2
 800c704:	2b00      	cmp	r3, #0
 800c706:	db05      	blt.n	800c714 <__hi0bits+0x3c>
 800c708:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c70c:	f100 0001 	add.w	r0, r0, #1
 800c710:	bf08      	it	eq
 800c712:	2020      	moveq	r0, #32
 800c714:	4770      	bx	lr

0800c716 <__lo0bits>:
 800c716:	6803      	ldr	r3, [r0, #0]
 800c718:	4602      	mov	r2, r0
 800c71a:	f013 0007 	ands.w	r0, r3, #7
 800c71e:	d00b      	beq.n	800c738 <__lo0bits+0x22>
 800c720:	07d9      	lsls	r1, r3, #31
 800c722:	d421      	bmi.n	800c768 <__lo0bits+0x52>
 800c724:	0798      	lsls	r0, r3, #30
 800c726:	bf49      	itett	mi
 800c728:	085b      	lsrmi	r3, r3, #1
 800c72a:	089b      	lsrpl	r3, r3, #2
 800c72c:	2001      	movmi	r0, #1
 800c72e:	6013      	strmi	r3, [r2, #0]
 800c730:	bf5c      	itt	pl
 800c732:	6013      	strpl	r3, [r2, #0]
 800c734:	2002      	movpl	r0, #2
 800c736:	4770      	bx	lr
 800c738:	b299      	uxth	r1, r3
 800c73a:	b909      	cbnz	r1, 800c740 <__lo0bits+0x2a>
 800c73c:	0c1b      	lsrs	r3, r3, #16
 800c73e:	2010      	movs	r0, #16
 800c740:	b2d9      	uxtb	r1, r3
 800c742:	b909      	cbnz	r1, 800c748 <__lo0bits+0x32>
 800c744:	3008      	adds	r0, #8
 800c746:	0a1b      	lsrs	r3, r3, #8
 800c748:	0719      	lsls	r1, r3, #28
 800c74a:	bf04      	itt	eq
 800c74c:	091b      	lsreq	r3, r3, #4
 800c74e:	3004      	addeq	r0, #4
 800c750:	0799      	lsls	r1, r3, #30
 800c752:	bf04      	itt	eq
 800c754:	089b      	lsreq	r3, r3, #2
 800c756:	3002      	addeq	r0, #2
 800c758:	07d9      	lsls	r1, r3, #31
 800c75a:	d403      	bmi.n	800c764 <__lo0bits+0x4e>
 800c75c:	085b      	lsrs	r3, r3, #1
 800c75e:	f100 0001 	add.w	r0, r0, #1
 800c762:	d003      	beq.n	800c76c <__lo0bits+0x56>
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	4770      	bx	lr
 800c768:	2000      	movs	r0, #0
 800c76a:	4770      	bx	lr
 800c76c:	2020      	movs	r0, #32
 800c76e:	4770      	bx	lr

0800c770 <__i2b>:
 800c770:	b510      	push	{r4, lr}
 800c772:	460c      	mov	r4, r1
 800c774:	2101      	movs	r1, #1
 800c776:	f7ff ff07 	bl	800c588 <_Balloc>
 800c77a:	4602      	mov	r2, r0
 800c77c:	b928      	cbnz	r0, 800c78a <__i2b+0x1a>
 800c77e:	4b05      	ldr	r3, [pc, #20]	@ (800c794 <__i2b+0x24>)
 800c780:	4805      	ldr	r0, [pc, #20]	@ (800c798 <__i2b+0x28>)
 800c782:	f240 1145 	movw	r1, #325	@ 0x145
 800c786:	f000 fb3d 	bl	800ce04 <__assert_func>
 800c78a:	2301      	movs	r3, #1
 800c78c:	6144      	str	r4, [r0, #20]
 800c78e:	6103      	str	r3, [r0, #16]
 800c790:	bd10      	pop	{r4, pc}
 800c792:	bf00      	nop
 800c794:	0800d9d4 	.word	0x0800d9d4
 800c798:	0800d9e5 	.word	0x0800d9e5

0800c79c <__multiply>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	4614      	mov	r4, r2
 800c7a2:	690a      	ldr	r2, [r1, #16]
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	bfa8      	it	ge
 800c7aa:	4623      	movge	r3, r4
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	bfa4      	itt	ge
 800c7b0:	460c      	movge	r4, r1
 800c7b2:	461f      	movge	r7, r3
 800c7b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7bc:	68a3      	ldr	r3, [r4, #8]
 800c7be:	6861      	ldr	r1, [r4, #4]
 800c7c0:	eb0a 0609 	add.w	r6, sl, r9
 800c7c4:	42b3      	cmp	r3, r6
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	bfb8      	it	lt
 800c7ca:	3101      	addlt	r1, #1
 800c7cc:	f7ff fedc 	bl	800c588 <_Balloc>
 800c7d0:	b930      	cbnz	r0, 800c7e0 <__multiply+0x44>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	4b44      	ldr	r3, [pc, #272]	@ (800c8e8 <__multiply+0x14c>)
 800c7d6:	4845      	ldr	r0, [pc, #276]	@ (800c8ec <__multiply+0x150>)
 800c7d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7dc:	f000 fb12 	bl	800ce04 <__assert_func>
 800c7e0:	f100 0514 	add.w	r5, r0, #20
 800c7e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4543      	cmp	r3, r8
 800c7ee:	d321      	bcc.n	800c834 <__multiply+0x98>
 800c7f0:	f107 0114 	add.w	r1, r7, #20
 800c7f4:	f104 0214 	add.w	r2, r4, #20
 800c7f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c7fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c800:	9302      	str	r3, [sp, #8]
 800c802:	1b13      	subs	r3, r2, r4
 800c804:	3b15      	subs	r3, #21
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	3304      	adds	r3, #4
 800c80c:	f104 0715 	add.w	r7, r4, #21
 800c810:	42ba      	cmp	r2, r7
 800c812:	bf38      	it	cc
 800c814:	2304      	movcc	r3, #4
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	9b02      	ldr	r3, [sp, #8]
 800c81a:	9103      	str	r1, [sp, #12]
 800c81c:	428b      	cmp	r3, r1
 800c81e:	d80c      	bhi.n	800c83a <__multiply+0x9e>
 800c820:	2e00      	cmp	r6, #0
 800c822:	dd03      	ble.n	800c82c <__multiply+0x90>
 800c824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d05b      	beq.n	800c8e4 <__multiply+0x148>
 800c82c:	6106      	str	r6, [r0, #16]
 800c82e:	b005      	add	sp, #20
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c834:	f843 2b04 	str.w	r2, [r3], #4
 800c838:	e7d8      	b.n	800c7ec <__multiply+0x50>
 800c83a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c83e:	f1ba 0f00 	cmp.w	sl, #0
 800c842:	d024      	beq.n	800c88e <__multiply+0xf2>
 800c844:	f104 0e14 	add.w	lr, r4, #20
 800c848:	46a9      	mov	r9, r5
 800c84a:	f04f 0c00 	mov.w	ip, #0
 800c84e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c852:	f8d9 3000 	ldr.w	r3, [r9]
 800c856:	fa1f fb87 	uxth.w	fp, r7
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c860:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c864:	f8d9 7000 	ldr.w	r7, [r9]
 800c868:	4463      	add	r3, ip
 800c86a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c86e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c872:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c876:	b29b      	uxth	r3, r3
 800c878:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c87c:	4572      	cmp	r2, lr
 800c87e:	f849 3b04 	str.w	r3, [r9], #4
 800c882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c886:	d8e2      	bhi.n	800c84e <__multiply+0xb2>
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	f845 c003 	str.w	ip, [r5, r3]
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c894:	3104      	adds	r1, #4
 800c896:	f1b9 0f00 	cmp.w	r9, #0
 800c89a:	d021      	beq.n	800c8e0 <__multiply+0x144>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	f104 0c14 	add.w	ip, r4, #20
 800c8a2:	46ae      	mov	lr, r5
 800c8a4:	f04f 0a00 	mov.w	sl, #0
 800c8a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c8ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8b0:	fb09 770b 	mla	r7, r9, fp, r7
 800c8b4:	4457      	add	r7, sl
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c8c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8c8:	f8be 3000 	ldrh.w	r3, [lr]
 800c8cc:	fb09 330a 	mla	r3, r9, sl, r3
 800c8d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8d4:	4562      	cmp	r2, ip
 800c8d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8da:	d8e5      	bhi.n	800c8a8 <__multiply+0x10c>
 800c8dc:	9f01      	ldr	r7, [sp, #4]
 800c8de:	51eb      	str	r3, [r5, r7]
 800c8e0:	3504      	adds	r5, #4
 800c8e2:	e799      	b.n	800c818 <__multiply+0x7c>
 800c8e4:	3e01      	subs	r6, #1
 800c8e6:	e79b      	b.n	800c820 <__multiply+0x84>
 800c8e8:	0800d9d4 	.word	0x0800d9d4
 800c8ec:	0800d9e5 	.word	0x0800d9e5

0800c8f0 <__pow5mult>:
 800c8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f4:	4615      	mov	r5, r2
 800c8f6:	f012 0203 	ands.w	r2, r2, #3
 800c8fa:	4607      	mov	r7, r0
 800c8fc:	460e      	mov	r6, r1
 800c8fe:	d007      	beq.n	800c910 <__pow5mult+0x20>
 800c900:	4c25      	ldr	r4, [pc, #148]	@ (800c998 <__pow5mult+0xa8>)
 800c902:	3a01      	subs	r2, #1
 800c904:	2300      	movs	r3, #0
 800c906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c90a:	f7ff fe9f 	bl	800c64c <__multadd>
 800c90e:	4606      	mov	r6, r0
 800c910:	10ad      	asrs	r5, r5, #2
 800c912:	d03d      	beq.n	800c990 <__pow5mult+0xa0>
 800c914:	69fc      	ldr	r4, [r7, #28]
 800c916:	b97c      	cbnz	r4, 800c938 <__pow5mult+0x48>
 800c918:	2010      	movs	r0, #16
 800c91a:	f7ff fd7f 	bl	800c41c <malloc>
 800c91e:	4602      	mov	r2, r0
 800c920:	61f8      	str	r0, [r7, #28]
 800c922:	b928      	cbnz	r0, 800c930 <__pow5mult+0x40>
 800c924:	4b1d      	ldr	r3, [pc, #116]	@ (800c99c <__pow5mult+0xac>)
 800c926:	481e      	ldr	r0, [pc, #120]	@ (800c9a0 <__pow5mult+0xb0>)
 800c928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c92c:	f000 fa6a 	bl	800ce04 <__assert_func>
 800c930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c934:	6004      	str	r4, [r0, #0]
 800c936:	60c4      	str	r4, [r0, #12]
 800c938:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c93c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c940:	b94c      	cbnz	r4, 800c956 <__pow5mult+0x66>
 800c942:	f240 2171 	movw	r1, #625	@ 0x271
 800c946:	4638      	mov	r0, r7
 800c948:	f7ff ff12 	bl	800c770 <__i2b>
 800c94c:	2300      	movs	r3, #0
 800c94e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c952:	4604      	mov	r4, r0
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	f04f 0900 	mov.w	r9, #0
 800c95a:	07eb      	lsls	r3, r5, #31
 800c95c:	d50a      	bpl.n	800c974 <__pow5mult+0x84>
 800c95e:	4631      	mov	r1, r6
 800c960:	4622      	mov	r2, r4
 800c962:	4638      	mov	r0, r7
 800c964:	f7ff ff1a 	bl	800c79c <__multiply>
 800c968:	4631      	mov	r1, r6
 800c96a:	4680      	mov	r8, r0
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff fe4b 	bl	800c608 <_Bfree>
 800c972:	4646      	mov	r6, r8
 800c974:	106d      	asrs	r5, r5, #1
 800c976:	d00b      	beq.n	800c990 <__pow5mult+0xa0>
 800c978:	6820      	ldr	r0, [r4, #0]
 800c97a:	b938      	cbnz	r0, 800c98c <__pow5mult+0x9c>
 800c97c:	4622      	mov	r2, r4
 800c97e:	4621      	mov	r1, r4
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff ff0b 	bl	800c79c <__multiply>
 800c986:	6020      	str	r0, [r4, #0]
 800c988:	f8c0 9000 	str.w	r9, [r0]
 800c98c:	4604      	mov	r4, r0
 800c98e:	e7e4      	b.n	800c95a <__pow5mult+0x6a>
 800c990:	4630      	mov	r0, r6
 800c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c996:	bf00      	nop
 800c998:	0800da40 	.word	0x0800da40
 800c99c:	0800d965 	.word	0x0800d965
 800c9a0:	0800d9e5 	.word	0x0800d9e5

0800c9a4 <__lshift>:
 800c9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	6849      	ldr	r1, [r1, #4]
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	4607      	mov	r7, r0
 800c9b6:	4691      	mov	r9, r2
 800c9b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9bc:	f108 0601 	add.w	r6, r8, #1
 800c9c0:	42b3      	cmp	r3, r6
 800c9c2:	db0b      	blt.n	800c9dc <__lshift+0x38>
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	f7ff fddf 	bl	800c588 <_Balloc>
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	b948      	cbnz	r0, 800c9e2 <__lshift+0x3e>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	4b28      	ldr	r3, [pc, #160]	@ (800ca74 <__lshift+0xd0>)
 800c9d2:	4829      	ldr	r0, [pc, #164]	@ (800ca78 <__lshift+0xd4>)
 800c9d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9d8:	f000 fa14 	bl	800ce04 <__assert_func>
 800c9dc:	3101      	adds	r1, #1
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	e7ee      	b.n	800c9c0 <__lshift+0x1c>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f100 0114 	add.w	r1, r0, #20
 800c9e8:	f100 0210 	add.w	r2, r0, #16
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	4553      	cmp	r3, sl
 800c9f0:	db33      	blt.n	800ca5a <__lshift+0xb6>
 800c9f2:	6920      	ldr	r0, [r4, #16]
 800c9f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9f8:	f104 0314 	add.w	r3, r4, #20
 800c9fc:	f019 091f 	ands.w	r9, r9, #31
 800ca00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca08:	d02b      	beq.n	800ca62 <__lshift+0xbe>
 800ca0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca0e:	468a      	mov	sl, r1
 800ca10:	2200      	movs	r2, #0
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	fa00 f009 	lsl.w	r0, r0, r9
 800ca18:	4310      	orrs	r0, r2
 800ca1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca22:	459c      	cmp	ip, r3
 800ca24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca28:	d8f3      	bhi.n	800ca12 <__lshift+0x6e>
 800ca2a:	ebac 0304 	sub.w	r3, ip, r4
 800ca2e:	3b15      	subs	r3, #21
 800ca30:	f023 0303 	bic.w	r3, r3, #3
 800ca34:	3304      	adds	r3, #4
 800ca36:	f104 0015 	add.w	r0, r4, #21
 800ca3a:	4584      	cmp	ip, r0
 800ca3c:	bf38      	it	cc
 800ca3e:	2304      	movcc	r3, #4
 800ca40:	50ca      	str	r2, [r1, r3]
 800ca42:	b10a      	cbz	r2, 800ca48 <__lshift+0xa4>
 800ca44:	f108 0602 	add.w	r6, r8, #2
 800ca48:	3e01      	subs	r6, #1
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	612e      	str	r6, [r5, #16]
 800ca4e:	4621      	mov	r1, r4
 800ca50:	f7ff fdda 	bl	800c608 <_Bfree>
 800ca54:	4628      	mov	r0, r5
 800ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca5e:	3301      	adds	r3, #1
 800ca60:	e7c5      	b.n	800c9ee <__lshift+0x4a>
 800ca62:	3904      	subs	r1, #4
 800ca64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca6c:	459c      	cmp	ip, r3
 800ca6e:	d8f9      	bhi.n	800ca64 <__lshift+0xc0>
 800ca70:	e7ea      	b.n	800ca48 <__lshift+0xa4>
 800ca72:	bf00      	nop
 800ca74:	0800d9d4 	.word	0x0800d9d4
 800ca78:	0800d9e5 	.word	0x0800d9e5

0800ca7c <__mcmp>:
 800ca7c:	690a      	ldr	r2, [r1, #16]
 800ca7e:	4603      	mov	r3, r0
 800ca80:	6900      	ldr	r0, [r0, #16]
 800ca82:	1a80      	subs	r0, r0, r2
 800ca84:	b530      	push	{r4, r5, lr}
 800ca86:	d10e      	bne.n	800caa6 <__mcmp+0x2a>
 800ca88:	3314      	adds	r3, #20
 800ca8a:	3114      	adds	r1, #20
 800ca8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca9c:	4295      	cmp	r5, r2
 800ca9e:	d003      	beq.n	800caa8 <__mcmp+0x2c>
 800caa0:	d205      	bcs.n	800caae <__mcmp+0x32>
 800caa2:	f04f 30ff 	mov.w	r0, #4294967295
 800caa6:	bd30      	pop	{r4, r5, pc}
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	d3f3      	bcc.n	800ca94 <__mcmp+0x18>
 800caac:	e7fb      	b.n	800caa6 <__mcmp+0x2a>
 800caae:	2001      	movs	r0, #1
 800cab0:	e7f9      	b.n	800caa6 <__mcmp+0x2a>
	...

0800cab4 <__mdiff>:
 800cab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	4689      	mov	r9, r1
 800caba:	4606      	mov	r6, r0
 800cabc:	4611      	mov	r1, r2
 800cabe:	4648      	mov	r0, r9
 800cac0:	4614      	mov	r4, r2
 800cac2:	f7ff ffdb 	bl	800ca7c <__mcmp>
 800cac6:	1e05      	subs	r5, r0, #0
 800cac8:	d112      	bne.n	800caf0 <__mdiff+0x3c>
 800caca:	4629      	mov	r1, r5
 800cacc:	4630      	mov	r0, r6
 800cace:	f7ff fd5b 	bl	800c588 <_Balloc>
 800cad2:	4602      	mov	r2, r0
 800cad4:	b928      	cbnz	r0, 800cae2 <__mdiff+0x2e>
 800cad6:	4b3f      	ldr	r3, [pc, #252]	@ (800cbd4 <__mdiff+0x120>)
 800cad8:	f240 2137 	movw	r1, #567	@ 0x237
 800cadc:	483e      	ldr	r0, [pc, #248]	@ (800cbd8 <__mdiff+0x124>)
 800cade:	f000 f991 	bl	800ce04 <__assert_func>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cae8:	4610      	mov	r0, r2
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf0:	bfbc      	itt	lt
 800caf2:	464b      	movlt	r3, r9
 800caf4:	46a1      	movlt	r9, r4
 800caf6:	4630      	mov	r0, r6
 800caf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cafc:	bfba      	itte	lt
 800cafe:	461c      	movlt	r4, r3
 800cb00:	2501      	movlt	r5, #1
 800cb02:	2500      	movge	r5, #0
 800cb04:	f7ff fd40 	bl	800c588 <_Balloc>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	b918      	cbnz	r0, 800cb14 <__mdiff+0x60>
 800cb0c:	4b31      	ldr	r3, [pc, #196]	@ (800cbd4 <__mdiff+0x120>)
 800cb0e:	f240 2145 	movw	r1, #581	@ 0x245
 800cb12:	e7e3      	b.n	800cadc <__mdiff+0x28>
 800cb14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb18:	6926      	ldr	r6, [r4, #16]
 800cb1a:	60c5      	str	r5, [r0, #12]
 800cb1c:	f109 0310 	add.w	r3, r9, #16
 800cb20:	f109 0514 	add.w	r5, r9, #20
 800cb24:	f104 0e14 	add.w	lr, r4, #20
 800cb28:	f100 0b14 	add.w	fp, r0, #20
 800cb2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	46d9      	mov	r9, fp
 800cb38:	f04f 0c00 	mov.w	ip, #0
 800cb3c:	9b01      	ldr	r3, [sp, #4]
 800cb3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	fa1f f38a 	uxth.w	r3, sl
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	b283      	uxth	r3, r0
 800cb50:	1acb      	subs	r3, r1, r3
 800cb52:	0c00      	lsrs	r0, r0, #16
 800cb54:	4463      	add	r3, ip
 800cb56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb64:	4576      	cmp	r6, lr
 800cb66:	f849 3b04 	str.w	r3, [r9], #4
 800cb6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb6e:	d8e5      	bhi.n	800cb3c <__mdiff+0x88>
 800cb70:	1b33      	subs	r3, r6, r4
 800cb72:	3b15      	subs	r3, #21
 800cb74:	f023 0303 	bic.w	r3, r3, #3
 800cb78:	3415      	adds	r4, #21
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	42a6      	cmp	r6, r4
 800cb7e:	bf38      	it	cc
 800cb80:	2304      	movcc	r3, #4
 800cb82:	441d      	add	r5, r3
 800cb84:	445b      	add	r3, fp
 800cb86:	461e      	mov	r6, r3
 800cb88:	462c      	mov	r4, r5
 800cb8a:	4544      	cmp	r4, r8
 800cb8c:	d30e      	bcc.n	800cbac <__mdiff+0xf8>
 800cb8e:	f108 0103 	add.w	r1, r8, #3
 800cb92:	1b49      	subs	r1, r1, r5
 800cb94:	f021 0103 	bic.w	r1, r1, #3
 800cb98:	3d03      	subs	r5, #3
 800cb9a:	45a8      	cmp	r8, r5
 800cb9c:	bf38      	it	cc
 800cb9e:	2100      	movcc	r1, #0
 800cba0:	440b      	add	r3, r1
 800cba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cba6:	b191      	cbz	r1, 800cbce <__mdiff+0x11a>
 800cba8:	6117      	str	r7, [r2, #16]
 800cbaa:	e79d      	b.n	800cae8 <__mdiff+0x34>
 800cbac:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbb0:	46e6      	mov	lr, ip
 800cbb2:	0c08      	lsrs	r0, r1, #16
 800cbb4:	fa1c fc81 	uxtah	ip, ip, r1
 800cbb8:	4471      	add	r1, lr
 800cbba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbbe:	b289      	uxth	r1, r1
 800cbc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbc4:	f846 1b04 	str.w	r1, [r6], #4
 800cbc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbcc:	e7dd      	b.n	800cb8a <__mdiff+0xd6>
 800cbce:	3f01      	subs	r7, #1
 800cbd0:	e7e7      	b.n	800cba2 <__mdiff+0xee>
 800cbd2:	bf00      	nop
 800cbd4:	0800d9d4 	.word	0x0800d9d4
 800cbd8:	0800d9e5 	.word	0x0800d9e5

0800cbdc <__d2b>:
 800cbdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	ec59 8b10 	vmov	r8, r9, d0
 800cbe8:	4616      	mov	r6, r2
 800cbea:	f7ff fccd 	bl	800c588 <_Balloc>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	b930      	cbnz	r0, 800cc00 <__d2b+0x24>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b23      	ldr	r3, [pc, #140]	@ (800cc84 <__d2b+0xa8>)
 800cbf6:	4824      	ldr	r0, [pc, #144]	@ (800cc88 <__d2b+0xac>)
 800cbf8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbfc:	f000 f902 	bl	800ce04 <__assert_func>
 800cc00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc08:	b10d      	cbz	r5, 800cc0e <__d2b+0x32>
 800cc0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	f1b8 0300 	subs.w	r3, r8, #0
 800cc14:	d023      	beq.n	800cc5e <__d2b+0x82>
 800cc16:	4668      	mov	r0, sp
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	f7ff fd7c 	bl	800c716 <__lo0bits>
 800cc1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc22:	b1d0      	cbz	r0, 800cc5a <__d2b+0x7e>
 800cc24:	f1c0 0320 	rsb	r3, r0, #32
 800cc28:	fa02 f303 	lsl.w	r3, r2, r3
 800cc2c:	430b      	orrs	r3, r1
 800cc2e:	40c2      	lsrs	r2, r0
 800cc30:	6163      	str	r3, [r4, #20]
 800cc32:	9201      	str	r2, [sp, #4]
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	61a3      	str	r3, [r4, #24]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bf0c      	ite	eq
 800cc3c:	2201      	moveq	r2, #1
 800cc3e:	2202      	movne	r2, #2
 800cc40:	6122      	str	r2, [r4, #16]
 800cc42:	b1a5      	cbz	r5, 800cc6e <__d2b+0x92>
 800cc44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc48:	4405      	add	r5, r0
 800cc4a:	603d      	str	r5, [r7, #0]
 800cc4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc50:	6030      	str	r0, [r6, #0]
 800cc52:	4620      	mov	r0, r4
 800cc54:	b003      	add	sp, #12
 800cc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc5a:	6161      	str	r1, [r4, #20]
 800cc5c:	e7ea      	b.n	800cc34 <__d2b+0x58>
 800cc5e:	a801      	add	r0, sp, #4
 800cc60:	f7ff fd59 	bl	800c716 <__lo0bits>
 800cc64:	9b01      	ldr	r3, [sp, #4]
 800cc66:	6163      	str	r3, [r4, #20]
 800cc68:	3020      	adds	r0, #32
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	e7e8      	b.n	800cc40 <__d2b+0x64>
 800cc6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc76:	6038      	str	r0, [r7, #0]
 800cc78:	6918      	ldr	r0, [r3, #16]
 800cc7a:	f7ff fd2d 	bl	800c6d8 <__hi0bits>
 800cc7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc82:	e7e5      	b.n	800cc50 <__d2b+0x74>
 800cc84:	0800d9d4 	.word	0x0800d9d4
 800cc88:	0800d9e5 	.word	0x0800d9e5

0800cc8c <__sflush_r>:
 800cc8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	0716      	lsls	r6, r2, #28
 800cc96:	4605      	mov	r5, r0
 800cc98:	460c      	mov	r4, r1
 800cc9a:	d454      	bmi.n	800cd46 <__sflush_r+0xba>
 800cc9c:	684b      	ldr	r3, [r1, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc02      	bgt.n	800cca8 <__sflush_r+0x1c>
 800cca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dd48      	ble.n	800cd3a <__sflush_r+0xae>
 800cca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	d045      	beq.n	800cd3a <__sflush_r+0xae>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ccb4:	682f      	ldr	r7, [r5, #0]
 800ccb6:	6a21      	ldr	r1, [r4, #32]
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	d030      	beq.n	800cd1e <__sflush_r+0x92>
 800ccbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	0759      	lsls	r1, r3, #29
 800ccc2:	d505      	bpl.n	800ccd0 <__sflush_r+0x44>
 800ccc4:	6863      	ldr	r3, [r4, #4]
 800ccc6:	1ad2      	subs	r2, r2, r3
 800ccc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccca:	b10b      	cbz	r3, 800ccd0 <__sflush_r+0x44>
 800cccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b0      	blx	r6
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	d106      	bne.n	800ccee <__sflush_r+0x62>
 800cce0:	6829      	ldr	r1, [r5, #0]
 800cce2:	291d      	cmp	r1, #29
 800cce4:	d82b      	bhi.n	800cd3e <__sflush_r+0xb2>
 800cce6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd90 <__sflush_r+0x104>)
 800cce8:	410a      	asrs	r2, r1
 800ccea:	07d6      	lsls	r6, r2, #31
 800ccec:	d427      	bmi.n	800cd3e <__sflush_r+0xb2>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	6062      	str	r2, [r4, #4]
 800ccf2:	04d9      	lsls	r1, r3, #19
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	d504      	bpl.n	800cd04 <__sflush_r+0x78>
 800ccfa:	1c42      	adds	r2, r0, #1
 800ccfc:	d101      	bne.n	800cd02 <__sflush_r+0x76>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b903      	cbnz	r3, 800cd04 <__sflush_r+0x78>
 800cd02:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd06:	602f      	str	r7, [r5, #0]
 800cd08:	b1b9      	cbz	r1, 800cd3a <__sflush_r+0xae>
 800cd0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd0e:	4299      	cmp	r1, r3
 800cd10:	d002      	beq.n	800cd18 <__sflush_r+0x8c>
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7ff fb38 	bl	800c388 <_free_r>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd1c:	e00d      	b.n	800cd3a <__sflush_r+0xae>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	4602      	mov	r2, r0
 800cd26:	1c50      	adds	r0, r2, #1
 800cd28:	d1c9      	bne.n	800ccbe <__sflush_r+0x32>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0c6      	beq.n	800ccbe <__sflush_r+0x32>
 800cd30:	2b1d      	cmp	r3, #29
 800cd32:	d001      	beq.n	800cd38 <__sflush_r+0xac>
 800cd34:	2b16      	cmp	r3, #22
 800cd36:	d11e      	bne.n	800cd76 <__sflush_r+0xea>
 800cd38:	602f      	str	r7, [r5, #0]
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e022      	b.n	800cd84 <__sflush_r+0xf8>
 800cd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd42:	b21b      	sxth	r3, r3
 800cd44:	e01b      	b.n	800cd7e <__sflush_r+0xf2>
 800cd46:	690f      	ldr	r7, [r1, #16]
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d0f6      	beq.n	800cd3a <__sflush_r+0xae>
 800cd4c:	0793      	lsls	r3, r2, #30
 800cd4e:	680e      	ldr	r6, [r1, #0]
 800cd50:	bf08      	it	eq
 800cd52:	694b      	ldreq	r3, [r1, #20]
 800cd54:	600f      	str	r7, [r1, #0]
 800cd56:	bf18      	it	ne
 800cd58:	2300      	movne	r3, #0
 800cd5a:	eba6 0807 	sub.w	r8, r6, r7
 800cd5e:	608b      	str	r3, [r1, #8]
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	dde9      	ble.n	800cd3a <__sflush_r+0xae>
 800cd66:	6a21      	ldr	r1, [r4, #32]
 800cd68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd6a:	4643      	mov	r3, r8
 800cd6c:	463a      	mov	r2, r7
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b0      	blx	r6
 800cd72:	2800      	cmp	r0, #0
 800cd74:	dc08      	bgt.n	800cd88 <__sflush_r+0xfc>
 800cd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	4407      	add	r7, r0
 800cd8a:	eba8 0800 	sub.w	r8, r8, r0
 800cd8e:	e7e7      	b.n	800cd60 <__sflush_r+0xd4>
 800cd90:	dfbffffe 	.word	0xdfbffffe

0800cd94 <_fflush_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	690b      	ldr	r3, [r1, #16]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	b913      	cbnz	r3, 800cda4 <_fflush_r+0x10>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	4628      	mov	r0, r5
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	b118      	cbz	r0, 800cdae <_fflush_r+0x1a>
 800cda6:	6a03      	ldr	r3, [r0, #32]
 800cda8:	b90b      	cbnz	r3, 800cdae <_fflush_r+0x1a>
 800cdaa:	f7fe fb41 	bl	800b430 <__sinit>
 800cdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f3      	beq.n	800cd9e <_fflush_r+0xa>
 800cdb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cdb8:	07d0      	lsls	r0, r2, #31
 800cdba:	d404      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdbc:	0599      	lsls	r1, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdc2:	f7fe fc82 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f7ff ff5f 	bl	800cc8c <__sflush_r>
 800cdce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdd0:	07da      	lsls	r2, r3, #31
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	d4e4      	bmi.n	800cda0 <_fflush_r+0xc>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	059b      	lsls	r3, r3, #22
 800cdda:	d4e1      	bmi.n	800cda0 <_fflush_r+0xc>
 800cddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdde:	f7fe fc75 	bl	800b6cc <__retarget_lock_release_recursive>
 800cde2:	e7dd      	b.n	800cda0 <_fflush_r+0xc>

0800cde4 <_sbrk_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d06      	ldr	r5, [pc, #24]	@ (800ce00 <_sbrk_r+0x1c>)
 800cde8:	2300      	movs	r3, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	f7f6 fc92 	bl	8003718 <_sbrk>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_sbrk_r+0x1a>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_sbrk_r+0x1a>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	20005128 	.word	0x20005128

0800ce04 <__assert_func>:
 800ce04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce06:	4614      	mov	r4, r2
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b09      	ldr	r3, [pc, #36]	@ (800ce30 <__assert_func+0x2c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	68d8      	ldr	r0, [r3, #12]
 800ce12:	b954      	cbnz	r4, 800ce2a <__assert_func+0x26>
 800ce14:	4b07      	ldr	r3, [pc, #28]	@ (800ce34 <__assert_func+0x30>)
 800ce16:	461c      	mov	r4, r3
 800ce18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce1c:	9100      	str	r1, [sp, #0]
 800ce1e:	462b      	mov	r3, r5
 800ce20:	4905      	ldr	r1, [pc, #20]	@ (800ce38 <__assert_func+0x34>)
 800ce22:	f000 f841 	bl	800cea8 <fiprintf>
 800ce26:	f000 f851 	bl	800cecc <abort>
 800ce2a:	4b04      	ldr	r3, [pc, #16]	@ (800ce3c <__assert_func+0x38>)
 800ce2c:	e7f4      	b.n	800ce18 <__assert_func+0x14>
 800ce2e:	bf00      	nop
 800ce30:	20000028 	.word	0x20000028
 800ce34:	0800db85 	.word	0x0800db85
 800ce38:	0800db57 	.word	0x0800db57
 800ce3c:	0800db4a 	.word	0x0800db4a

0800ce40 <_calloc_r>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	fba1 5402 	umull	r5, r4, r1, r2
 800ce46:	b93c      	cbnz	r4, 800ce58 <_calloc_r+0x18>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7ff fb11 	bl	800c470 <_malloc_r>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	b928      	cbnz	r0, 800ce5e <_calloc_r+0x1e>
 800ce52:	2600      	movs	r6, #0
 800ce54:	4630      	mov	r0, r6
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	220c      	movs	r2, #12
 800ce5a:	6002      	str	r2, [r0, #0]
 800ce5c:	e7f9      	b.n	800ce52 <_calloc_r+0x12>
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4621      	mov	r1, r4
 800ce62:	f7fe fb5e 	bl	800b522 <memset>
 800ce66:	e7f5      	b.n	800ce54 <_calloc_r+0x14>

0800ce68 <__ascii_mbtowc>:
 800ce68:	b082      	sub	sp, #8
 800ce6a:	b901      	cbnz	r1, 800ce6e <__ascii_mbtowc+0x6>
 800ce6c:	a901      	add	r1, sp, #4
 800ce6e:	b142      	cbz	r2, 800ce82 <__ascii_mbtowc+0x1a>
 800ce70:	b14b      	cbz	r3, 800ce86 <__ascii_mbtowc+0x1e>
 800ce72:	7813      	ldrb	r3, [r2, #0]
 800ce74:	600b      	str	r3, [r1, #0]
 800ce76:	7812      	ldrb	r2, [r2, #0]
 800ce78:	1e10      	subs	r0, r2, #0
 800ce7a:	bf18      	it	ne
 800ce7c:	2001      	movne	r0, #1
 800ce7e:	b002      	add	sp, #8
 800ce80:	4770      	bx	lr
 800ce82:	4610      	mov	r0, r2
 800ce84:	e7fb      	b.n	800ce7e <__ascii_mbtowc+0x16>
 800ce86:	f06f 0001 	mvn.w	r0, #1
 800ce8a:	e7f8      	b.n	800ce7e <__ascii_mbtowc+0x16>

0800ce8c <__ascii_wctomb>:
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	4608      	mov	r0, r1
 800ce90:	b141      	cbz	r1, 800cea4 <__ascii_wctomb+0x18>
 800ce92:	2aff      	cmp	r2, #255	@ 0xff
 800ce94:	d904      	bls.n	800cea0 <__ascii_wctomb+0x14>
 800ce96:	228a      	movs	r2, #138	@ 0x8a
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9e:	4770      	bx	lr
 800cea0:	700a      	strb	r2, [r1, #0]
 800cea2:	2001      	movs	r0, #1
 800cea4:	4770      	bx	lr
	...

0800cea8 <fiprintf>:
 800cea8:	b40e      	push	{r1, r2, r3}
 800ceaa:	b503      	push	{r0, r1, lr}
 800ceac:	4601      	mov	r1, r0
 800ceae:	ab03      	add	r3, sp, #12
 800ceb0:	4805      	ldr	r0, [pc, #20]	@ (800cec8 <fiprintf+0x20>)
 800ceb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb6:	6800      	ldr	r0, [r0, #0]
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	f000 f837 	bl	800cf2c <_vfiprintf_r>
 800cebe:	b002      	add	sp, #8
 800cec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec4:	b003      	add	sp, #12
 800cec6:	4770      	bx	lr
 800cec8:	20000028 	.word	0x20000028

0800cecc <abort>:
 800cecc:	b508      	push	{r3, lr}
 800cece:	2006      	movs	r0, #6
 800ced0:	f000 fa00 	bl	800d2d4 <raise>
 800ced4:	2001      	movs	r0, #1
 800ced6:	f7f6 fba7 	bl	8003628 <_exit>

0800ceda <__sfputc_r>:
 800ceda:	6893      	ldr	r3, [r2, #8]
 800cedc:	3b01      	subs	r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	b410      	push	{r4}
 800cee2:	6093      	str	r3, [r2, #8]
 800cee4:	da08      	bge.n	800cef8 <__sfputc_r+0x1e>
 800cee6:	6994      	ldr	r4, [r2, #24]
 800cee8:	42a3      	cmp	r3, r4
 800ceea:	db01      	blt.n	800cef0 <__sfputc_r+0x16>
 800ceec:	290a      	cmp	r1, #10
 800ceee:	d103      	bne.n	800cef8 <__sfputc_r+0x1e>
 800cef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef4:	f000 b932 	b.w	800d15c <__swbuf_r>
 800cef8:	6813      	ldr	r3, [r2, #0]
 800cefa:	1c58      	adds	r0, r3, #1
 800cefc:	6010      	str	r0, [r2, #0]
 800cefe:	7019      	strb	r1, [r3, #0]
 800cf00:	4608      	mov	r0, r1
 800cf02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <__sfputs_r>:
 800cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	460f      	mov	r7, r1
 800cf0e:	4614      	mov	r4, r2
 800cf10:	18d5      	adds	r5, r2, r3
 800cf12:	42ac      	cmp	r4, r5
 800cf14:	d101      	bne.n	800cf1a <__sfputs_r+0x12>
 800cf16:	2000      	movs	r0, #0
 800cf18:	e007      	b.n	800cf2a <__sfputs_r+0x22>
 800cf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1e:	463a      	mov	r2, r7
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7ff ffda 	bl	800ceda <__sfputc_r>
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	d1f3      	bne.n	800cf12 <__sfputs_r+0xa>
 800cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf2c <_vfiprintf_r>:
 800cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf30:	460d      	mov	r5, r1
 800cf32:	b09d      	sub	sp, #116	@ 0x74
 800cf34:	4614      	mov	r4, r2
 800cf36:	4698      	mov	r8, r3
 800cf38:	4606      	mov	r6, r0
 800cf3a:	b118      	cbz	r0, 800cf44 <_vfiprintf_r+0x18>
 800cf3c:	6a03      	ldr	r3, [r0, #32]
 800cf3e:	b90b      	cbnz	r3, 800cf44 <_vfiprintf_r+0x18>
 800cf40:	f7fe fa76 	bl	800b430 <__sinit>
 800cf44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf46:	07d9      	lsls	r1, r3, #31
 800cf48:	d405      	bmi.n	800cf56 <_vfiprintf_r+0x2a>
 800cf4a:	89ab      	ldrh	r3, [r5, #12]
 800cf4c:	059a      	lsls	r2, r3, #22
 800cf4e:	d402      	bmi.n	800cf56 <_vfiprintf_r+0x2a>
 800cf50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf52:	f7fe fbba 	bl	800b6ca <__retarget_lock_acquire_recursive>
 800cf56:	89ab      	ldrh	r3, [r5, #12]
 800cf58:	071b      	lsls	r3, r3, #28
 800cf5a:	d501      	bpl.n	800cf60 <_vfiprintf_r+0x34>
 800cf5c:	692b      	ldr	r3, [r5, #16]
 800cf5e:	b99b      	cbnz	r3, 800cf88 <_vfiprintf_r+0x5c>
 800cf60:	4629      	mov	r1, r5
 800cf62:	4630      	mov	r0, r6
 800cf64:	f000 f938 	bl	800d1d8 <__swsetup_r>
 800cf68:	b170      	cbz	r0, 800cf88 <_vfiprintf_r+0x5c>
 800cf6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf6c:	07dc      	lsls	r4, r3, #31
 800cf6e:	d504      	bpl.n	800cf7a <_vfiprintf_r+0x4e>
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295
 800cf74:	b01d      	add	sp, #116	@ 0x74
 800cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7a:	89ab      	ldrh	r3, [r5, #12]
 800cf7c:	0598      	lsls	r0, r3, #22
 800cf7e:	d4f7      	bmi.n	800cf70 <_vfiprintf_r+0x44>
 800cf80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf82:	f7fe fba3 	bl	800b6cc <__retarget_lock_release_recursive>
 800cf86:	e7f3      	b.n	800cf70 <_vfiprintf_r+0x44>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf92:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf96:	2330      	movs	r3, #48	@ 0x30
 800cf98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d148 <_vfiprintf_r+0x21c>
 800cf9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfa0:	f04f 0901 	mov.w	r9, #1
 800cfa4:	4623      	mov	r3, r4
 800cfa6:	469a      	mov	sl, r3
 800cfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfac:	b10a      	cbz	r2, 800cfb2 <_vfiprintf_r+0x86>
 800cfae:	2a25      	cmp	r2, #37	@ 0x25
 800cfb0:	d1f9      	bne.n	800cfa6 <_vfiprintf_r+0x7a>
 800cfb2:	ebba 0b04 	subs.w	fp, sl, r4
 800cfb6:	d00b      	beq.n	800cfd0 <_vfiprintf_r+0xa4>
 800cfb8:	465b      	mov	r3, fp
 800cfba:	4622      	mov	r2, r4
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7ff ffa2 	bl	800cf08 <__sfputs_r>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f000 80a7 	beq.w	800d118 <_vfiprintf_r+0x1ec>
 800cfca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfcc:	445a      	add	r2, fp
 800cfce:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 809f 	beq.w	800d118 <_vfiprintf_r+0x1ec>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe4:	f10a 0a01 	add.w	sl, sl, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	9307      	str	r3, [sp, #28]
 800cfec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cff0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cff2:	4654      	mov	r4, sl
 800cff4:	2205      	movs	r2, #5
 800cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffa:	4853      	ldr	r0, [pc, #332]	@ (800d148 <_vfiprintf_r+0x21c>)
 800cffc:	f7f3 f8f0 	bl	80001e0 <memchr>
 800d000:	9a04      	ldr	r2, [sp, #16]
 800d002:	b9d8      	cbnz	r0, 800d03c <_vfiprintf_r+0x110>
 800d004:	06d1      	lsls	r1, r2, #27
 800d006:	bf44      	itt	mi
 800d008:	2320      	movmi	r3, #32
 800d00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d00e:	0713      	lsls	r3, r2, #28
 800d010:	bf44      	itt	mi
 800d012:	232b      	movmi	r3, #43	@ 0x2b
 800d014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d018:	f89a 3000 	ldrb.w	r3, [sl]
 800d01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d01e:	d015      	beq.n	800d04c <_vfiprintf_r+0x120>
 800d020:	9a07      	ldr	r2, [sp, #28]
 800d022:	4654      	mov	r4, sl
 800d024:	2000      	movs	r0, #0
 800d026:	f04f 0c0a 	mov.w	ip, #10
 800d02a:	4621      	mov	r1, r4
 800d02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d030:	3b30      	subs	r3, #48	@ 0x30
 800d032:	2b09      	cmp	r3, #9
 800d034:	d94b      	bls.n	800d0ce <_vfiprintf_r+0x1a2>
 800d036:	b1b0      	cbz	r0, 800d066 <_vfiprintf_r+0x13a>
 800d038:	9207      	str	r2, [sp, #28]
 800d03a:	e014      	b.n	800d066 <_vfiprintf_r+0x13a>
 800d03c:	eba0 0308 	sub.w	r3, r0, r8
 800d040:	fa09 f303 	lsl.w	r3, r9, r3
 800d044:	4313      	orrs	r3, r2
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	46a2      	mov	sl, r4
 800d04a:	e7d2      	b.n	800cff2 <_vfiprintf_r+0xc6>
 800d04c:	9b03      	ldr	r3, [sp, #12]
 800d04e:	1d19      	adds	r1, r3, #4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	9103      	str	r1, [sp, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	bfbb      	ittet	lt
 800d058:	425b      	neglt	r3, r3
 800d05a:	f042 0202 	orrlt.w	r2, r2, #2
 800d05e:	9307      	strge	r3, [sp, #28]
 800d060:	9307      	strlt	r3, [sp, #28]
 800d062:	bfb8      	it	lt
 800d064:	9204      	strlt	r2, [sp, #16]
 800d066:	7823      	ldrb	r3, [r4, #0]
 800d068:	2b2e      	cmp	r3, #46	@ 0x2e
 800d06a:	d10a      	bne.n	800d082 <_vfiprintf_r+0x156>
 800d06c:	7863      	ldrb	r3, [r4, #1]
 800d06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d070:	d132      	bne.n	800d0d8 <_vfiprintf_r+0x1ac>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	1d1a      	adds	r2, r3, #4
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	9203      	str	r2, [sp, #12]
 800d07a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d07e:	3402      	adds	r4, #2
 800d080:	9305      	str	r3, [sp, #20]
 800d082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d158 <_vfiprintf_r+0x22c>
 800d086:	7821      	ldrb	r1, [r4, #0]
 800d088:	2203      	movs	r2, #3
 800d08a:	4650      	mov	r0, sl
 800d08c:	f7f3 f8a8 	bl	80001e0 <memchr>
 800d090:	b138      	cbz	r0, 800d0a2 <_vfiprintf_r+0x176>
 800d092:	9b04      	ldr	r3, [sp, #16]
 800d094:	eba0 000a 	sub.w	r0, r0, sl
 800d098:	2240      	movs	r2, #64	@ 0x40
 800d09a:	4082      	lsls	r2, r0
 800d09c:	4313      	orrs	r3, r2
 800d09e:	3401      	adds	r4, #1
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a6:	4829      	ldr	r0, [pc, #164]	@ (800d14c <_vfiprintf_r+0x220>)
 800d0a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ac:	2206      	movs	r2, #6
 800d0ae:	f7f3 f897 	bl	80001e0 <memchr>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d03f      	beq.n	800d136 <_vfiprintf_r+0x20a>
 800d0b6:	4b26      	ldr	r3, [pc, #152]	@ (800d150 <_vfiprintf_r+0x224>)
 800d0b8:	bb1b      	cbnz	r3, 800d102 <_vfiprintf_r+0x1d6>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	3307      	adds	r3, #7
 800d0be:	f023 0307 	bic.w	r3, r3, #7
 800d0c2:	3308      	adds	r3, #8
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c8:	443b      	add	r3, r7
 800d0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0cc:	e76a      	b.n	800cfa4 <_vfiprintf_r+0x78>
 800d0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	e7a8      	b.n	800d02a <_vfiprintf_r+0xfe>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	3401      	adds	r4, #1
 800d0dc:	9305      	str	r3, [sp, #20]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	f04f 0c0a 	mov.w	ip, #10
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ea:	3a30      	subs	r2, #48	@ 0x30
 800d0ec:	2a09      	cmp	r2, #9
 800d0ee:	d903      	bls.n	800d0f8 <_vfiprintf_r+0x1cc>
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0c6      	beq.n	800d082 <_vfiprintf_r+0x156>
 800d0f4:	9105      	str	r1, [sp, #20]
 800d0f6:	e7c4      	b.n	800d082 <_vfiprintf_r+0x156>
 800d0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7f0      	b.n	800d0e4 <_vfiprintf_r+0x1b8>
 800d102:	ab03      	add	r3, sp, #12
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	462a      	mov	r2, r5
 800d108:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <_vfiprintf_r+0x228>)
 800d10a:	a904      	add	r1, sp, #16
 800d10c:	4630      	mov	r0, r6
 800d10e:	f7fd fd4b 	bl	800aba8 <_printf_float>
 800d112:	4607      	mov	r7, r0
 800d114:	1c78      	adds	r0, r7, #1
 800d116:	d1d6      	bne.n	800d0c6 <_vfiprintf_r+0x19a>
 800d118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d11a:	07d9      	lsls	r1, r3, #31
 800d11c:	d405      	bmi.n	800d12a <_vfiprintf_r+0x1fe>
 800d11e:	89ab      	ldrh	r3, [r5, #12]
 800d120:	059a      	lsls	r2, r3, #22
 800d122:	d402      	bmi.n	800d12a <_vfiprintf_r+0x1fe>
 800d124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d126:	f7fe fad1 	bl	800b6cc <__retarget_lock_release_recursive>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	065b      	lsls	r3, r3, #25
 800d12e:	f53f af1f 	bmi.w	800cf70 <_vfiprintf_r+0x44>
 800d132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d134:	e71e      	b.n	800cf74 <_vfiprintf_r+0x48>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462a      	mov	r2, r5
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <_vfiprintf_r+0x228>)
 800d13e:	a904      	add	r1, sp, #16
 800d140:	4630      	mov	r0, r6
 800d142:	f7fd ffc9 	bl	800b0d8 <_printf_i>
 800d146:	e7e4      	b.n	800d112 <_vfiprintf_r+0x1e6>
 800d148:	0800dc87 	.word	0x0800dc87
 800d14c:	0800dc91 	.word	0x0800dc91
 800d150:	0800aba9 	.word	0x0800aba9
 800d154:	0800cf09 	.word	0x0800cf09
 800d158:	0800dc8d 	.word	0x0800dc8d

0800d15c <__swbuf_r>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	460e      	mov	r6, r1
 800d160:	4614      	mov	r4, r2
 800d162:	4605      	mov	r5, r0
 800d164:	b118      	cbz	r0, 800d16e <__swbuf_r+0x12>
 800d166:	6a03      	ldr	r3, [r0, #32]
 800d168:	b90b      	cbnz	r3, 800d16e <__swbuf_r+0x12>
 800d16a:	f7fe f961 	bl	800b430 <__sinit>
 800d16e:	69a3      	ldr	r3, [r4, #24]
 800d170:	60a3      	str	r3, [r4, #8]
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	071a      	lsls	r2, r3, #28
 800d176:	d501      	bpl.n	800d17c <__swbuf_r+0x20>
 800d178:	6923      	ldr	r3, [r4, #16]
 800d17a:	b943      	cbnz	r3, 800d18e <__swbuf_r+0x32>
 800d17c:	4621      	mov	r1, r4
 800d17e:	4628      	mov	r0, r5
 800d180:	f000 f82a 	bl	800d1d8 <__swsetup_r>
 800d184:	b118      	cbz	r0, 800d18e <__swbuf_r+0x32>
 800d186:	f04f 37ff 	mov.w	r7, #4294967295
 800d18a:	4638      	mov	r0, r7
 800d18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	6922      	ldr	r2, [r4, #16]
 800d192:	1a98      	subs	r0, r3, r2
 800d194:	6963      	ldr	r3, [r4, #20]
 800d196:	b2f6      	uxtb	r6, r6
 800d198:	4283      	cmp	r3, r0
 800d19a:	4637      	mov	r7, r6
 800d19c:	dc05      	bgt.n	800d1aa <__swbuf_r+0x4e>
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f7ff fdf7 	bl	800cd94 <_fflush_r>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1ed      	bne.n	800d186 <__swbuf_r+0x2a>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	60a3      	str	r3, [r4, #8]
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	6022      	str	r2, [r4, #0]
 800d1b6:	701e      	strb	r6, [r3, #0]
 800d1b8:	6962      	ldr	r2, [r4, #20]
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d004      	beq.n	800d1ca <__swbuf_r+0x6e>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	07db      	lsls	r3, r3, #31
 800d1c4:	d5e1      	bpl.n	800d18a <__swbuf_r+0x2e>
 800d1c6:	2e0a      	cmp	r6, #10
 800d1c8:	d1df      	bne.n	800d18a <__swbuf_r+0x2e>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f7ff fde1 	bl	800cd94 <_fflush_r>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0d9      	beq.n	800d18a <__swbuf_r+0x2e>
 800d1d6:	e7d6      	b.n	800d186 <__swbuf_r+0x2a>

0800d1d8 <__swsetup_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4b29      	ldr	r3, [pc, #164]	@ (800d280 <__swsetup_r+0xa8>)
 800d1dc:	4605      	mov	r5, r0
 800d1de:	6818      	ldr	r0, [r3, #0]
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	b118      	cbz	r0, 800d1ec <__swsetup_r+0x14>
 800d1e4:	6a03      	ldr	r3, [r0, #32]
 800d1e6:	b90b      	cbnz	r3, 800d1ec <__swsetup_r+0x14>
 800d1e8:	f7fe f922 	bl	800b430 <__sinit>
 800d1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f0:	0719      	lsls	r1, r3, #28
 800d1f2:	d422      	bmi.n	800d23a <__swsetup_r+0x62>
 800d1f4:	06da      	lsls	r2, r3, #27
 800d1f6:	d407      	bmi.n	800d208 <__swsetup_r+0x30>
 800d1f8:	2209      	movs	r2, #9
 800d1fa:	602a      	str	r2, [r5, #0]
 800d1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	e033      	b.n	800d270 <__swsetup_r+0x98>
 800d208:	0758      	lsls	r0, r3, #29
 800d20a:	d512      	bpl.n	800d232 <__swsetup_r+0x5a>
 800d20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d20e:	b141      	cbz	r1, 800d222 <__swsetup_r+0x4a>
 800d210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d214:	4299      	cmp	r1, r3
 800d216:	d002      	beq.n	800d21e <__swsetup_r+0x46>
 800d218:	4628      	mov	r0, r5
 800d21a:	f7ff f8b5 	bl	800c388 <_free_r>
 800d21e:	2300      	movs	r3, #0
 800d220:	6363      	str	r3, [r4, #52]	@ 0x34
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	2300      	movs	r3, #0
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f043 0308 	orr.w	r3, r3, #8
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	6923      	ldr	r3, [r4, #16]
 800d23c:	b94b      	cbnz	r3, 800d252 <__swsetup_r+0x7a>
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d248:	d003      	beq.n	800d252 <__swsetup_r+0x7a>
 800d24a:	4621      	mov	r1, r4
 800d24c:	4628      	mov	r0, r5
 800d24e:	f000 f883 	bl	800d358 <__smakebuf_r>
 800d252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d256:	f013 0201 	ands.w	r2, r3, #1
 800d25a:	d00a      	beq.n	800d272 <__swsetup_r+0x9a>
 800d25c:	2200      	movs	r2, #0
 800d25e:	60a2      	str	r2, [r4, #8]
 800d260:	6962      	ldr	r2, [r4, #20]
 800d262:	4252      	negs	r2, r2
 800d264:	61a2      	str	r2, [r4, #24]
 800d266:	6922      	ldr	r2, [r4, #16]
 800d268:	b942      	cbnz	r2, 800d27c <__swsetup_r+0xa4>
 800d26a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d26e:	d1c5      	bne.n	800d1fc <__swsetup_r+0x24>
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	0799      	lsls	r1, r3, #30
 800d274:	bf58      	it	pl
 800d276:	6962      	ldrpl	r2, [r4, #20]
 800d278:	60a2      	str	r2, [r4, #8]
 800d27a:	e7f4      	b.n	800d266 <__swsetup_r+0x8e>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e7f7      	b.n	800d270 <__swsetup_r+0x98>
 800d280:	20000028 	.word	0x20000028

0800d284 <_raise_r>:
 800d284:	291f      	cmp	r1, #31
 800d286:	b538      	push	{r3, r4, r5, lr}
 800d288:	4605      	mov	r5, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	d904      	bls.n	800d298 <_raise_r+0x14>
 800d28e:	2316      	movs	r3, #22
 800d290:	6003      	str	r3, [r0, #0]
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d29a:	b112      	cbz	r2, 800d2a2 <_raise_r+0x1e>
 800d29c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2a0:	b94b      	cbnz	r3, 800d2b6 <_raise_r+0x32>
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f830 	bl	800d308 <_getpid_r>
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2b2:	f000 b817 	b.w	800d2e4 <_kill_r>
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d00a      	beq.n	800d2d0 <_raise_r+0x4c>
 800d2ba:	1c59      	adds	r1, r3, #1
 800d2bc:	d103      	bne.n	800d2c6 <_raise_r+0x42>
 800d2be:	2316      	movs	r3, #22
 800d2c0:	6003      	str	r3, [r0, #0]
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	e7e7      	b.n	800d296 <_raise_r+0x12>
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	4798      	blx	r3
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e7e0      	b.n	800d296 <_raise_r+0x12>

0800d2d4 <raise>:
 800d2d4:	4b02      	ldr	r3, [pc, #8]	@ (800d2e0 <raise+0xc>)
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	f7ff bfd3 	b.w	800d284 <_raise_r>
 800d2de:	bf00      	nop
 800d2e0:	20000028 	.word	0x20000028

0800d2e4 <_kill_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	4d07      	ldr	r5, [pc, #28]	@ (800d304 <_kill_r+0x20>)
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	4608      	mov	r0, r1
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	602b      	str	r3, [r5, #0]
 800d2f2:	f7f6 f989 	bl	8003608 <_kill>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	d102      	bne.n	800d300 <_kill_r+0x1c>
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	b103      	cbz	r3, 800d300 <_kill_r+0x1c>
 800d2fe:	6023      	str	r3, [r4, #0]
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	bf00      	nop
 800d304:	20005128 	.word	0x20005128

0800d308 <_getpid_r>:
 800d308:	f7f6 b976 	b.w	80035f8 <_getpid>

0800d30c <__swhatbuf_r>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	460c      	mov	r4, r1
 800d310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d314:	2900      	cmp	r1, #0
 800d316:	b096      	sub	sp, #88	@ 0x58
 800d318:	4615      	mov	r5, r2
 800d31a:	461e      	mov	r6, r3
 800d31c:	da0d      	bge.n	800d33a <__swhatbuf_r+0x2e>
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d324:	f04f 0100 	mov.w	r1, #0
 800d328:	bf14      	ite	ne
 800d32a:	2340      	movne	r3, #64	@ 0x40
 800d32c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d330:	2000      	movs	r0, #0
 800d332:	6031      	str	r1, [r6, #0]
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	b016      	add	sp, #88	@ 0x58
 800d338:	bd70      	pop	{r4, r5, r6, pc}
 800d33a:	466a      	mov	r2, sp
 800d33c:	f000 f848 	bl	800d3d0 <_fstat_r>
 800d340:	2800      	cmp	r0, #0
 800d342:	dbec      	blt.n	800d31e <__swhatbuf_r+0x12>
 800d344:	9901      	ldr	r1, [sp, #4]
 800d346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d34a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d34e:	4259      	negs	r1, r3
 800d350:	4159      	adcs	r1, r3
 800d352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d356:	e7eb      	b.n	800d330 <__swhatbuf_r+0x24>

0800d358 <__smakebuf_r>:
 800d358:	898b      	ldrh	r3, [r1, #12]
 800d35a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d35c:	079d      	lsls	r5, r3, #30
 800d35e:	4606      	mov	r6, r0
 800d360:	460c      	mov	r4, r1
 800d362:	d507      	bpl.n	800d374 <__smakebuf_r+0x1c>
 800d364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	6123      	str	r3, [r4, #16]
 800d36c:	2301      	movs	r3, #1
 800d36e:	6163      	str	r3, [r4, #20]
 800d370:	b003      	add	sp, #12
 800d372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d374:	ab01      	add	r3, sp, #4
 800d376:	466a      	mov	r2, sp
 800d378:	f7ff ffc8 	bl	800d30c <__swhatbuf_r>
 800d37c:	9f00      	ldr	r7, [sp, #0]
 800d37e:	4605      	mov	r5, r0
 800d380:	4639      	mov	r1, r7
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff f874 	bl	800c470 <_malloc_r>
 800d388:	b948      	cbnz	r0, 800d39e <__smakebuf_r+0x46>
 800d38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d38e:	059a      	lsls	r2, r3, #22
 800d390:	d4ee      	bmi.n	800d370 <__smakebuf_r+0x18>
 800d392:	f023 0303 	bic.w	r3, r3, #3
 800d396:	f043 0302 	orr.w	r3, r3, #2
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	e7e2      	b.n	800d364 <__smakebuf_r+0xc>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	6020      	str	r0, [r4, #0]
 800d3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	9b01      	ldr	r3, [sp, #4]
 800d3aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3ae:	b15b      	cbz	r3, 800d3c8 <__smakebuf_r+0x70>
 800d3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f000 f81d 	bl	800d3f4 <_isatty_r>
 800d3ba:	b128      	cbz	r0, 800d3c8 <__smakebuf_r+0x70>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	f043 0301 	orr.w	r3, r3, #1
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	431d      	orrs	r5, r3
 800d3cc:	81a5      	strh	r5, [r4, #12]
 800d3ce:	e7cf      	b.n	800d370 <__smakebuf_r+0x18>

0800d3d0 <_fstat_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d07      	ldr	r5, [pc, #28]	@ (800d3f0 <_fstat_r+0x20>)
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	4611      	mov	r1, r2
 800d3dc:	602b      	str	r3, [r5, #0]
 800d3de:	f7f6 f973 	bl	80036c8 <_fstat>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	d102      	bne.n	800d3ec <_fstat_r+0x1c>
 800d3e6:	682b      	ldr	r3, [r5, #0]
 800d3e8:	b103      	cbz	r3, 800d3ec <_fstat_r+0x1c>
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20005128 	.word	0x20005128

0800d3f4 <_isatty_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d06      	ldr	r5, [pc, #24]	@ (800d410 <_isatty_r+0x1c>)
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f6 f972 	bl	80036e8 <_isatty>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_isatty_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_isatty_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20005128 	.word	0x20005128

0800d414 <atan2f>:
 800d414:	f000 b822 	b.w	800d45c <__ieee754_atan2f>

0800d418 <sqrtf>:
 800d418:	b508      	push	{r3, lr}
 800d41a:	ed2d 8b02 	vpush	{d8}
 800d41e:	eeb0 8a40 	vmov.f32	s16, s0
 800d422:	f000 f817 	bl	800d454 <__ieee754_sqrtf>
 800d426:	eeb4 8a48 	vcmp.f32	s16, s16
 800d42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42e:	d60c      	bvs.n	800d44a <sqrtf+0x32>
 800d430:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d450 <sqrtf+0x38>
 800d434:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43c:	d505      	bpl.n	800d44a <sqrtf+0x32>
 800d43e:	f7fe f919 	bl	800b674 <__errno>
 800d442:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d446:	2321      	movs	r3, #33	@ 0x21
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	ecbd 8b02 	vpop	{d8}
 800d44e:	bd08      	pop	{r3, pc}
 800d450:	00000000 	.word	0x00000000

0800d454 <__ieee754_sqrtf>:
 800d454:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d458:	4770      	bx	lr
	...

0800d45c <__ieee754_atan2f>:
 800d45c:	ee10 2a90 	vmov	r2, s1
 800d460:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d464:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d468:	b510      	push	{r4, lr}
 800d46a:	eef0 7a40 	vmov.f32	s15, s0
 800d46e:	d806      	bhi.n	800d47e <__ieee754_atan2f+0x22>
 800d470:	ee10 0a10 	vmov	r0, s0
 800d474:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d478:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d47c:	d904      	bls.n	800d488 <__ieee754_atan2f+0x2c>
 800d47e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d482:	eeb0 0a67 	vmov.f32	s0, s15
 800d486:	bd10      	pop	{r4, pc}
 800d488:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d48c:	d103      	bne.n	800d496 <__ieee754_atan2f+0x3a>
 800d48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d492:	f000 b883 	b.w	800d59c <atanf>
 800d496:	1794      	asrs	r4, r2, #30
 800d498:	f004 0402 	and.w	r4, r4, #2
 800d49c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d4a0:	b943      	cbnz	r3, 800d4b4 <__ieee754_atan2f+0x58>
 800d4a2:	2c02      	cmp	r4, #2
 800d4a4:	d05e      	beq.n	800d564 <__ieee754_atan2f+0x108>
 800d4a6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d578 <__ieee754_atan2f+0x11c>
 800d4aa:	2c03      	cmp	r4, #3
 800d4ac:	bf08      	it	eq
 800d4ae:	eef0 7a47 	vmoveq.f32	s15, s14
 800d4b2:	e7e6      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d4b4:	b941      	cbnz	r1, 800d4c8 <__ieee754_atan2f+0x6c>
 800d4b6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d57c <__ieee754_atan2f+0x120>
 800d4ba:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d580 <__ieee754_atan2f+0x124>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	bfb8      	it	lt
 800d4c2:	eef0 7a47 	vmovlt.f32	s15, s14
 800d4c6:	e7dc      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d4c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d4cc:	d110      	bne.n	800d4f0 <__ieee754_atan2f+0x94>
 800d4ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d4d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4d6:	d107      	bne.n	800d4e8 <__ieee754_atan2f+0x8c>
 800d4d8:	2c02      	cmp	r4, #2
 800d4da:	d846      	bhi.n	800d56a <__ieee754_atan2f+0x10e>
 800d4dc:	4b29      	ldr	r3, [pc, #164]	@ (800d584 <__ieee754_atan2f+0x128>)
 800d4de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d4e2:	edd3 7a00 	vldr	s15, [r3]
 800d4e6:	e7cc      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d4e8:	2c02      	cmp	r4, #2
 800d4ea:	d841      	bhi.n	800d570 <__ieee754_atan2f+0x114>
 800d4ec:	4b26      	ldr	r3, [pc, #152]	@ (800d588 <__ieee754_atan2f+0x12c>)
 800d4ee:	e7f6      	b.n	800d4de <__ieee754_atan2f+0x82>
 800d4f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d4f4:	d0df      	beq.n	800d4b6 <__ieee754_atan2f+0x5a>
 800d4f6:	1a5b      	subs	r3, r3, r1
 800d4f8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d4fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d500:	da1a      	bge.n	800d538 <__ieee754_atan2f+0xdc>
 800d502:	2a00      	cmp	r2, #0
 800d504:	da01      	bge.n	800d50a <__ieee754_atan2f+0xae>
 800d506:	313c      	adds	r1, #60	@ 0x3c
 800d508:	db19      	blt.n	800d53e <__ieee754_atan2f+0xe2>
 800d50a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d50e:	f000 f919 	bl	800d744 <fabsf>
 800d512:	f000 f843 	bl	800d59c <atanf>
 800d516:	eef0 7a40 	vmov.f32	s15, s0
 800d51a:	2c01      	cmp	r4, #1
 800d51c:	d012      	beq.n	800d544 <__ieee754_atan2f+0xe8>
 800d51e:	2c02      	cmp	r4, #2
 800d520:	d017      	beq.n	800d552 <__ieee754_atan2f+0xf6>
 800d522:	2c00      	cmp	r4, #0
 800d524:	d0ad      	beq.n	800d482 <__ieee754_atan2f+0x26>
 800d526:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d58c <__ieee754_atan2f+0x130>
 800d52a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d52e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d590 <__ieee754_atan2f+0x134>
 800d532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d536:	e7a4      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d538:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d57c <__ieee754_atan2f+0x120>
 800d53c:	e7ed      	b.n	800d51a <__ieee754_atan2f+0xbe>
 800d53e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d594 <__ieee754_atan2f+0x138>
 800d542:	e7ea      	b.n	800d51a <__ieee754_atan2f+0xbe>
 800d544:	ee17 3a90 	vmov	r3, s15
 800d548:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d54c:	ee07 3a90 	vmov	s15, r3
 800d550:	e797      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d552:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d58c <__ieee754_atan2f+0x130>
 800d556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d55a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d590 <__ieee754_atan2f+0x134>
 800d55e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d562:	e78e      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d564:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d590 <__ieee754_atan2f+0x134>
 800d568:	e78b      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d56a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d598 <__ieee754_atan2f+0x13c>
 800d56e:	e788      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d570:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d594 <__ieee754_atan2f+0x138>
 800d574:	e785      	b.n	800d482 <__ieee754_atan2f+0x26>
 800d576:	bf00      	nop
 800d578:	c0490fdb 	.word	0xc0490fdb
 800d57c:	3fc90fdb 	.word	0x3fc90fdb
 800d580:	bfc90fdb 	.word	0xbfc90fdb
 800d584:	0800dca4 	.word	0x0800dca4
 800d588:	0800dc98 	.word	0x0800dc98
 800d58c:	33bbbd2e 	.word	0x33bbbd2e
 800d590:	40490fdb 	.word	0x40490fdb
 800d594:	00000000 	.word	0x00000000
 800d598:	3f490fdb 	.word	0x3f490fdb

0800d59c <atanf>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	ee10 5a10 	vmov	r5, s0
 800d5a2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d5a6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d5aa:	eef0 7a40 	vmov.f32	s15, s0
 800d5ae:	d310      	bcc.n	800d5d2 <atanf+0x36>
 800d5b0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d5b4:	d904      	bls.n	800d5c0 <atanf+0x24>
 800d5b6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d6f8 <atanf+0x15c>
 800d5c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d6fc <atanf+0x160>
 800d5c8:	2d00      	cmp	r5, #0
 800d5ca:	bfc8      	it	gt
 800d5cc:	eef0 7a47 	vmovgt.f32	s15, s14
 800d5d0:	e7f3      	b.n	800d5ba <atanf+0x1e>
 800d5d2:	4b4b      	ldr	r3, [pc, #300]	@ (800d700 <atanf+0x164>)
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	d810      	bhi.n	800d5fa <atanf+0x5e>
 800d5d8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d5dc:	d20a      	bcs.n	800d5f4 <atanf+0x58>
 800d5de:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d704 <atanf+0x168>
 800d5e2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5ea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f2:	dce2      	bgt.n	800d5ba <atanf+0x1e>
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f8:	e013      	b.n	800d622 <atanf+0x86>
 800d5fa:	f000 f8a3 	bl	800d744 <fabsf>
 800d5fe:	4b42      	ldr	r3, [pc, #264]	@ (800d708 <atanf+0x16c>)
 800d600:	429c      	cmp	r4, r3
 800d602:	d84f      	bhi.n	800d6a4 <atanf+0x108>
 800d604:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d608:	429c      	cmp	r4, r3
 800d60a:	d841      	bhi.n	800d690 <atanf+0xf4>
 800d60c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d610:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d614:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d618:	2300      	movs	r3, #0
 800d61a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d61e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d628:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d70c <atanf+0x170>
 800d62c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d710 <atanf+0x174>
 800d630:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d714 <atanf+0x178>
 800d634:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d638:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d63c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d718 <atanf+0x17c>
 800d640:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d644:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d71c <atanf+0x180>
 800d648:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d64c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d720 <atanf+0x184>
 800d650:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d654:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d724 <atanf+0x188>
 800d658:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d65c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d728 <atanf+0x18c>
 800d660:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d664:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d72c <atanf+0x190>
 800d668:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d66c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d730 <atanf+0x194>
 800d670:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d674:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d734 <atanf+0x198>
 800d678:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d67c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d680:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d684:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d688:	d121      	bne.n	800d6ce <atanf+0x132>
 800d68a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d68e:	e794      	b.n	800d5ba <atanf+0x1e>
 800d690:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d694:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d698:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d69c:	2301      	movs	r3, #1
 800d69e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d6a2:	e7be      	b.n	800d622 <atanf+0x86>
 800d6a4:	4b24      	ldr	r3, [pc, #144]	@ (800d738 <atanf+0x19c>)
 800d6a6:	429c      	cmp	r4, r3
 800d6a8:	d80b      	bhi.n	800d6c2 <atanf+0x126>
 800d6aa:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d6ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6b2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d6b6:	2302      	movs	r3, #2
 800d6b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c0:	e7af      	b.n	800d622 <atanf+0x86>
 800d6c2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d6c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e7a9      	b.n	800d622 <atanf+0x86>
 800d6ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d73c <atanf+0x1a0>)
 800d6d0:	491b      	ldr	r1, [pc, #108]	@ (800d740 <atanf+0x1a4>)
 800d6d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d6d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d6da:	edd3 6a00 	vldr	s13, [r3]
 800d6de:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d6e2:	2d00      	cmp	r5, #0
 800d6e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6e8:	edd2 7a00 	vldr	s15, [r2]
 800d6ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6f0:	bfb8      	it	lt
 800d6f2:	eef1 7a67 	vneglt.f32	s15, s15
 800d6f6:	e760      	b.n	800d5ba <atanf+0x1e>
 800d6f8:	bfc90fdb 	.word	0xbfc90fdb
 800d6fc:	3fc90fdb 	.word	0x3fc90fdb
 800d700:	3edfffff 	.word	0x3edfffff
 800d704:	7149f2ca 	.word	0x7149f2ca
 800d708:	3f97ffff 	.word	0x3f97ffff
 800d70c:	3c8569d7 	.word	0x3c8569d7
 800d710:	3d4bda59 	.word	0x3d4bda59
 800d714:	bd6ef16b 	.word	0xbd6ef16b
 800d718:	3d886b35 	.word	0x3d886b35
 800d71c:	3dba2e6e 	.word	0x3dba2e6e
 800d720:	3e124925 	.word	0x3e124925
 800d724:	3eaaaaab 	.word	0x3eaaaaab
 800d728:	bd15a221 	.word	0xbd15a221
 800d72c:	bd9d8795 	.word	0xbd9d8795
 800d730:	bde38e38 	.word	0xbde38e38
 800d734:	be4ccccd 	.word	0xbe4ccccd
 800d738:	401bffff 	.word	0x401bffff
 800d73c:	0800dcc0 	.word	0x0800dcc0
 800d740:	0800dcb0 	.word	0x0800dcb0

0800d744 <fabsf>:
 800d744:	ee10 3a10 	vmov	r3, s0
 800d748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d74c:	ee00 3a10 	vmov	s0, r3
 800d750:	4770      	bx	lr
	...

0800d754 <_init>:
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	bf00      	nop
 800d758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75a:	bc08      	pop	{r3}
 800d75c:	469e      	mov	lr, r3
 800d75e:	4770      	bx	lr

0800d760 <_fini>:
 800d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d762:	bf00      	nop
 800d764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d766:	bc08      	pop	{r3}
 800d768:	469e      	mov	lr, r3
 800d76a:	4770      	bx	lr
